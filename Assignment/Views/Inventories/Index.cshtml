@{
    ViewData["Title"] = "Quản lý tồn kho";
    Layout = "_AdminLayout";
    var canViewAll = ViewData["CanViewAll"] as bool? ?? false;
}

<div class="container-fluid pt-4 px-4" id="inventory-app" data-can-view-all="@(canViewAll ? "true" : "false")">
    <div class="card shadow-sm">
        <div class="card-header bg-light d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
            <div>
                <h4 class="mb-1 text-primary">
                    <i class="fas fa-boxes-stacked me-2"></i>@ViewData["Title"]
                </h4>
                <p class="mb-0 text-muted">
                    @if (canViewAll)
                    {
                        <span>Bạn đang xem tồn kho của tất cả nguyên vật liệu.</span>
                    }
                    else
                    {
                        <span>Bạn đang xem tồn kho các nguyên vật liệu được phân quyền.</span>
                    }
                </p>
            </div>
            <div class="ms-md-auto">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="search" class="form-control" id="inventorySearch" placeholder="Tìm kiếm nguyên vật liệu hoặc kho" />
                </div>
            </div>
        </div>
        <div class="card-body">
            <div id="inventoryAlert"></div>
            <div class="table-responsive">
                <table class="table table-hover align-middle" id="inventoryTable">
                    <thead class="table-light">
                        <tr>
                            <th>Nguyên vật liệu</th>
                            <th>Kho</th>
                            <th class="text-end">Tồn hiện tại</th>
                            <th>Đơn vị</th>
                            <th class="text-end">Tồn tối thiểu</th>
                            <th>Trạng thái</th>
                            <th>Đồng bộ lần cuối</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="7" class="text-center py-4 text-muted">Đang tải dữ liệu tồn kho...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const app = document.getElementById('inventory-app');
            if (!app) {
                return;
            }

            const tableBody = document.querySelector('#inventoryTable tbody');
            const searchInput = document.getElementById('inventorySearch');
            const alertPlaceholder = document.getElementById('inventoryAlert');
            const canViewAll = app.dataset.canViewAll === 'true';

            let allInventories = [];
            let filteredInventories = [];

            function showAlert(message, type = 'danger') {
                if (!alertPlaceholder) {
                    return;
                }

                const wrapper = document.createElement('div');
                wrapper.className = `alert alert-${type} alert-dismissible fade show`;
                wrapper.role = 'alert';
                wrapper.innerHTML = `
                    <div>${message}</div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Đóng"></button>`;

                alertPlaceholder.appendChild(wrapper);
            }

            function setLoading(message = 'Đang tải dữ liệu tồn kho...') {
                if (!tableBody) {
                    return;
                }

                tableBody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-4 text-muted">${message}</td>
                    </tr>`;
            }

            function formatDate(value) {
                if (!value) {
                    return '—';
                }
                const date = new Date(value);
                if (Number.isNaN(date.getTime())) {
                    return '—';
                }
                return date.toLocaleString('vi-VN');
            }

            function formatStatus(isBelowMinimum) {
                return isBelowMinimum
                    ? '<span class="badge bg-danger">Dưới mức tối thiểu</span>'
                    : '<span class="badge bg-success">Đủ tồn kho</span>';
            }

            function renderTable(items) {
                if (!tableBody) {
                    return;
                }

                if (!Array.isArray(items) || items.length === 0) {
                    setLoading('Không có dữ liệu tồn kho phù hợp.');
                    return;
                }

                const rows = items.map(item => `
                    <tr>
                        <td>
                            <div class="fw-semibold">${item.materialName ?? '—'}</div>
                            ${canViewAll ? `<div class="text-muted small">Mã nguyên liệu: ${item.materialId}</div>` : ''}
                        </td>
                        <td>${item.warehouseId ?? '—'}</td>
                        <td class="text-end">${Number(item.currentStock ?? 0).toLocaleString('vi-VN')}</td>
                        <td>${item.baseUnitName ?? '—'}</td>
                        <td class="text-end">${Number(item.minStockLevel ?? 0).toLocaleString('vi-VN')}</td>
                        <td>${formatStatus(Boolean(item.isBelowMinimum))}</td>
                        <td>${formatDate(item.lastUpdated)}</td>
                    </tr>`);

                tableBody.innerHTML = rows.join('');
            }

            function applyFilters() {
                if (!Array.isArray(allInventories)) {
                    filteredInventories = [];
                    renderTable(filteredInventories);
                    return;
                }

                const query = searchInput?.value?.trim().toLowerCase() ?? '';

                filteredInventories = allInventories.filter(item => {
                    if (!query) {
                        return true;
                    }

                    const materialMatch = (item.materialName ?? '').toLowerCase().includes(query);
                    const warehouseMatch = item.warehouseId && String(item.warehouseId).toLowerCase().includes(query);
                    return materialMatch || warehouseMatch;
                });

                renderTable(filteredInventories);
            }

            async function loadInventories() {
                setLoading();

                try {
                    const response = await fetch('/api/inventory');
                    if (!response.ok) {
                        if (response.status === 403) {
                            setLoading('Bạn không có quyền xem dữ liệu tồn kho.');
                            return;
                        }
                        throw new Error('Failed to load inventory');
                    }

                    const data = await response.json();
                    allInventories = Array.isArray(data) ? data : [];
                    applyFilters();
                } catch (error) {
                    setLoading('Không thể tải dữ liệu tồn kho.');
                    showAlert('Có lỗi xảy ra khi tải dữ liệu tồn kho. Vui lòng thử lại sau.');
                }
            }

            searchInput?.addEventListener('input', () => applyFilters());

            loadInventories();
        })();
    </script>
}
