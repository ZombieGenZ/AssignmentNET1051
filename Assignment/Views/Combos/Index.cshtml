@using Assignment.Enums
@{
    ViewData["Title"] = "Quản lý combo";
    Layout = "_AdminLayout";

    var canCreate = ViewData["CanCreate"] as bool? ?? false;
    var canUpdate = ViewData["CanUpdate"] as bool? ?? false;
    var canDelete = ViewData["CanDelete"] as bool? ?? false;
    var canView = ViewData["CanView"] as bool? ?? false;
    var canBulkManage = canDelete || canUpdate;
}

@section Styles {
    <style>
        #comboModal .modal-dialog,
        #detailModal .modal-dialog {
            max-height: calc(100vh - var(--bs-modal-margin) * 2);
        }

        #comboModal .modal-content,
        #detailModal .modal-content {
            display: flex;
            flex-direction: column;
            max-height: 100%;
        }

        #comboModal form {
            display: flex;
            flex-direction: column;
            flex: 1 1 auto;
            min-height: 0;
        }

        #comboModal .modal-body,
        #detailModal .modal-body {
            flex: 1 1 auto;
            overflow-y: auto;
            min-height: 0;
        }

        #comboModal .modal-footer,
        #detailModal .modal-footer {
            flex-shrink: 0;
            position: sticky;
            bottom: 0;
            background-color: var(--bs-modal-bg);
            border-top: 1px solid var(--bs-modal-border-color);
            z-index: 1;
        }

        #comboModal .modal-body::after {
            content: '';
            display: block;
            height: 1rem;
        }

        .image-upload-preview {
            position: relative;
            border: 1px dashed var(--bs-border-color);
            border-radius: 0.5rem;
            min-height: 180px;
            background-color: var(--bs-light);
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .image-upload-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .image-upload-preview.uploading {
            border-color: var(--bs-primary);
        }

        .image-upload-placeholder {
            text-align: center;
            color: var(--bs-secondary-color);
            padding: 1.5rem 1rem;
        }

        .image-upload-placeholder i {
            display: block;
            margin-bottom: 0.5rem;
        }

        .image-upload-spinner {
            position: absolute;
            inset: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgba(255, 255, 255, 0.7);
        }
    </style>
}

<div class="container-fluid pt-4 px-4">
    <div class="card shadow-sm" id="combo-app"
         data-can-create="@(canCreate ? "true" : "false")"
         data-can-update="@(canUpdate ? "true" : "false")"
         data-can-delete="@(canDelete ? "true" : "false")"
         data-can-view="@(canView ? "true" : "false")"
         data-detail-url-template="@Url.Action("ComboDetail", "Home", new { id = "__ID__" })">
        <div class="card-header bg-light">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                <div>
                    <h4 class="mb-1 text-primary">
                        <i class="fas fa-layer-group me-2"></i>@ViewData["Title"]
                    </h4>
                </div>
                <div class="d-flex flex-wrap gap-2">
                    @if (canCreate)
                    {
                        <button type="button" class="btn btn-primary" id="createComboBtn">
                            <i class="fas fa-plus me-2"></i>Thêm combo
                        </button>
                    }
                </div>
            </div>
        </div>
        <div class="card-body">
            <div id="alertPlaceholder"></div>
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 mb-3">
                <div class="text-muted small" id="tableStatus">@(canView ? "Đang tải dữ liệu combo..." : "Bạn không có quyền xem danh sách combo.")</div>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="refreshCombosBtn">
                        <i class="fas fa-rotate-right me-1"></i>Tải lại
                    </button>
                    @if (canBulkManage)
                    {
                        <div class="d-none d-flex flex-wrap gap-2" id="bulkActions">
                            @if (canUpdate)
                            {
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline-primary btn-sm dropdown-toggle" id="comboBulkPublishDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-bullhorn me-1"></i>Trạng thái công khai
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="comboBulkPublishDropdown">
                                        <li>
                                            <button type="button" class="dropdown-item" data-bulk-publish="publish">
                                                <i class="fas fa-globe me-2"></i>Xuất bản đã chọn
                                            </button>
                                        </li>
                                        <li>
                                            <button type="button" class="dropdown-item" data-bulk-publish="unpublish">
                                                <i class="fas fa-eye-slash me-2"></i>Ẩn khỏi công khai
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            }
                            @if (canDelete)
                            {
                                <button type="button" class="btn btn-danger btn-sm" id="bulkDeleteBtn">
                                    <i class="fas fa-trash-alt me-1"></i>Xóa đã chọn
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>
            <div class="filter-toolbar mb-4" id="comboFilters">
                <div class="row g-3 align-items-end">
                    <div class="col-12 col-xl-4">
                        <label class="form-label filter-label" for="comboSearchInput">Tìm kiếm</label>
                        <div class="filter-input-icon">
                            <i class="fas fa-search filter-icon"></i>
                            <input type="search" class="form-control" id="comboSearchInput" placeholder="Tên hoặc mô tả combo" />
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-xl-3">
                        <label class="form-label filter-label" for="comboStatusFilter">Trạng thái</label>
                        <select id="comboStatusFilter" class="form-select">
                            <option value="">Tất cả</option>
                            <option value="published">Đã xuất bản</option>
                            <option value="draft">Nháp</option>
                        </select>
                    </div>
                    <div class="col-12 col-sm-6 col-xl-3">
                        <label class="form-label filter-label" for="comboDiscountFilter">Loại giảm giá</label>
                        <select id="comboDiscountFilter" class="form-select">
                            <option value="">Tất cả</option>
                            <option value="none">Không áp dụng</option>
                            <option value="percent">Giảm theo %</option>
                            <option value="amount">Giảm theo tiền</option>
                            <option value="fixed">Giá ưu đãi cố định</option>
                        </select>
                    </div>
                    <div class="col-12 col-sm-6 col-xl-2 ms-xl-auto d-flex align-items-end">
                        <button type="button" class="btn btn-outline-secondary w-100" id="comboResetFilters">
                            <i class="fas fa-eraser me-1"></i>Xóa lọc
                        </button>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            @if (canBulkManage)
                            {
                                <th style="width: 50px;" class="text-center">
                                    <input type="checkbox" id="selectAllCombos" class="form-check-input" />
                                </th>
                            }
                            <th>Tên combo</th>
                            <th class="text-end">Giá gốc</th>
                            <th class="text-end">Giá sau giảm</th>
                            <th class="text-center">Tồn kho</th>
                            <th class="text-center">Trạng thái</th>
                            <th style="width: 140px;" class="text-center">Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="combosTableBody">
                        <tr>
                            <td colspan="@(canBulkManage ? 7 : 6)" class="text-center py-4 text-muted">@(canView ? "Đang tải dữ liệu..." : "Không có dữ liệu để hiển thị.")</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<form id="antiForgeryForm" class="d-none">
    @Html.AntiForgeryToken()
</form>

<div class="modal fade" id="comboModal" tabindex="-1" aria-labelledby="comboModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="comboModalLabel">Thêm combo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="comboForm" novalidate>
                <div class="modal-body">
                    <div id="comboFormErrors" class="alert alert-danger d-none" role="alert"></div>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="comboName" class="form-label">Tên combo<span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="comboName" maxlength="500" required />
                        </div>
                        <div class="col-md-6">
                            <label for="comboImageFile" class="form-label">Ảnh đại diện<span class="text-danger">*</span></label>
                            <input type="file" class="form-control" id="comboImageFile" accept="image/*" />
                            <div class="image-upload-preview mt-2" id="comboImagePreviewWrapper">
                                <img src="" alt="Xem trước ảnh combo" id="comboImagePreview" class="d-none" />
                                <div class="image-upload-placeholder" id="comboImagePlaceholder">
                                    <i class="fas fa-image fa-2x"></i>
                                    <div>Chưa chọn ảnh</div>
                                </div>
                                <div class="image-upload-spinner d-none" id="comboImageUploading">
                                    <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
                                </div>
                            </div>
                            <div class="form-text text-muted" id="comboImageUploadFeedback">Tải ảnh lên hoặc nhập URL ảnh định dạng JPG, PNG, GIF hoặc WEBP (tối đa 5MB).</div>
                            <div class="mt-3">
                                <label for="comboImageUrl" class="form-label">Hoặc nhập URL ảnh</label>
                                <input type="url" class="form-control" id="comboImageUrl" placeholder="https://example.com/hinh-anh.jpg" inputmode="url" />
                                <div class="form-text text-muted">Dán liên kết ảnh trực tiếp nếu ảnh được lưu trữ bên ngoài.</div>
                            </div>
                        </div>
                        <div class="col-12">
                            <label for="comboDescription" class="form-label">Mô tả<span class="text-danger">*</span></label>
                            <textarea class="form-control" id="comboDescription" rows="3" maxlength="10000" required></textarea>
                        </div>
                        <div class="col-md-4">
                            <label for="comboStock" class="form-label">Tồn kho<span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="comboStock" min="0" step="1" required />
                        </div>
                        <div class="col-md-4">
                            <label for="comboIndex" class="form-label">Thứ tự hiển thị<span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="comboIndex" min="0" step="1" required />
                        </div>
                        <div class="col-md-4">
                            <div class="form-check form-switch mt-4">
                                <input class="form-check-input" type="checkbox" id="comboIsPublish" />
                                <label class="form-check-label" for="comboIsPublish">Xuất bản</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="comboDiscountType" class="form-label">Loại giảm giá</label>
                            <select id="comboDiscountType" class="form-select">
                                <option value="@( (int)DiscountType.None )">Không áp dụng</option>
                                <option value="@( (int)DiscountType.Percent )">Giảm theo %</option>
                                <option value="@( (int)DiscountType.Amount )">Giảm theo tiền</option>
                                <option value="@( (int)DiscountType.FixedAmount )">Giá ưu đãi cố định</option>
                            </select>
                        </div>
                        <div class="col-md-6" id="comboDiscountWrapper" style="display: none;">
                            <label for="comboDiscount" class="form-label" id="comboDiscountLabel">Giá trị giảm</label>
                            <input type="number" class="form-control" id="comboDiscount" min="0" step="1" />
                        </div>
                    </div>
                    <hr class="my-4" />
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 mb-3">
                        <h5 class="mb-0">Sản phẩm trong combo</h5>
                        <div class="d-flex flex-wrap gap-2">
                            <a class="btn btn-outline-secondary btn-sm" id="downloadComboItemsTemplateLink" href="/api/combos/template">
                                <i class="fas fa-file-download me-1"></i>Tải file mẫu
                            </a>
                            <input type="file" accept=".xlsx" id="comboItemsImportInput" class="d-none" />
                            <button type="button" class="btn btn-outline-primary btn-sm" id="importComboItemsBtn">
                                <i class="fas fa-file-import me-1"></i>Nhập từ file
                            </button>
                            <button type="button" class="btn btn-outline-danger btn-sm" id="clearComboItemsBtn">
                                <i class="fas fa-trash-can me-1"></i>Xóa tất cả
                            </button>
                            <button type="button" class="btn btn-outline-success btn-sm" id="addComboItemBtn">
                                <i class="fas fa-plus me-1"></i>Thêm sản phẩm
                            </button>
                        </div>
                    </div>
                    <div id="comboItemsContainer" class="d-flex flex-column gap-3"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary" id="comboSubmitBtn">Thêm mới</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Xóa combo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Bạn có chắc chắn muốn xóa combo <strong id="deleteComboName"></strong>? Hành động này không thể hoàn tác.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="bulkDeleteModal" tabindex="-1" aria-labelledby="bulkDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bulkDeleteModalLabel">Xóa nhiều combo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Bạn có chắc chắn muốn xóa <strong id="bulkDeleteCount"></strong> combo đã chọn? Hành động này không thể hoàn tác.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmBulkDeleteBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="detailModal" tabindex="-1" aria-labelledby="detailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailModalLabel">Chi tiết combo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="d-flex flex-column gap-3" id="comboDetailContent"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const app = document.getElementById('combo-app');
            if (!app) {
                return;
            }

            const API_BASE_URL = '/api/combos';
            const canCreate = app.dataset.canCreate === 'true';
            const canUpdate = app.dataset.canUpdate === 'true';
            const canDelete = app.dataset.canDelete === 'true';
            const canView = app.dataset.canView === 'true';
            const canBulkManage = canDelete || canUpdate;

            const tableBody = document.getElementById('combosTableBody');
            const tableStatus = document.getElementById('tableStatus');
            const alertPlaceholder = document.getElementById('alertPlaceholder');
            const refreshBtn = document.getElementById('refreshCombosBtn');
            const selectAllCheckbox = document.getElementById('selectAllCombos');
            const bulkActions = document.getElementById('bulkActions');
            const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
            const bulkPublishButtons = document.querySelectorAll('[data-bulk-publish]');
            const createBtn = document.getElementById('createComboBtn');
            const searchInput = document.getElementById('comboSearchInput');
            const statusFilterSelect = document.getElementById('comboStatusFilter');
            const discountFilterSelect = document.getElementById('comboDiscountFilter');
            const resetFiltersBtn = document.getElementById('comboResetFilters');

            const comboModalEl = document.getElementById('comboModal');
            const comboModal = new bootstrap.Modal(comboModalEl);
            const comboForm = document.getElementById('comboForm');
            const comboModalLabel = document.getElementById('comboModalLabel');
            const comboFormErrors = document.getElementById('comboFormErrors');
            const comboSubmitBtn = document.getElementById('comboSubmitBtn');

            const nameInput = document.getElementById('comboName');
            const descriptionInput = document.getElementById('comboDescription');
            const imageUrlInput = document.getElementById('comboImageUrl');
            const imageFileInput = document.getElementById('comboImageFile');
            const imagePreviewWrapper = document.getElementById('comboImagePreviewWrapper');
            const imagePreview = document.getElementById('comboImagePreview');
            const imagePlaceholder = document.getElementById('comboImagePlaceholder');
            const imageUploadingIndicator = document.getElementById('comboImageUploading');
            const imageUploadFeedback = document.getElementById('comboImageUploadFeedback');
            const defaultImageFeedback = imageUploadFeedback ? imageUploadFeedback.textContent.trim() : '';
            const IMAGE_UPLOAD_URL = '/api/uploads/images';
            const MAX_IMAGE_SIZE = 5 * 1024 * 1024;
            let isUploadingImage = false;
            let temporaryImageObjectUrl = null;
            const stockInput = document.getElementById('comboStock');
            const indexInput = document.getElementById('comboIndex');
            const isPublishInput = document.getElementById('comboIsPublish');
            const discountTypeSelect = document.getElementById('comboDiscountType');
            const discountWrapper = document.getElementById('comboDiscountWrapper');
            const discountInput = document.getElementById('comboDiscount');
            const discountLabel = document.getElementById('comboDiscountLabel');
            const itemsContainer = document.getElementById('comboItemsContainer');
            const addItemBtn = document.getElementById('addComboItemBtn');
            const importItemsBtn = document.getElementById('importComboItemsBtn');
            const importItemsInput = document.getElementById('comboItemsImportInput');
            const clearItemsBtn = document.getElementById('clearComboItemsBtn');
            const importItemsBtnInitialHtml = importItemsBtn ? importItemsBtn.innerHTML : '';

            const deleteModalEl = document.getElementById('deleteModal');
            const deleteModal = new bootstrap.Modal(deleteModalEl);
            const deleteComboName = document.getElementById('deleteComboName');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

            const bulkDeleteModalEl = document.getElementById('bulkDeleteModal');
            const bulkDeleteModal = bulkDeleteModalEl ? new bootstrap.Modal(bulkDeleteModalEl) : null;
            const confirmBulkDeleteBtn = document.getElementById('confirmBulkDeleteBtn');
            const bulkDeleteCount = document.getElementById('bulkDeleteCount');

            const detailModalEl = document.getElementById('detailModal');
            const detailModal = new bootstrap.Modal(detailModalEl);
            const detailContent = document.getElementById('comboDetailContent');
            const detailUrlTemplate = app.dataset.detailUrlTemplate || '';

            const antiForgeryTokenInput = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]');
            const antiForgeryToken = antiForgeryTokenInput ? antiForgeryTokenInput.value : '';

            const DISCOUNT_NONE = @( (int)DiscountType.None );
            const DISCOUNT_PERCENT = @( (int)DiscountType.Percent );
            const DISCOUNT_FIXED = @( (int)DiscountType.FixedAmount );
            const DISCOUNT_AMOUNT = @( (int)DiscountType.Amount );

            const discountLabels = {
                [DISCOUNT_NONE]: 'Không áp dụng',
                [DISCOUNT_PERCENT]: 'Giảm theo %',
                [DISCOUNT_FIXED]: 'Giá ưu đãi cố định',
                [DISCOUNT_AMOUNT]: 'Giảm theo tiền'
            };

            const debounce = (fn, delay = 300) => {
                let timeoutId;
                return (...args) => {
                    if (timeoutId) {
                        clearTimeout(timeoutId);
                    }

                    timeoutId = window.setTimeout(() => {
                        fn(...args);
                    }, delay);
                };
            };

            function updateComboTableStatus(count) {
                if (!tableStatus || !canView) {
                    return;
                }

                const total = combos.length;
                if (total === 0) {
                    tableStatus.textContent = 'Không có combo nào để hiển thị.';
                    return;
                }

                if (count === total) {
                    tableStatus.textContent = `Hiển thị ${count} combo.`;
                } else {
                    tableStatus.textContent = `Tìm thấy ${count}/${total} combo.`;
                }
            }

            function applyComboFilters() {
                if (!Array.isArray(combos)) {
                    filteredCombos = [];
                    renderCombos();
                    return;
                }

                const searchTerm = (searchInput?.value || '').trim().toLowerCase();
                const statusValue = statusFilterSelect?.value || '';
                const discountValue = discountFilterSelect?.value || '';

                filteredCombos = combos.filter(combo => {
                    const name = (combo.name || '').toString().toLowerCase();
                    const description = (combo.description || '').toString().toLowerCase();
                    const matchesSearch = !searchTerm
                        || name.includes(searchTerm)
                        || description.includes(searchTerm);

                    const matchesStatus = !statusValue
                        || (statusValue === 'published' && combo.isPublish)
                        || (statusValue === 'draft' && !combo.isPublish);

                    const discountType = Number(combo.discountType);
                    let matchesDiscount = true;
                    if (discountValue === 'none') {
                        matchesDiscount = discountType === DISCOUNT_NONE;
                    } else if (discountValue === 'percent') {
                        matchesDiscount = discountType === DISCOUNT_PERCENT;
                    } else if (discountValue === 'amount') {
                        matchesDiscount = discountType === DISCOUNT_AMOUNT;
                    } else if (discountValue === 'fixed') {
                        matchesDiscount = discountType === DISCOUNT_FIXED;
                    }

                    return matchesSearch && matchesStatus && matchesDiscount;
                });

                renderCombos();
            }

            let combos = [];
            let filteredCombos = [];
            let productsCache = null;
            let editingComboId = null;
            let deleteComboId = null;
            const selectedComboIds = new Set();

            function showAlert(type, message) {
                if (!alertPlaceholder) {
                    return;
                }

                const wrapper = document.createElement('div');
                wrapper.className = `alert alert-${type} alert-dismissible fade show`;
                wrapper.setAttribute('role', 'alert');
                wrapper.innerHTML = `
                    <span>${message}</span>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;

                alertPlaceholder.appendChild(wrapper);
            }

            function clearAlerts() {
                if (alertPlaceholder) {
                    alertPlaceholder.innerHTML = '';
                }
            }

            function formatCurrency(value) {
                const number = Number(value || 0);
                return number.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
            }

            function normalizeProduct(product) {
                if (!product || typeof product !== 'object') {
                    return null;
                }

                const normalizedId = Number(product.id ?? product.Id ?? NaN);
                const normalizedFinalPrice = Number(product.finalPrice ?? product.FinalPrice ?? 0);
                const normalizedImage = product.productImageUrl ?? product.ProductImageUrl ?? '';
                const normalizedName = product.name ?? product.Name ?? '';
                const rawTypes = product.productTypes ?? product.ProductTypes ?? [];

                const normalizedTypes = Array.isArray(rawTypes)
                    ? rawTypes.map(type => {
                        const typeId = Number(type.id ?? type.Id ?? NaN);
                        const basePrice = Number(type.price ?? type.Price ?? 0);
                        const finalPrice = Number(type.finalPrice ?? type.FinalPrice ?? basePrice);
                        const discountValue = type.discount ?? type.Discount;

                        return {
                            id: Number.isFinite(typeId) ? typeId : type.id ?? type.Id,
                            name: type.name ?? type.Name ?? (Number.isFinite(typeId) ? `Loại #${typeId}` : 'Loại sản phẩm'),
                            price: basePrice,
                            finalPrice: finalPrice,
                            discountType: Number(type.discountType ?? type.DiscountType ?? DISCOUNT_NONE),
                            discount: discountValue !== null && discountValue !== undefined
                                ? Number(discountValue)
                                : null,
                            isPublish: Boolean(type.isPublish ?? type.IsPublish)
                        };
                    })
                    : [];

                return {
                    id: Number.isFinite(normalizedId) ? normalizedId : product.id ?? product.Id,
                    name: normalizedName,
                    finalPrice: normalizedFinalPrice,
                    productImageUrl: normalizedImage,
                    productTypes: normalizedTypes
                };
            }

            function ensureProductsCache(products) {
                if (!Array.isArray(products)) {
                    return [];
                }

                return products
                    .map(normalizeProduct)
                    .filter(product => product !== null);
            }

            function getProductById(productId) {
                if (!Array.isArray(productsCache)) {
                    return null;
                }

                const targetId = Number(productId);
                if (!Number.isFinite(targetId)) {
                    return null;
                }

                return productsCache.find(product => Number(product.id) === targetId) || null;
            }

            function populateProductTypeSelect(selectEl, product, selectedTypeId, fallbackType = null) {
                if (!selectEl) {
                    return;
                }

                const hasProduct = Boolean(product);
                const placeholder = document.createElement('option');
                placeholder.value = '';
                placeholder.textContent = hasProduct ? '-- Chọn loại sản phẩm --' : '-- Chọn sản phẩm trước --';
                placeholder.disabled = true;
                placeholder.selected = true;

                selectEl.innerHTML = '';
                selectEl.appendChild(placeholder);

                const fallback = fallbackType && fallbackType.id ? fallbackType : null;
                const productTypes = Array.isArray(product?.productTypes)
                    ? product.productTypes.filter(type => type && type.id !== undefined && type.id !== null)
                    : [];

                if (productTypes.length === 0) {
                    if (fallback) {
                        selectEl.disabled = false;
                        selectEl.removeAttribute('disabled');

                        const fallbackOption = document.createElement('option');
                        fallbackOption.value = fallback.id;
                        const fallbackName = fallback.name
                            || (Number.isFinite(Number(fallback.id)) ? `Loại #${fallback.id}` : 'Loại sản phẩm');
                        const fallbackPriceNumber = Number(fallback.finalPrice);
                        let fallbackLabel = fallbackName;
                        if (Number.isFinite(fallbackPriceNumber) && fallbackPriceNumber > 0) {
                            fallbackLabel += ` (${formatCurrency(fallbackPriceNumber)})`;
                        }
                        fallbackLabel += ' (không có trong danh sách)';
                        fallbackOption.textContent = fallbackLabel;
                        fallbackOption.selected = true;
                        fallbackOption.dataset.fallback = 'true';
                        placeholder.selected = false;
                        placeholder.disabled = true;
                        selectEl.appendChild(fallbackOption);
                    } else {
                        placeholder.textContent = hasProduct
                            ? 'Sản phẩm này chưa có loại khả dụng'
                            : '-- Chọn sản phẩm trước --';
                        selectEl.value = '';
                        selectEl.disabled = true;
                        selectEl.setAttribute('disabled', 'disabled');
                    }

                    return;
                }

                selectEl.disabled = false;
                selectEl.removeAttribute('disabled');

                productTypes.forEach(type => {
                    const option = document.createElement('option');
                    option.value = type.id;
                    const finalPrice = Number.isFinite(Number(type.finalPrice))
                        ? Number(type.finalPrice)
                        : Number(type.price ?? 0);
                    const parts = [type.name];
                    if (Number.isFinite(finalPrice) && finalPrice > 0) {
                        parts.push(`(${formatCurrency(finalPrice)})`);
                    }
                    if (type.isPublish === false) {
                        parts.push('(Không bán riêng)');
                        option.dataset.isPublish = 'false';
                    } else {
                        option.dataset.isPublish = 'true';
                    }
                    option.textContent = parts.join(' ');
                    if (selectedTypeId && Number(selectedTypeId) === Number(type.id)) {
                        option.selected = true;
                        placeholder.selected = false;
                    }
                    selectEl.appendChild(option);
                });
            }

            function toggleDiscountField() {
                if (!discountWrapper || !discountInput) {
                    return;
                }

                const selectedValue = Number(discountTypeSelect.value || DISCOUNT_NONE);
                const isNone = selectedValue === DISCOUNT_NONE;

                discountWrapper.style.display = isNone ? 'none' : 'block';
                discountInput.disabled = isNone;

                if (isNone) {
                    discountInput.value = '';
                }

                discountInput.min = '0';
                discountInput.step = '1';

                if (selectedValue === DISCOUNT_PERCENT) {
                    if (discountLabel) {
                        discountLabel.textContent = 'Giá trị giảm (%)';
                    }
                    discountInput.setAttribute('max', '100');
                } else if (selectedValue === DISCOUNT_AMOUNT) {
                    if (discountLabel) {
                        discountLabel.textContent = 'Giá trị giảm (VND)';
                    }
                    discountInput.removeAttribute('max');
                } else if (selectedValue === DISCOUNT_FIXED) {
                    if (discountLabel) {
                        discountLabel.textContent = 'Giá bán ưu đãi (VND)';
                    }
                    discountInput.removeAttribute('max');
                } else {
                    if (discountLabel) {
                        discountLabel.textContent = 'Giá trị giảm';
                    }
                    discountInput.removeAttribute('max');
                }
            }

            function setComboImageFeedback(message, state = 'muted') {
                if (!imageUploadFeedback) {
                    return;
                }

                imageUploadFeedback.textContent = message;
                imageUploadFeedback.classList.remove('text-danger', 'text-success', 'text-muted');

                if (state === 'error') {
                    imageUploadFeedback.classList.add('text-danger');
                } else if (state === 'success') {
                    imageUploadFeedback.classList.add('text-success');
                } else {
                    imageUploadFeedback.classList.add('text-muted');
                }
            }

            function showComboImagePlaceholder() {
                if (imagePreview) {
                    imagePreview.src = '';
                    imagePreview.classList.add('d-none');
                }

                if (imagePlaceholder) {
                    imagePlaceholder.classList.remove('d-none');
                }
            }

            function showComboImage(url) {
                if (!imagePreview) {
                    return;
                }

                imagePreview.src = url;
                imagePreview.classList.remove('d-none');

                if (imagePlaceholder) {
                    imagePlaceholder.classList.add('d-none');
                }
            }

            function setComboImageLoading(isLoading) {
                isUploadingImage = isLoading;

                if (imageUploadingIndicator) {
                    imageUploadingIndicator.classList.toggle('d-none', !isLoading);
                }

                if (imagePreviewWrapper) {
                    imagePreviewWrapper.classList.toggle('uploading', isLoading);
                }
            }

            function revokeTemporaryComboImageUrl() {
                if (temporaryImageObjectUrl) {
                    URL.revokeObjectURL(temporaryImageObjectUrl);
                    temporaryImageObjectUrl = null;
                }
            }

            function resetComboImageState() {
                revokeTemporaryComboImageUrl();

                if (imageFileInput) {
                    imageFileInput.value = '';
                }

                if (imageUrlInput) {
                    imageUrlInput.value = '';
                }

                showComboImagePlaceholder();
                setComboImageLoading(false);
                const message = defaultImageFeedback || 'Tải ảnh lên hoặc nhập URL ảnh định dạng JPG, PNG, GIF hoặc WEBP (tối đa 5MB).';
                setComboImageFeedback(message, 'muted');
            }

            function setComboImageFromUrl(url) {
                revokeTemporaryComboImageUrl();

                if (imageFileInput) {
                    imageFileInput.value = '';
                }

                const normalizedUrl = (url ?? '').toString().trim();

                if (imageUrlInput) {
                    imageUrlInput.value = normalizedUrl;
                }

                if (normalizedUrl) {
                    showComboImage(normalizedUrl);
                    setComboImageFeedback('Ảnh hiện tại sẽ được giữ nguyên nếu bạn không tải ảnh mới.', 'muted');
                } else {
                    showComboImagePlaceholder();
                    const message = defaultImageFeedback || 'Tải ảnh lên hoặc nhập URL ảnh định dạng JPG, PNG, GIF hoặc WEBP (tối đa 5MB).';
                    setComboImageFeedback(message, 'muted');
                }
            }

            function normalizeComboImageUrl() {
                if (!imageUrlInput) {
                    return '';
                }

                const trimmed = imageUrlInput.value.trim();
                if (trimmed !== imageUrlInput.value) {
                    imageUrlInput.value = trimmed;
                }

                return trimmed;
            }

            function isValidComboImageUrl(url) {
                if (!url) {
                    return false;
                }

                try {
                    const parsed = new URL(url, window.location.origin);
                    return ['http:', 'https:'].includes(parsed.protocol);
                } catch (error) {
                    return false;
                }
            }

            function evaluateComboImageUrl({ forceSuccess = false } = {}) {
                if (!imageUrlInput) {
                    return;
                }

                const value = normalizeComboImageUrl();

                if (!value) {
                    showComboImagePlaceholder();
                    const message = defaultImageFeedback || 'Tải ảnh lên hoặc nhập URL ảnh định dạng JPG, PNG, GIF hoặc WEBP (tối đa 5MB).';
                    setComboImageFeedback(message, 'muted');
                    return;
                }

                if (!isValidComboImageUrl(value)) {
                    setComboImageFeedback('URL ảnh không hợp lệ. Vui lòng nhập đường dẫn bắt đầu bằng http hoặc https.', 'error');
                    return;
                }

                revokeTemporaryComboImageUrl();
                showComboImage(value);
                setComboImageFeedback(forceSuccess ? 'URL ảnh đã được cập nhật.' : 'URL ảnh sẽ được sử dụng khi lưu.', forceSuccess ? 'success' : 'muted');
            }

            const evaluateComboImageUrlDebounced = debounce(() => evaluateComboImageUrl({ forceSuccess: false }), 500);

            function validateComboImageFile(file) {
                if (!file) {
                    return 'Vui lòng chọn một file ảnh hợp lệ.';
                }

                if (file.size > MAX_IMAGE_SIZE) {
                    return 'Ảnh vượt quá dung lượng cho phép (tối đa 5MB).';
                }

                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
                const allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
                const fileType = (file.type || '').toLowerCase();
                const dotIndex = file.name.lastIndexOf('.');
                const extension = dotIndex >= 0 ? file.name.substring(dotIndex).toLowerCase() : '';
                const isTypeValid = allowedTypes.includes(fileType);
                const isExtensionValid = allowedExtensions.includes(extension);

                if (!isTypeValid && !isExtensionValid) {
                    return 'Vui lòng chọn file ảnh định dạng JPG, PNG, GIF hoặc WEBP.';
                }

                return '';
            }

            async function handleComboImageFileChange(event) {
                const file = event?.target?.files ? event.target.files[0] : null;

                if (!file) {
                    if (imageUrlInput && imageUrlInput.value) {
                        setComboImageFromUrl(imageUrlInput.value);
                    } else {
                        resetComboImageState();
                    }

                    return;
                }

                const validationMessage = validateComboImageFile(file);
                if (validationMessage) {
                    setComboImageFeedback(validationMessage, 'error');

                    if (imageFileInput) {
                        imageFileInput.value = '';
                    }

                    if (imageUrlInput && imageUrlInput.value) {
                        setComboImageFromUrl(imageUrlInput.value);
                    } else {
                        showComboImagePlaceholder();
                    }

                    return;
                }

                revokeTemporaryComboImageUrl();
                temporaryImageObjectUrl = URL.createObjectURL(file);
                showComboImage(temporaryImageObjectUrl);
                setComboImageFeedback('Đang tải ảnh lên...', 'muted');
                setComboImageLoading(true);

                const previousUrl = imageUrlInput ? imageUrlInput.value : '';

                const formData = new FormData();
                formData.append('file', file);

                try {
                    const response = await fetch(IMAGE_UPLOAD_URL, {
                        method: 'POST',
                        headers: {
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: formData
                    });

                    if (!response.ok) {
                        const errorResponse = await response.json().catch(() => null);
                        const message = errorResponse?.message || 'Không thể tải ảnh lên. Vui lòng thử lại sau.';
                        throw new Error(message);
                    }

                    const result = await response.json();
                    if (!result || !result.url) {
                        throw new Error('Máy chủ không trả về đường dẫn ảnh.');
                    }

                    if (imageUrlInput) {
                        imageUrlInput.value = result.url;
                    }

                    revokeTemporaryComboImageUrl();
                    showComboImage(result.url);
                    setComboImageFeedback('Ảnh đã được tải lên thành công.', 'success');
                } catch (error) {
                    revokeTemporaryComboImageUrl();

                    if (imageUrlInput) {
                        imageUrlInput.value = previousUrl;
                    }

                    if (previousUrl) {
                        showComboImage(previousUrl);
                    } else {
                        showComboImagePlaceholder();
                    }

                    const message = error instanceof Error
                        ? error.message
                        : 'Không thể tải ảnh lên. Vui lòng thử lại sau.';
                    setComboImageFeedback(message, 'error');
                } finally {
                    setComboImageLoading(false);

                    if (imageFileInput) {
                        imageFileInput.value = '';
                    }
                }
            }

            async function fetchProductsIfNeeded(forceReload = false) {
                if (!forceReload && productsCache) {
                    return productsCache;
                }

                const response = await fetch(`${API_BASE_URL}/products`, {
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Không thể tải danh sách sản phẩm.');
                }

                const rawProducts = await response.json();
                productsCache = ensureProductsCache(rawProducts);
                return productsCache;
            }

            async function fetchProductByIdFromApi(productId) {
                const numericId = Number(productId);
                if (!Number.isFinite(numericId) || numericId <= 0) {
                    return null;
                }

                try {
                    const response = await fetch(`/api/products/${numericId}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        return null;
                    }

                    const rawProduct = await response.json();
                    mergeProductsIntoCache([rawProduct]);
                    return getProductById(numericId);
                } catch (error) {
                    console.error('Failed to fetch product by id', error);
                    return null;
                }
            }

            function mergeProductsIntoCache(products) {
                const normalized = ensureProductsCache(products);

                if (!Array.isArray(normalized) || normalized.length === 0) {
                    return;
                }

                if (!Array.isArray(productsCache)) {
                    productsCache = [];
                }

                const lookup = new Map(productsCache.map(product => [String(product.id), product]));

                normalized.forEach(product => {
                    const key = String(product.id);
                    if (lookup.has(key)) {
                        const index = productsCache.findIndex(existing => String(existing.id) === key);
                        if (index >= 0) {
                            productsCache[index] = product;
                        }
                    } else {
                        productsCache.push(product);
                    }
                });
            }

            function setComboItems(items = []) {
                itemsContainer.innerHTML = '';

                if (Array.isArray(items) && items.length > 0) {
                    items.forEach(item => {
                        createItemRow({
                            productId: item.productId,
                            productTypeId: item.productTypeId,
                            quantity: item.quantity,
                            productName: item.productName,
                            productFinalPrice: item.productFinalPrice,
                            productTypeName: item.productTypeName,
                            productTypeFinalPrice: item.productTypeFinalPrice
                        });
                    });
                } else {
                    createItemRow();
                }
            }

            function createItemRow(item = { productId: '', productTypeId: '', quantity: 1 }) {
                const initialProductId = item?.productId ?? '';
                const initialProductTypeId = item?.productTypeId ?? '';
                const initialQuantity = item?.quantity ?? 1;
                const initialProductName = item?.productName ?? '';
                const initialProductFinalPrice = item?.productFinalPrice ?? null;
                const initialProductTypeName = item?.productTypeName ?? '';
                const initialProductTypeFinalPrice = item?.productTypeFinalPrice ?? null;

                const row = document.createElement('div');
                row.className = 'row g-3 align-items-end combo-item-row';

                const productCol = document.createElement('div');
                productCol.className = 'col-md-5';
                const productLabel = document.createElement('label');
                productLabel.className = 'form-label';
                productLabel.textContent = 'Sản phẩm';
                const productSelect = document.createElement('select');
                productSelect.className = 'form-select combo-product-select';
                productSelect.required = true;
                productSelect.innerHTML = '<option value="">-- Chọn sản phẩm --</option>';

                let hasSelectedProduct = false;

                if (Array.isArray(productsCache)) {
                    productsCache.forEach(product => {
                        const option = document.createElement('option');
                        option.value = product.id;
                        option.textContent = `${product.name} (${formatCurrency(product.finalPrice)})`;
                        if (String(initialProductId) === String(product.id)) {
                            option.selected = true;
                            hasSelectedProduct = true;
                        }
                        productSelect.appendChild(option);
                    });
                }

                if (initialProductId && !hasSelectedProduct) {
                    const fallbackOption = document.createElement('option');
                    fallbackOption.value = initialProductId;
                    let fallbackLabel = initialProductName || (Number.isFinite(Number(initialProductId))
                        ? `Sản phẩm #${initialProductId}`
                        : 'Sản phẩm');
                    const fallbackPrice = initialProductFinalPrice ?? initialProductTypeFinalPrice;
                    const fallbackPriceNumber = Number(fallbackPrice);
                    if (Number.isFinite(fallbackPriceNumber) && fallbackPriceNumber > 0) {
                        fallbackLabel += ` (${formatCurrency(fallbackPriceNumber)})`;
                    }
                    fallbackLabel += ' (không có trong danh sách)';
                    fallbackOption.textContent = fallbackLabel;
                    fallbackOption.selected = true;
                    fallbackOption.dataset.fallback = 'true';
                    productSelect.appendChild(fallbackOption);
                }

                productCol.appendChild(productLabel);
                productCol.appendChild(productSelect);

                const typeCol = document.createElement('div');
                typeCol.className = 'col-md-4';
                const typeLabel = document.createElement('label');
                typeLabel.className = 'form-label';
                typeLabel.textContent = 'Loại sản phẩm';
                const typeSelect = document.createElement('select');
                typeSelect.className = 'form-select combo-product-type-select';
                typeSelect.required = true;
                typeSelect.disabled = true;
                typeCol.appendChild(typeLabel);
                typeCol.appendChild(typeSelect);

                const quantityCol = document.createElement('div');
                quantityCol.className = 'col-md-2';
                const quantityLabel = document.createElement('label');
                quantityLabel.className = 'form-label';
                quantityLabel.textContent = 'Số lượng';
                const quantityInput = document.createElement('input');
                quantityInput.type = 'number';
                quantityInput.className = 'form-control combo-quantity-input';
                quantityInput.min = '1';
                quantityInput.step = '1';
                quantityInput.value = initialQuantity;
                quantityInput.required = true;
                quantityCol.appendChild(quantityLabel);
                quantityCol.appendChild(quantityInput);

                const actionCol = document.createElement('div');
                actionCol.className = 'col-md-1 d-flex justify-content-end';
                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'btn btn-outline-danger';
                removeBtn.innerHTML = '<i class="fas fa-trash"></i>';
                removeBtn.addEventListener('click', () => {
                    itemsContainer.removeChild(row);
                });
                actionCol.appendChild(removeBtn);

                row.appendChild(productCol);
                row.appendChild(typeCol);
                row.appendChild(quantityCol);
                row.appendChild(actionCol);

                const selectedProduct = getProductById(initialProductId);
                populateProductTypeSelect(typeSelect, selectedProduct, initialProductTypeId, {
                    id: initialProductTypeId,
                    name: initialProductTypeName,
                    finalPrice: initialProductTypeFinalPrice ?? initialProductFinalPrice
                });

                productSelect.addEventListener('change', async () => {
                    const selectedValue = productSelect.value ? productSelect.value.trim() : '';

                    if (!selectedValue) {
                        populateProductTypeSelect(typeSelect, null, null);
                        return;
                    }

                    const numericId = Number(selectedValue);
                    if (!Number.isFinite(numericId) || numericId <= 0) {
                        populateProductTypeSelect(typeSelect, null, null);
                        return;
                    }

                    let product = getProductById(numericId);

                    if (product && Array.isArray(product.productTypes) && product.productTypes.length > 0) {
                        populateProductTypeSelect(typeSelect, product, null);
                        return;
                    }

                    try {
                        await fetchProductsIfNeeded(true);
                    } catch (error) {
                        showAlert('danger', error.message || 'Không thể tải danh sách sản phẩm.');
                        populateProductTypeSelect(typeSelect, product, null);
                        return;
                    }

                    product = getProductById(numericId);

                    if (!product || !Array.isArray(product.productTypes) || product.productTypes.length === 0) {
                        const fetchedProduct = await fetchProductByIdFromApi(numericId);
                        if (fetchedProduct) {
                            product = fetchedProduct;
                        }
                    }

                    populateProductTypeSelect(typeSelect, product, null);
                });

                itemsContainer.appendChild(row);
            }

            async function importComboItemsFromFile(file) {
                if (!file) {
                    return;
                }

                const formData = new FormData();
                formData.append('file', file);

                if (importItemsBtn) {
                    importItemsBtn.disabled = true;
                    importItemsBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>Đang nhập...';
                }

                try {
                    const response = await fetch(`${API_BASE_URL}/import-items`, {
                        method: 'POST',
                        headers: {
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: formData
                    });

                    if (!response.ok) {
                        const result = await response.json().catch(() => null);
                        const message = result && result.message ? result.message : 'Không thể nhập sản phẩm từ file.';
                        showAlert('danger', message);
                        return;
                    }

                    const result = await response.json();
                    const importedItems = Array.isArray(result.items) ? result.items : [];
                    const importedProducts = Array.isArray(result.products) ? result.products : [];
                    const invalidEntries = Array.isArray(result.invalidEntries) ? result.invalidEntries : [];

                    if (!importedItems.length) {
                        let warningMessage = 'Không có sản phẩm hợp lệ trong file.';
                        if (invalidEntries.length) {
                            warningMessage += ` Bỏ qua ${invalidEntries.length} dòng không hợp lệ.`;
                        }
                        showAlert('warning', warningMessage);
                        return;
                    }

                    await fetchProductsIfNeeded().catch(() => null);
                    mergeProductsIntoCache(importedProducts);
                    setComboItems(importedItems);

                    let successMessage = `Đã nhập ${importedItems.length} sản phẩm hợp lệ.`;
                    if (invalidEntries.length) {
                        successMessage += ` Bỏ qua ${invalidEntries.length} dòng không hợp lệ.`;
                    }
                    showAlert('success', successMessage);
                } catch (error) {
                    showAlert('danger', error.message || 'Không thể nhập sản phẩm từ file.');
                } finally {
                    if (importItemsBtn) {
                        importItemsBtn.disabled = false;
                        importItemsBtn.innerHTML = importItemsBtnInitialHtml || '<i class="fas fa-file-import me-1"></i>Nhập từ file';
                    }
                    if (importItemsInput) {
                        importItemsInput.value = '';
                    }
                }
            }

            function resetComboForm() {
                comboForm.reset();
                comboFormErrors.classList.add('d-none');
                comboFormErrors.innerHTML = '';
                itemsContainer.innerHTML = '';
                discountInput.value = '';
                toggleDiscountField();
                resetComboImageState();
            }

            function populateComboForm(combo) {
                nameInput.value = combo.name;
                descriptionInput.value = combo.description;
                imageUrlInput.value = combo.imageUrl;
                setComboImageFromUrl(imageUrlInput.value);
                stockInput.value = combo.stock;
                indexInput.value = combo.index;
                isPublishInput.checked = combo.isPublish;
                discountTypeSelect.value = combo.discountType;
                discountInput.value = combo.discount ?? '';
                toggleDiscountField();
            }

            function renderCombos(list = filteredCombos) {
                const emptyColspan = canBulkManage ? 7 : 6;

                if (!canView) {
                    tableBody.innerHTML = `<tr><td colspan="${emptyColspan}" class="text-center py-4 text-muted">Bạn không có quyền xem danh sách combo.</td></tr>`;
                    tableStatus.textContent = 'Không thể tải dữ liệu combo.';
                    return;
                }

                const data = Array.isArray(list) ? list : [];

                if (data.length === 0) {
                    const message = combos.length === 0
                        ? 'Chưa có combo nào.'
                        : 'Không tìm thấy combo phù hợp.';
                    tableBody.innerHTML = `<tr><td colspan="${emptyColspan}" class="text-center py-4 text-muted">${message}</td></tr>`;
                    updateComboTableStatus(data.length);
                    if (selectAllCheckbox) {
                        selectAllCheckbox.checked = false;
                        selectAllCheckbox.indeterminate = false;
                    }
                    updateBulkActions();
                    return;
                }

                updateComboTableStatus(data.length);

                const rows = data.map(combo => {
                    const row = document.createElement('tr');

                    if (canBulkManage) {
                        const checkboxCell = document.createElement('td');
                        checkboxCell.className = 'text-center';
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.className = 'form-check-input combo-select';
                        checkbox.dataset.id = combo.id;
                        checkbox.checked = selectedComboIds.has(combo.id);
                        checkbox.addEventListener('change', () => {
                            if (checkbox.checked) {
                                selectedComboIds.add(combo.id);
                            } else {
                                selectedComboIds.delete(combo.id);
                            }
                            updateBulkActions();
                        });
                        checkboxCell.appendChild(checkbox);
                        row.appendChild(checkboxCell);
                    }

                    const nameCell = document.createElement('td');
                    const nameWrapper = document.createElement('div');
                    nameWrapper.className = 'd-flex align-items-center gap-3';

                    const image = document.createElement('img');
                    image.src = combo.imageUrl;
                    image.alt = combo.name;
                    image.className = 'rounded';
                    image.style.width = '48px';
                    image.style.height = '48px';
                    image.style.objectFit = 'cover';
                    nameWrapper.appendChild(image);

                    const textContainer = document.createElement('div');
                    const nameLine = document.createElement('div');
                    nameLine.className = 'fw-semibold';
                    if (combo.isPublish && detailUrlTemplate) {
                        const detailUrl = detailUrlTemplate.replace('__ID__', encodeURIComponent(combo.id));
                        const link = document.createElement('a');
                        link.href = detailUrl;
                        link.target = '_blank';
                        link.rel = 'noopener noreferrer';
                        link.textContent = combo.name;
                        link.className = 'text-decoration-none link-primary';
                        nameLine.appendChild(link);
                    } else {
                        nameLine.textContent = combo.name;
                    }
                    textContainer.appendChild(nameLine);

                    const itemsCount = Array.isArray(combo.items) ? combo.items.length : 0;
                    const metaLine = document.createElement('div');
                    metaLine.className = 'text-muted small';
                    metaLine.textContent = `${itemsCount} sản phẩm`;
                    textContainer.appendChild(metaLine);

                    nameWrapper.appendChild(textContainer);
                    nameCell.appendChild(nameWrapper);
                    row.appendChild(nameCell);

                    const priceCell = document.createElement('td');
                    priceCell.className = 'text-end';
                    priceCell.textContent = formatCurrency(combo.price);
                    row.appendChild(priceCell);

                    const finalPriceCell = document.createElement('td');
                    finalPriceCell.className = 'text-end';
                    const comboDiscountType = Number(combo.discountType);
                    if (comboDiscountType === DISCOUNT_PERCENT && combo.discount) {
                        finalPriceCell.innerHTML = `
                            <div class="d-flex flex-column align-items-end">
                                <del class="text-muted small">${formatCurrency(combo.price)}</del>
                                <span class="fw-semibold text-danger">${formatCurrency(combo.finalPrice)}</span>
                                <span class="small text-muted">Giảm ${combo.discount}%</span>
                            </div>`;
                    } else if (comboDiscountType === DISCOUNT_AMOUNT && combo.discount) {
                        finalPriceCell.innerHTML = `
                            <div class="d-flex flex-column align-items-end">
                                <del class="text-muted small">${formatCurrency(combo.price)}</del>
                                <span class="fw-semibold text-danger">${formatCurrency(combo.finalPrice)}</span>
                                <span class="small text-muted">Giảm ${formatCurrency(combo.discount)}</span>
                            </div>`;
                    } else if (comboDiscountType === DISCOUNT_FIXED && combo.discount) {
                        finalPriceCell.innerHTML = `
                            <div class="d-flex flex-column align-items-end">
                                <del class="text-muted small">${formatCurrency(combo.price)}</del>
                                <span class="fw-semibold text-danger">${formatCurrency(combo.finalPrice)}</span>
                                <span class="small text-muted">Giá ưu đãi cố định</span>
                            </div>`;
                    } else {
                        finalPriceCell.innerHTML = `<span class="fw-semibold">${formatCurrency(combo.finalPrice)}</span>`;
                    }
                    row.appendChild(finalPriceCell);

                    const stockCell = document.createElement('td');
                    stockCell.className = 'text-center';
                    stockCell.textContent = combo.stock;
                    row.appendChild(stockCell);

                    const statusCell = document.createElement('td');
                    statusCell.className = 'text-center';
                    statusCell.innerHTML = combo.isPublish
                        ? '<span class="badge bg-success">Đã xuất bản</span>'
                        : '<span class="badge bg-secondary">Nháp</span>';
                    row.appendChild(statusCell);

                    const actionsCell = document.createElement('td');
                    actionsCell.className = 'text-center';
                    const actionsWrapper = document.createElement('div');
                    actionsWrapper.className = 'd-flex justify-content-center gap-2';

                    const viewBtn = document.createElement('button');
                    viewBtn.type = 'button';
                    viewBtn.className = 'btn btn-sm btn-outline-info';
                    viewBtn.innerHTML = '<i class="fas fa-eye"></i>';
                    viewBtn.title = 'Xem chi tiết';
                    viewBtn.addEventListener('click', () => openDetailModal(combo.id));
                    actionsWrapper.appendChild(viewBtn);

                    if (canUpdate) {
                        const editBtn = document.createElement('button');
                        editBtn.type = 'button';
                        editBtn.className = 'btn btn-sm btn-outline-warning';
                        editBtn.innerHTML = '<i class="fas fa-edit"></i>';
                        editBtn.title = 'Chỉnh sửa';
                        editBtn.addEventListener('click', () => openEditModal(combo.id));
                        actionsWrapper.appendChild(editBtn);
                    }

                    if (canDelete) {
                        const deleteBtn = document.createElement('button');
                        deleteBtn.type = 'button';
                        deleteBtn.className = 'btn btn-sm btn-outline-danger';
                        deleteBtn.innerHTML = '<i class="fas fa-trash"></i>';
                        deleteBtn.title = 'Xóa';
                        deleteBtn.addEventListener('click', () => openDeleteModal(combo.id));
                        actionsWrapper.appendChild(deleteBtn);
                    }

                    actionsCell.appendChild(actionsWrapper);
                    row.appendChild(actionsCell);

                    return row;
                });

                tableBody.innerHTML = '';
                rows.forEach(row => tableBody.appendChild(row));
                if (selectAllCheckbox) {
                    const visibleCheckboxes = tableBody.querySelectorAll('.combo-select');
                    const checkedCount = tableBody.querySelectorAll('.combo-select:checked').length;
                    selectAllCheckbox.checked = visibleCheckboxes.length > 0 && checkedCount === visibleCheckboxes.length;
                    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < visibleCheckboxes.length;
                }
                updateBulkActions();
            }

            async function fetchCombos() {
                if (!canView) {
                    return;
                }

                tableStatus.textContent = 'Đang tải dữ liệu combo...';
                const loadingColspan = canBulkManage ? 7 : 6;
                tableBody.innerHTML = `<tr><td colspan="${loadingColspan}" class="text-center py-4 text-muted">Đang tải dữ liệu...</td></tr>`;

                try {
                    const response = await fetch(API_BASE_URL, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Không thể tải danh sách combo.');
                    }

                    combos = await response.json();
                    combos = Array.isArray(combos) ? combos : [];
                } catch (error) {
                    combos = [];
                    showAlert('danger', error.message || 'Có lỗi xảy ra khi tải dữ liệu combo.');
                }

                if (canBulkManage) {
                    selectedComboIds.clear();
                    if (selectAllCheckbox) {
                        selectAllCheckbox.checked = false;
                        selectAllCheckbox.indeterminate = false;
                    }
                }
                applyComboFilters();
            }

            function gatherComboFormData() {
                const rows = Array.from(itemsContainer.querySelectorAll('.combo-item-row'));

                const items = rows.map(row => {
                    const productSelect = row.querySelector('.combo-product-select');
                    const typeSelect = row.querySelector('.combo-product-type-select');
                    const quantityInput = row.querySelector('.combo-quantity-input');

                    const productValue = productSelect ? productSelect.value : '';
                    const typeValue = typeSelect ? typeSelect.value : '';

                    const productId = productValue ? Number(productValue) : null;
                    const productTypeId = typeValue ? Number(typeValue) : null;

                    return {
                        productId: Number.isFinite(productId) && productId > 0 ? productId : null,
                        productTypeId: Number.isFinite(productTypeId) && productTypeId > 0 ? productTypeId : null,
                        quantity: quantityInput ? Number(quantityInput.value) : 0
                    };
                }).filter(item => item.productId);

                return {
                    name: nameInput.value.trim(),
                    description: descriptionInput.value.trim(),
                    imageUrl: normalizeComboImageUrl(),
                    stock: Number(stockInput.value || 0),
                    index: Number(indexInput.value || 0),
                    isPublish: isPublishInput.checked,
                    discountType: Number(discountTypeSelect.value),
                    discount: discountInput.value === '' ? null : Number(discountInput.value),
                    items
                };
            }

            function displayFormErrors(errors) {
                comboFormErrors.innerHTML = '';
                if (!errors || errors.length === 0) {
                    comboFormErrors.classList.add('d-none');
                    return;
                }

                const list = document.createElement('ul');
                list.className = 'mb-0';
                errors.forEach(error => {
                    const item = document.createElement('li');
                    item.textContent = error;
                    list.appendChild(item);
                });

                comboFormErrors.appendChild(list);
                comboFormErrors.classList.remove('d-none');
            }

            async function submitComboForm(event) {
                event.preventDefault();

                const payload = gatherComboFormData();
                const validationErrors = [];

                if (isUploadingImage) {
                    displayFormErrors(['Ảnh đại diện đang được tải lên. Vui lòng đợi hoàn tất trước khi lưu.']);
                    return;
                }

                if (!payload.name) {
                    validationErrors.push('Tên combo không được để trống.');
                }

                if (!payload.description) {
                    validationErrors.push('Mô tả combo không được để trống.');
                }

                if (!payload.imageUrl) {
                    validationErrors.push('Ảnh đại diện không được để trống. Vui lòng tải lên ảnh hoặc nhập URL ảnh hợp lệ.');
                    setComboImageFeedback('Vui lòng tải lên ảnh đại diện hoặc nhập URL ảnh hợp lệ cho combo.', 'error');
                } else if (!isValidComboImageUrl(payload.imageUrl)) {
                    validationErrors.push('URL ảnh combo không hợp lệ. Vui lòng kiểm tra lại.');
                    setComboImageFeedback('URL ảnh combo không hợp lệ. Vui lòng nhập đường dẫn bắt đầu bằng http hoặc https.', 'error');
                }

                if (!payload.items || payload.items.length === 0) {
                    validationErrors.push('Combo phải có ít nhất một sản phẩm.');
                }

                payload.items.forEach((item, index) => {
                    if (!item.productTypeId) {
                        validationErrors.push(`Sản phẩm #${index + 1} cần chọn loại sản phẩm.`);
                    }
                });

                if (payload.discountType === @( (int)DiscountType.Percent ) && payload.discount !== null) {
                    if (payload.discount < 0 || payload.discount > 100) {
                        validationErrors.push('Giá trị giảm phải nằm trong khoảng 0 - 100%.');
                    }
                }

                if (validationErrors.length > 0) {
                    displayFormErrors(validationErrors);
                    return;
                }

                displayFormErrors([]);

                const method = editingComboId ? 'PUT' : 'POST';
                const url = editingComboId ? `${API_BASE_URL}/${editingComboId}` : API_BASE_URL;

                comboSubmitBtn.disabled = true;
                comboSubmitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Đang lưu...';

                try {
                    const response = await fetch(url, {
                        method,
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: JSON.stringify(payload)
                    });

                    if (response.status === 400) {
                        const problem = await response.json();
                        const serverErrors = Object.values(problem.errors || {}).flat();
                        displayFormErrors(serverErrors);
                        return;
                    }

                    if (!response.ok) {
                        throw new Error('Không thể lưu combo.');
                    }

                    const message = editingComboId ? 'Đã cập nhật combo thành công.' : 'Đã tạo combo mới thành công.';
                    comboModal.hide();
                    showAlert('success', message);
                    await fetchCombos();
                } catch (error) {
                    displayFormErrors([error.message || 'Có lỗi xảy ra khi lưu combo.']);
                } finally {
                    comboSubmitBtn.disabled = false;
                    comboSubmitBtn.textContent = editingComboId ? 'Lưu thay đổi' : 'Thêm mới';
                }
            }

            async function openEditModal(id) {
                try {
                    const response = await fetch(`${API_BASE_URL}/${id}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Không thể tải dữ liệu combo.');
                    }

                    const combo = await response.json();
                    editingComboId = combo.id;
                    comboModalLabel.textContent = 'Chỉnh sửa combo';
                    comboSubmitBtn.textContent = 'Lưu thay đổi';
                    comboFormErrors.classList.add('d-none');
                    await fetchProductsIfNeeded();
                    populateComboForm(combo);
                    const normalizedItems = Array.isArray(combo.items)
                        ? combo.items.map(item => ({
                            productId: item.productId,
                            productTypeId: item.productTypeId,
                            quantity: item.quantity,
                            productName: item.productName,
                            productFinalPrice: item.productFinalPrice,
                            productTypeName: item.productTypeName,
                            productTypeFinalPrice: item.productTypeFinalPrice
                        }))
                        : [];
                    setComboItems(normalizedItems);
                    comboModal.show();
                } catch (error) {
                    showAlert('danger', error.message || 'Có lỗi xảy ra khi tải dữ liệu combo.');
                }
            }

            async function openDetailModal(id) {
                try {
                    const response = await fetch(`${API_BASE_URL}/${id}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Không thể tải chi tiết combo.');
                    }

                    const combo = await response.json();
                    const detailDiscountType = Number(combo.discountType);
                    let discountInfo = discountLabels[detailDiscountType] || 'Không áp dụng';
                    if (detailDiscountType === DISCOUNT_PERCENT && combo.discount) {
                        discountInfo += ` (${combo.discount}%)`;
                    } else if ((detailDiscountType === DISCOUNT_AMOUNT || detailDiscountType === DISCOUNT_FIXED) && combo.discount) {
                        discountInfo += ` (${formatCurrency(combo.discount)})`;
                    }

                    detailContent.innerHTML = `
                        <div class="d-flex align-items-center gap-3">
                            <img src="${combo.imageUrl}" alt="${combo.name}" class="rounded" style="width: 80px; height: 80px; object-fit: cover;" />
                            <div>
                                <h5 class="mb-1">${combo.name}</h5>
                                <div class="text-muted">${combo.description}</div>
                            </div>
                        </div>
                        <div class="row g-3 mt-2">
                            <div class="col-md-3">
                                <div class="small text-muted">Giá gốc</div>
                                <div class="fw-semibold">${formatCurrency(combo.price)}</div>
                            </div>
                            <div class="col-md-3">
                                <div class="small text-muted">Giá sau giảm</div>
                                <div class="fw-semibold">${formatCurrency(combo.finalPrice)}</div>
                            </div>
                            <div class="col-md-3">
                                <div class="small text-muted">Giảm giá</div>
                                <div>${discountInfo}</div>
                            </div>
                            <div class="col-md-3">
                                <div class="small text-muted">Tồn kho</div>
                                <div>${combo.stock}</div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <h6 class="mb-2">Sản phẩm</h6>
                            ${combo.items && combo.items.length > 0
                                ? `<div class="list-group">
                                    ${combo.items.map(item => `
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <div class="d-flex align-items-center gap-3">
                                                <img src="${item.productImageUrl || '/images/default-product.svg'}" alt="${item.productName}" style="width: 40px; height: 40px; object-fit: cover;" class="rounded" />
                                                <div>
                                                    <div class="fw-semibold">${item.productName}</div>
                                                    ${item.productTypeName ? `<div class="text-muted small">Loại: ${item.productTypeName}</div>` : ''}
                                                    <div class="text-muted small">Giá: ${formatCurrency(item.productFinalPrice ?? item.productTypeFinalPrice ?? 0)}</div>
                                                    <div class="text-muted small">Còn lại: ${Number.isFinite(Number(item.remainingStock)) ? Number(item.remainingStock) : 0}</div>
                                                </div>
                                            </div>
                                            <span class="badge bg-primary">Số lượng: ${item.quantity}</span>
                                        </div>`).join('')}
                                  </div>`
                                : '<div class="text-muted">Combo chưa có sản phẩm.</div>'}
                        </div>`;

                    detailModal.show();
                } catch (error) {
                    showAlert('danger', error.message || 'Có lỗi xảy ra khi tải chi tiết combo.');
                }
            }

            function openDeleteModal(id) {
                const combo = combos.find(c => c.id === id);
                if (!combo) {
                    showAlert('danger', 'Không tìm thấy combo để xóa.');
                    return;
                }

                deleteComboId = id;
                deleteComboName.textContent = combo.name;
                deleteModal.show();
            }

            async function deleteCombo(id) {
                if (!canDelete) {
                    return;
                }

                try {
                    const response = await fetch(`${API_BASE_URL}/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Accept': 'application/json',
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        }
                    });

                    if (response.status === 404) {
                        showAlert('warning', 'Combo đã bị xóa hoặc không tồn tại.');
                        return;
                    }

                    if (!response.ok && response.status !== 204) {
                        throw new Error('Không thể xóa combo.');
                    }

                    showAlert('success', 'Đã xóa combo thành công.');
                    await fetchCombos();
                } catch (error) {
                    showAlert('danger', error.message || 'Có lỗi xảy ra khi xóa combo.');
                }
            }

            async function bulkDeleteCombos(ids = Array.from(selectedComboIds)) {
                if (!canDelete || !Array.isArray(ids) || ids.length === 0) {
                    return;
                }

                try {
                    const response = await fetch(`${API_BASE_URL}/bulk-delete`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: JSON.stringify({ ids })
                    });

                    if (response.status === 400) {
                        const problem = await response.json();
                        const serverErrors = Object.values(problem.errors || {}).flat();
                        showAlert('danger', serverErrors.join('\n'));
                        return;
                    }

                    if (response.status === 403) {
                        showAlert('danger', 'Bạn không có quyền xóa các combo đã chọn.');
                        return;
                    }

                    if (!response.ok) {
                        throw new Error('Không thể xóa các combo đã chọn.');
                    }

                    const result = await response.json();
                    const deleted = result.deleted || 0;
                    const unauthorized = result.unauthorized || 0;
                    if (deleted > 0) {
                        showAlert('success', `Đã xóa ${deleted} combo.`);
                    }
                    if (unauthorized > 0) {
                        showAlert('warning', `${unauthorized} combo không đủ quyền xóa.`);
                    }
                    if (deleted === 0 && unauthorized === 0) {
                        showAlert('info', 'Không có combo nào được xóa.');
                    }

                    selectedComboIds.clear();
                    if (selectAllCheckbox) {
                        selectAllCheckbox.checked = false;
                        selectAllCheckbox.indeterminate = false;
                    }
                    await fetchCombos();
                } catch (error) {
                    showAlert('danger', error.message || 'Có lỗi xảy ra khi xóa combo.');
                }
            }

            async function bulkUpdatePublishState(isPublish, ids = Array.from(selectedComboIds)) {
                if (!canUpdate || !canBulkManage || !Array.isArray(ids) || ids.length === 0) {
                    return;
                }

                try {
                    const response = await fetch(`${API_BASE_URL}/bulk-publish`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: JSON.stringify({
                            ids,
                            isPublish
                        })
                    });

                    if (response.status === 403) {
                        showAlert('warning', 'Bạn không có quyền cập nhật trạng thái công khai.');
                        return;
                    }

                    if (!response.ok) {
                        throw new Error('Không thể cập nhật trạng thái công khai.');
                    }

                    const result = await response.json().catch(() => ({}));
                    const updated = Number(result.updated || 0);
                    const unauthorized = Number(result.unauthorized || 0);

                    if (updated > 0) {
                        const label = isPublish ? 'xuất bản' : 'ẩn';
                        showAlert('success', `Đã ${label} ${updated} combo.`);
                    }

                    if (unauthorized > 0) {
                        showAlert('warning', `${unauthorized} combo không đủ quyền cập nhật.`);
                    }

                    if (updated === 0 && unauthorized === 0) {
                        showAlert('info', 'Không có combo nào được cập nhật.');
                    }

                    selectedComboIds.clear();
                    if (selectAllCheckbox) {
                        selectAllCheckbox.checked = false;
                        selectAllCheckbox.indeterminate = false;
                    }
                    updateBulkActions();
                    await fetchCombos();
                } catch (error) {
                    showAlert('danger', error instanceof Error ? error.message : 'Không thể cập nhật trạng thái công khai.');
                }
            }

            function updateBulkActions() {
                if (!bulkActions) {
                    return;
                }

                if (!canBulkManage) {
                    bulkActions.classList.add('d-none');
                    return;
                }

                if (selectedComboIds.size > 0) {
                    bulkActions.classList.remove('d-none');
                } else {
                    bulkActions.classList.add('d-none');
                }
            }

            function handleSelectAllChange() {
                if (!canBulkManage || !selectAllCheckbox) {
                    return;
                }

                const checkboxes = tableBody.querySelectorAll('.combo-select');
                const isChecked = selectAllCheckbox.checked;
                checkboxes.forEach(checkbox => {
                    checkbox.checked = isChecked;
                    const id = Number(checkbox.dataset.id);
                    if (isChecked) {
                        selectedComboIds.add(id);
                    } else {
                        selectedComboIds.delete(id);
                    }
                });
                updateBulkActions();
            }

            const debouncedComboFilter = debounce(() => {
                applyComboFilters();
            }, 300);

            searchInput?.addEventListener('input', () => {
                debouncedComboFilter();
            });

            statusFilterSelect?.addEventListener('change', () => {
                applyComboFilters();
            });

            discountFilterSelect?.addEventListener('change', () => {
                applyComboFilters();
            });

            resetFiltersBtn?.addEventListener('click', () => {
                if (searchInput) {
                    searchInput.value = '';
                }
                if (statusFilterSelect) {
                    statusFilterSelect.value = '';
                }
                if (discountFilterSelect) {
                    discountFilterSelect.value = '';
                }
                applyComboFilters();
            });

            refreshBtn?.addEventListener('click', async () => {
                clearAlerts();
                await fetchCombos();
            });

            createBtn?.addEventListener('click', async () => {
                try {
                    await fetchProductsIfNeeded();
                    resetComboForm();
                    comboModalLabel.textContent = 'Thêm combo';
                    comboSubmitBtn.textContent = 'Thêm mới';
                    setComboItems();
                    comboModal.show();
                } catch (error) {
                    showAlert('danger', error.message || 'Không thể chuẩn bị biểu mẫu tạo combo.');
                }
            });

            discountTypeSelect.addEventListener('change', toggleDiscountField);
            addItemBtn.addEventListener('click', async () => {
                try {
                    await fetchProductsIfNeeded();
                    createItemRow();
                } catch (error) {
                    showAlert('danger', error.message || 'Không thể thêm sản phẩm vào combo.');
                }
            });

            importItemsBtn?.addEventListener('click', () => {
                importItemsInput?.click();
            });

            importItemsInput?.addEventListener('change', event => {
                const file = event.target.files && event.target.files[0];
                if (file) {
                    importComboItemsFromFile(file);
                }
            });

            clearItemsBtn?.addEventListener('click', async () => {
                try {
                    await fetchProductsIfNeeded();
                } catch (error) {
                    showAlert('danger', error.message || 'Không thể tải danh sách sản phẩm.');
                    return;
                }

                setComboItems();
                showAlert('info', 'Đã xóa tất cả sản phẩm khỏi combo.');
            });

            comboForm.addEventListener('submit', submitComboForm);
            imageUrlInput?.addEventListener('input', () => {
                evaluateComboImageUrlDebounced();
            });
            imageUrlInput?.addEventListener('blur', () => {
                evaluateComboImageUrl({ forceSuccess: true });
            });
            imageFileInput?.addEventListener('change', handleComboImageFileChange);
            confirmDeleteBtn.addEventListener('click', async () => {
                if (deleteComboId) {
                    await deleteCombo(deleteComboId);
                }
                deleteModal.hide();
            });

            if (bulkPublishButtons.length && canUpdate) {
                bulkPublishButtons.forEach(button => {
                    button.addEventListener('click', async event => {
                        event.preventDefault();

                        if (selectedComboIds.size === 0) {
                            showAlert('warning', 'Vui lòng chọn ít nhất một combo để cập nhật trạng thái.');
                            return;
                        }

                        const action = button.dataset.bulkPublish;
                        const publish = action === 'publish';
                        await bulkUpdatePublishState(publish);
                    });
                });
            }

            if (selectAllCheckbox && canBulkManage) {
                selectAllCheckbox.addEventListener('change', handleSelectAllChange);
            }

            if (bulkDeleteBtn && canDelete) {
                bulkDeleteBtn.addEventListener('click', () => {
                    if (selectedComboIds.size === 0) {
                        showAlert('warning', 'Vui lòng chọn ít nhất một combo để xóa.');
                        return;
                    }

                    if (bulkDeleteCount) {
                        bulkDeleteCount.textContent = selectedComboIds.size.toString();
                    }

                    bulkDeleteModal?.show();
                });
            }

            if (confirmBulkDeleteBtn && canDelete) {
                confirmBulkDeleteBtn.addEventListener('click', async () => {
                    if (selectedComboIds.size === 0) {
                        showAlert('warning', 'Không có combo nào được chọn.');
                        bulkDeleteModal?.hide();
                        return;
                    }

                    bulkDeleteModal?.hide();
                    await bulkDeleteCombos();
                });
            }
            selectAllCheckbox.addEventListener('change', handleSelectAllChange);

            comboModalEl.addEventListener('hidden.bs.modal', () => {
                editingComboId = null;
                comboSubmitBtn.textContent = 'Thêm mới';
                comboSubmitBtn.disabled = false;
                resetComboForm();
            });

            if (canView) {
                fetchCombos();
            }
        })();
    </script>
}
