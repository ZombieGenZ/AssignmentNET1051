@using Assignment.Enums
@{
    ViewData["Title"] = "Quản lý combo";
    Layout = "_AdminLayout";

    var canCreate = ViewData["CanCreate"] as bool? ?? false;
    var canUpdate = ViewData["CanUpdate"] as bool? ?? false;
    var canDelete = ViewData["CanDelete"] as bool? ?? false;
    var canView = ViewData["CanView"] as bool? ?? false;
}

@section Styles {
    <style>
        #comboModal .modal-dialog,
        #detailModal .modal-dialog {
            max-height: calc(100vh - var(--bs-modal-margin) * 2);
        }

        #comboModal .modal-content,
        #detailModal .modal-content {
            display: flex;
            flex-direction: column;
            max-height: 100%;
        }

        #comboModal form {
            display: flex;
            flex-direction: column;
            flex: 1 1 auto;
            min-height: 0;
        }

        #comboModal .modal-body,
        #detailModal .modal-body {
            flex: 1 1 auto;
            overflow-y: auto;
            min-height: 0;
        }

        #comboModal .modal-footer,
        #detailModal .modal-footer {
            flex-shrink: 0;
            position: sticky;
            bottom: 0;
            background-color: var(--bs-modal-bg);
            border-top: 1px solid var(--bs-modal-border-color);
            z-index: 1;
        }

        #comboModal .modal-body::after {
            content: '';
            display: block;
            height: 1rem;
        }
    </style>
}

<div class="container-fluid pt-4 px-4">
    <div class="card shadow-sm" id="combo-app"
         data-can-create="@(canCreate ? "true" : "false")"
         data-can-update="@(canUpdate ? "true" : "false")"
         data-can-delete="@(canDelete ? "true" : "false")"
         data-can-view="@(canView ? "true" : "false")">
        <div class="card-header bg-light">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                <div>
                    <h4 class="mb-1 text-primary">
                        <i class="fas fa-layer-group me-2"></i>@ViewData["Title"]
                    </h4>
                </div>
                <div class="d-flex flex-wrap gap-2">
                    <a class="btn btn-outline-secondary" href="/api/combos/template">
                        <i class="fas fa-file-download me-2"></i>Tải file mẫu
                    </a>
                    @if (canCreate)
                    {
                        <button type="button" class="btn btn-primary" id="createComboBtn">
                            <i class="fas fa-plus me-2"></i>Thêm combo
                        </button>
                    }
                </div>
            </div>
        </div>
        <div class="card-body">
            <div id="alertPlaceholder"></div>
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 mb-3">
                <div class="text-muted small" id="tableStatus">@(canView ? "Đang tải dữ liệu combo..." : "Bạn không có quyền xem danh sách combo.")</div>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="refreshCombosBtn">
                        <i class="fas fa-rotate-right me-1"></i>Tải lại
                    </button>
                    <div class="d-none" id="bulkActions">
                        <button type="button" class="btn btn-danger btn-sm" id="bulkDeleteBtn">
                            <i class="fas fa-trash-alt me-1"></i>Xóa đã chọn
                        </button>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 50px;" class="text-center">
                                <input type="checkbox" id="selectAllCombos" class="form-check-input" />
                            </th>
                            <th>Tên combo</th>
                            <th class="text-end">Giá gốc</th>
                            <th class="text-end">Giá sau giảm</th>
                            <th class="text-center">Tồn kho</th>
                            <th class="text-center">Trạng thái</th>
                            <th style="width: 140px;" class="text-center">Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="combosTableBody">
                        <tr>
                            <td colspan="7" class="text-center py-4 text-muted">@(canView ? "Đang tải dữ liệu..." : "Không có dữ liệu để hiển thị.")</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<form id="antiForgeryForm" class="d-none">
    @Html.AntiForgeryToken()
</form>

<div class="modal fade" id="comboModal" tabindex="-1" aria-labelledby="comboModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="comboModalLabel">Thêm combo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="comboForm" novalidate>
                <div class="modal-body">
                    <div id="comboFormErrors" class="alert alert-danger d-none" role="alert"></div>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="comboName" class="form-label">Tên combo<span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="comboName" maxlength="500" required />
                        </div>
                        <div class="col-md-6">
                            <label for="comboImageUrl" class="form-label">Ảnh đại diện (URL)<span class="text-danger">*</span></label>
                            <input type="url" class="form-control" id="comboImageUrl" maxlength="1000" required />
                        </div>
                        <div class="col-12">
                            <label for="comboDescription" class="form-label">Mô tả<span class="text-danger">*</span></label>
                            <textarea class="form-control" id="comboDescription" rows="3" maxlength="10000" required></textarea>
                        </div>
                        <div class="col-md-4">
                            <label for="comboStock" class="form-label">Tồn kho<span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="comboStock" min="0" step="1" required />
                        </div>
                        <div class="col-md-4">
                            <label for="comboIndex" class="form-label">Thứ tự hiển thị<span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="comboIndex" min="0" step="1" required />
                        </div>
                        <div class="col-md-4">
                            <div class="form-check form-switch mt-4">
                                <input class="form-check-input" type="checkbox" id="comboIsPublish" />
                                <label class="form-check-label" for="comboIsPublish">Xuất bản</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="comboDiscountType" class="form-label">Loại giảm giá</label>
                            <select id="comboDiscountType" class="form-select">
                                <option value="@( (int)DiscountType.None )">Không áp dụng</option>
                                <option value="@( (int)DiscountType.Percent )">Giảm theo %</option>
                            </select>
                        </div>
                        <div class="col-md-6" id="comboDiscountWrapper" style="display: none;">
                            <label for="comboDiscount" class="form-label">Giá trị giảm (%)</label>
                            <input type="number" class="form-control" id="comboDiscount" min="0" max="100" step="1" />
                        </div>
                    </div>
                    <hr class="my-4" />
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 mb-3">
                        <h5 class="mb-0">Sản phẩm trong combo</h5>
                        <div class="d-flex flex-wrap gap-2">
                            <a class="btn btn-outline-secondary btn-sm" id="downloadComboItemsTemplateLink" href="/api/combos/template">
                                <i class="fas fa-file-download me-1"></i>Tải file mẫu
                            </a>
                            <input type="file" accept=".xlsx" id="comboItemsImportInput" class="d-none" />
                            <button type="button" class="btn btn-outline-primary btn-sm" id="importComboItemsBtn">
                                <i class="fas fa-file-import me-1"></i>Nhập từ file
                            </button>
                            <button type="button" class="btn btn-outline-danger btn-sm" id="clearComboItemsBtn">
                                <i class="fas fa-trash-can me-1"></i>Xóa tất cả
                            </button>
                            <button type="button" class="btn btn-outline-success btn-sm" id="addComboItemBtn">
                                <i class="fas fa-plus me-1"></i>Thêm sản phẩm
                            </button>
                        </div>
                    </div>
                    <div id="comboItemsContainer" class="d-flex flex-column gap-3"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary" id="comboSubmitBtn">Thêm mới</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Xóa combo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Bạn có chắc chắn muốn xóa combo <strong id="deleteComboName"></strong>? Hành động này không thể hoàn tác.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="detailModal" tabindex="-1" aria-labelledby="detailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailModalLabel">Chi tiết combo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="d-flex flex-column gap-3" id="comboDetailContent"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const app = document.getElementById('combo-app');
            if (!app) {
                return;
            }

            const API_BASE_URL = '/api/combos';
            const canCreate = app.dataset.canCreate === 'true';
            const canUpdate = app.dataset.canUpdate === 'true';
            const canDelete = app.dataset.canDelete === 'true';
            const canView = app.dataset.canView === 'true';

            const tableBody = document.getElementById('combosTableBody');
            const tableStatus = document.getElementById('tableStatus');
            const alertPlaceholder = document.getElementById('alertPlaceholder');
            const refreshBtn = document.getElementById('refreshCombosBtn');
            const selectAllCheckbox = document.getElementById('selectAllCombos');
            const bulkActions = document.getElementById('bulkActions');
            const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
            const createBtn = document.getElementById('createComboBtn');

            const comboModalEl = document.getElementById('comboModal');
            const comboModal = new bootstrap.Modal(comboModalEl);
            const comboForm = document.getElementById('comboForm');
            const comboModalLabel = document.getElementById('comboModalLabel');
            const comboFormErrors = document.getElementById('comboFormErrors');
            const comboSubmitBtn = document.getElementById('comboSubmitBtn');

            const nameInput = document.getElementById('comboName');
            const descriptionInput = document.getElementById('comboDescription');
            const imageUrlInput = document.getElementById('comboImageUrl');
            const stockInput = document.getElementById('comboStock');
            const indexInput = document.getElementById('comboIndex');
            const isPublishInput = document.getElementById('comboIsPublish');
            const discountTypeSelect = document.getElementById('comboDiscountType');
            const discountWrapper = document.getElementById('comboDiscountWrapper');
            const discountInput = document.getElementById('comboDiscount');
            const itemsContainer = document.getElementById('comboItemsContainer');
            const addItemBtn = document.getElementById('addComboItemBtn');
            const importItemsBtn = document.getElementById('importComboItemsBtn');
            const importItemsInput = document.getElementById('comboItemsImportInput');
            const clearItemsBtn = document.getElementById('clearComboItemsBtn');
            const importItemsBtnInitialHtml = importItemsBtn ? importItemsBtn.innerHTML : '';

            const deleteModalEl = document.getElementById('deleteModal');
            const deleteModal = new bootstrap.Modal(deleteModalEl);
            const deleteComboName = document.getElementById('deleteComboName');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

            const detailModalEl = document.getElementById('detailModal');
            const detailModal = new bootstrap.Modal(detailModalEl);
            const detailContent = document.getElementById('comboDetailContent');

            const antiForgeryTokenInput = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]');
            const antiForgeryToken = antiForgeryTokenInput ? antiForgeryTokenInput.value : '';

            const discountLabels = {
                @( (int)DiscountType.None ): 'Không áp dụng',
                @( (int)DiscountType.Percent ): 'Giảm theo %'
            };

            let combos = [];
            let productsCache = null;
            let editingComboId = null;
            let deleteComboId = null;
            const selectedComboIds = new Set();

            function showAlert(type, message) {
                if (!alertPlaceholder) {
                    return;
                }

                const wrapper = document.createElement('div');
                wrapper.className = `alert alert-${type} alert-dismissible fade show`;
                wrapper.setAttribute('role', 'alert');
                wrapper.innerHTML = `
                    <span>${message}</span>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;

                alertPlaceholder.appendChild(wrapper);
            }

            function clearAlerts() {
                if (alertPlaceholder) {
                    alertPlaceholder.innerHTML = '';
                }
            }

            function formatCurrency(value) {
                const number = Number(value || 0);
                return number.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
            }

            function toggleDiscountField() {
                const selectedValue = Number(discountTypeSelect.value);
                discountWrapper.style.display = selectedValue === @( (int)DiscountType.Percent ) ? 'block' : 'none';
            }

            async function fetchProductsIfNeeded() {
                if (productsCache) {
                    return productsCache;
                }

                const response = await fetch(`${API_BASE_URL}/products`, {
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Không thể tải danh sách sản phẩm.');
                }

                productsCache = await response.json();
                return productsCache;
            }

            function mergeProductsIntoCache(products) {
                if (!Array.isArray(products) || products.length === 0) {
                    return;
                }

                if (!Array.isArray(productsCache)) {
                    productsCache = [];
                }

                const lookup = new Map(productsCache.map(product => [String(product.id), product]));

                products.forEach(product => {
                    const key = String(product.id);
                    if (lookup.has(key)) {
                        const index = productsCache.findIndex(existing => String(existing.id) === key);
                        if (index >= 0) {
                            productsCache[index] = product;
                        }
                    } else {
                        productsCache.push(product);
                    }
                });
            }

            function setComboItems(items = []) {
                itemsContainer.innerHTML = '';

                if (Array.isArray(items) && items.length > 0) {
                    items.forEach(item => {
                        createItemRow({ productId: item.productId, quantity: item.quantity });
                    });
                } else {
                    createItemRow();
                }
            }

            function createItemRow(item = { productId: '', quantity: 1 }) {
                const row = document.createElement('div');
                row.className = 'row g-3 align-items-end';

                const productCol = document.createElement('div');
                productCol.className = 'col-md-8';
                const productLabel = document.createElement('label');
                productLabel.className = 'form-label';
                productLabel.textContent = 'Sản phẩm';
                const productSelect = document.createElement('select');
                productSelect.className = 'form-select combo-product-select';
                productSelect.required = true;
                productSelect.innerHTML = '<option value="">-- Chọn sản phẩm --</option>';

                if (productsCache) {
                    productsCache.forEach(product => {
                        const option = document.createElement('option');
                        option.value = product.id;
                        option.textContent = `${product.name} (${formatCurrency(product.finalPrice)})`;
                        if (String(item.productId) === String(product.id)) {
                            option.selected = true;
                        }
                        productSelect.appendChild(option);
                    });
                }

                productCol.appendChild(productLabel);
                productCol.appendChild(productSelect);

                const quantityCol = document.createElement('div');
                quantityCol.className = 'col-md-3';
                const quantityLabel = document.createElement('label');
                quantityLabel.className = 'form-label';
                quantityLabel.textContent = 'Số lượng';
                const quantityInput = document.createElement('input');
                quantityInput.type = 'number';
                quantityInput.className = 'form-control combo-quantity-input';
                quantityInput.min = '1';
                quantityInput.step = '1';
                quantityInput.value = item.quantity ?? 1;
                quantityInput.required = true;
                quantityCol.appendChild(quantityLabel);
                quantityCol.appendChild(quantityInput);

                const actionCol = document.createElement('div');
                actionCol.className = 'col-md-1 d-flex justify-content-end';
                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'btn btn-outline-danger';
                removeBtn.innerHTML = '<i class="fas fa-trash"></i>';
                removeBtn.addEventListener('click', () => {
                    itemsContainer.removeChild(row);
                });
                actionCol.appendChild(removeBtn);

                row.appendChild(productCol);
                row.appendChild(quantityCol);
                row.appendChild(actionCol);

                itemsContainer.appendChild(row);
            }

            async function importComboItemsFromFile(file) {
                if (!file) {
                    return;
                }

                const formData = new FormData();
                formData.append('file', file);

                if (importItemsBtn) {
                    importItemsBtn.disabled = true;
                    importItemsBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>Đang nhập...';
                }

                try {
                    const response = await fetch(`${API_BASE_URL}/import-items`, {
                        method: 'POST',
                        headers: {
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: formData
                    });

                    if (!response.ok) {
                        const result = await response.json().catch(() => null);
                        const message = result && result.message ? result.message : 'Không thể nhập sản phẩm từ file.';
                        showAlert('danger', message);
                        return;
                    }

                    const result = await response.json();
                    const importedItems = Array.isArray(result.items) ? result.items : [];
                    const importedProducts = Array.isArray(result.products) ? result.products : [];
                    const invalidEntries = Array.isArray(result.invalidEntries) ? result.invalidEntries : [];

                    if (!importedItems.length) {
                        let warningMessage = 'Không có sản phẩm hợp lệ trong file.';
                        if (invalidEntries.length) {
                            warningMessage += ` Bỏ qua ${invalidEntries.length} dòng không hợp lệ.`;
                        }
                        showAlert('warning', warningMessage);
                        return;
                    }

                    await fetchProductsIfNeeded().catch(() => null);
                    mergeProductsIntoCache(importedProducts);
                    setComboItems(importedItems);

                    let successMessage = `Đã nhập ${importedItems.length} sản phẩm hợp lệ.`;
                    if (invalidEntries.length) {
                        successMessage += ` Bỏ qua ${invalidEntries.length} dòng không hợp lệ.`;
                    }
                    showAlert('success', successMessage);
                } catch (error) {
                    showAlert('danger', error.message || 'Không thể nhập sản phẩm từ file.');
                } finally {
                    if (importItemsBtn) {
                        importItemsBtn.disabled = false;
                        importItemsBtn.innerHTML = importItemsBtnInitialHtml || '<i class="fas fa-file-import me-1"></i>Nhập từ file';
                    }
                    if (importItemsInput) {
                        importItemsInput.value = '';
                    }
                }
            }

            function resetComboForm() {
                comboForm.reset();
                comboFormErrors.classList.add('d-none');
                comboFormErrors.innerHTML = '';
                itemsContainer.innerHTML = '';
                discountInput.value = '';
                toggleDiscountField();
            }

            function populateComboForm(combo) {
                nameInput.value = combo.name;
                descriptionInput.value = combo.description;
                imageUrlInput.value = combo.imageUrl;
                stockInput.value = combo.stock;
                indexInput.value = combo.index;
                isPublishInput.checked = combo.isPublish;
                discountTypeSelect.value = combo.discountType;
                discountInput.value = combo.discount ?? '';
                toggleDiscountField();
            }

            function renderCombos() {
                if (!canView) {
                    tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4 text-muted">Bạn không có quyền xem danh sách combo.</td></tr>';
                    tableStatus.textContent = 'Không thể tải dữ liệu combo.';
                    return;
                }

                if (!combos || combos.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4 text-muted">Chưa có combo nào.</td></tr>';
                    tableStatus.textContent = 'Không có dữ liệu để hiển thị.';
                    return;
                }

                const rows = combos.map(combo => {
                    const row = document.createElement('tr');

                    const checkboxCell = document.createElement('td');
                    checkboxCell.className = 'text-center';
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.className = 'form-check-input combo-select';
                    checkbox.dataset.id = combo.id;
                    checkbox.checked = selectedComboIds.has(combo.id);
                    checkbox.addEventListener('change', () => {
                        if (checkbox.checked) {
                            selectedComboIds.add(combo.id);
                        } else {
                            selectedComboIds.delete(combo.id);
                        }
                        updateBulkActions();
                    });
                    checkboxCell.appendChild(checkbox);
                    row.appendChild(checkboxCell);

                    const nameCell = document.createElement('td');
                    nameCell.innerHTML = `
                        <div class="d-flex align-items-center gap-3">
                            <img src="${combo.imageUrl}" alt="${combo.name}" class="rounded" style="width: 48px; height: 48px; object-fit: cover;" />
                            <div>
                                <div class="fw-semibold">${combo.name}</div>
                                <div class="text-muted small">${combo.items.length} sản phẩm</div>
                            </div>
                        </div>`;
                    row.appendChild(nameCell);

                    const priceCell = document.createElement('td');
                    priceCell.className = 'text-end';
                    priceCell.textContent = formatCurrency(combo.price);
                    row.appendChild(priceCell);

                    const finalPriceCell = document.createElement('td');
                    finalPriceCell.className = 'text-end';
                    if (combo.discountType === @( (int)DiscountType.Percent ) && combo.discount) {
                        finalPriceCell.innerHTML = `
                            <div class="d-flex flex-column align-items-end">
                                <del class="text-muted small">${formatCurrency(combo.price)}</del>
                                <span class="fw-semibold text-danger">${formatCurrency(combo.finalPrice)}</span>
                                <span class="small text-muted">Giảm ${combo.discount}%</span>
                            </div>`;
                    } else {
                        finalPriceCell.innerHTML = `<span class="fw-semibold">${formatCurrency(combo.finalPrice)}</span>`;
                    }
                    row.appendChild(finalPriceCell);

                    const stockCell = document.createElement('td');
                    stockCell.className = 'text-center';
                    stockCell.textContent = combo.stock;
                    row.appendChild(stockCell);

                    const statusCell = document.createElement('td');
                    statusCell.className = 'text-center';
                    statusCell.innerHTML = combo.isPublish
                        ? '<span class="badge bg-success">Đã xuất bản</span>'
                        : '<span class="badge bg-secondary">Nháp</span>';
                    row.appendChild(statusCell);

                    const actionsCell = document.createElement('td');
                    actionsCell.className = 'text-center';
                    const actionsWrapper = document.createElement('div');
                    actionsWrapper.className = 'd-flex justify-content-center gap-2';

                    const viewBtn = document.createElement('button');
                    viewBtn.type = 'button';
                    viewBtn.className = 'btn btn-sm btn-outline-info';
                    viewBtn.innerHTML = '<i class="fas fa-eye"></i>';
                    viewBtn.title = 'Xem chi tiết';
                    viewBtn.addEventListener('click', () => openDetailModal(combo.id));
                    actionsWrapper.appendChild(viewBtn);

                    if (canUpdate) {
                        const editBtn = document.createElement('button');
                        editBtn.type = 'button';
                        editBtn.className = 'btn btn-sm btn-outline-warning';
                        editBtn.innerHTML = '<i class="fas fa-edit"></i>';
                        editBtn.title = 'Chỉnh sửa';
                        editBtn.addEventListener('click', () => openEditModal(combo.id));
                        actionsWrapper.appendChild(editBtn);
                    }

                    if (canDelete) {
                        const deleteBtn = document.createElement('button');
                        deleteBtn.type = 'button';
                        deleteBtn.className = 'btn btn-sm btn-outline-danger';
                        deleteBtn.innerHTML = '<i class="fas fa-trash"></i>';
                        deleteBtn.title = 'Xóa';
                        deleteBtn.addEventListener('click', () => openDeleteModal(combo.id));
                        actionsWrapper.appendChild(deleteBtn);
                    }

                    actionsCell.appendChild(actionsWrapper);
                    row.appendChild(actionsCell);

                    return row;
                });

                tableBody.innerHTML = '';
                rows.forEach(row => tableBody.appendChild(row));
                tableStatus.textContent = `Hiển thị ${combos.length} combo.`;
                updateBulkActions();
            }

            async function fetchCombos() {
                if (!canView) {
                    return;
                }

                tableStatus.textContent = 'Đang tải dữ liệu combo...';
                tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4 text-muted">Đang tải dữ liệu...</td></tr>';

                try {
                    const response = await fetch(API_BASE_URL, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Không thể tải danh sách combo.');
                    }

                    combos = await response.json();
                    combos = Array.isArray(combos) ? combos : [];
                } catch (error) {
                    combos = [];
                    showAlert('danger', error.message || 'Có lỗi xảy ra khi tải dữ liệu combo.');
                }

                selectedComboIds.clear();
                selectAllCheckbox.checked = false;
                renderCombos();
            }

            function gatherComboFormData() {
                const items = Array.from(itemsContainer.querySelectorAll('.row')).map(row => {
                    const productSelect = row.querySelector('.combo-product-select');
                    const quantityInput = row.querySelector('.combo-quantity-input');
                    return {
                        productId: productSelect ? Number(productSelect.value) : null,
                        quantity: quantityInput ? Number(quantityInput.value) : 0
                    };
                }).filter(item => item.productId);

                return {
                    name: nameInput.value.trim(),
                    description: descriptionInput.value.trim(),
                    imageUrl: imageUrlInput.value.trim(),
                    stock: Number(stockInput.value || 0),
                    index: Number(indexInput.value || 0),
                    isPublish: isPublishInput.checked,
                    discountType: Number(discountTypeSelect.value),
                    discount: discountInput.value === '' ? null : Number(discountInput.value),
                    items
                };
            }

            function displayFormErrors(errors) {
                comboFormErrors.innerHTML = '';
                if (!errors || errors.length === 0) {
                    comboFormErrors.classList.add('d-none');
                    return;
                }

                const list = document.createElement('ul');
                list.className = 'mb-0';
                errors.forEach(error => {
                    const item = document.createElement('li');
                    item.textContent = error;
                    list.appendChild(item);
                });

                comboFormErrors.appendChild(list);
                comboFormErrors.classList.remove('d-none');
            }

            async function submitComboForm(event) {
                event.preventDefault();

                const payload = gatherComboFormData();
                const validationErrors = [];

                if (!payload.name) {
                    validationErrors.push('Tên combo không được để trống.');
                }

                if (!payload.description) {
                    validationErrors.push('Mô tả combo không được để trống.');
                }

                if (!payload.imageUrl) {
                    validationErrors.push('Ảnh đại diện không được để trống.');
                }

                if (!payload.items || payload.items.length === 0) {
                    validationErrors.push('Combo phải có ít nhất một sản phẩm.');
                }

                if (payload.discountType === @( (int)DiscountType.Percent ) && payload.discount !== null) {
                    if (payload.discount < 0 || payload.discount > 100) {
                        validationErrors.push('Giá trị giảm phải nằm trong khoảng 0 - 100%.');
                    }
                }

                if (validationErrors.length > 0) {
                    displayFormErrors(validationErrors);
                    return;
                }

                displayFormErrors([]);

                const method = editingComboId ? 'PUT' : 'POST';
                const url = editingComboId ? `${API_BASE_URL}/${editingComboId}` : API_BASE_URL;

                comboSubmitBtn.disabled = true;
                comboSubmitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Đang lưu...';

                try {
                    const response = await fetch(url, {
                        method,
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: JSON.stringify(payload)
                    });

                    if (response.status === 400) {
                        const problem = await response.json();
                        const serverErrors = Object.values(problem.errors || {}).flat();
                        displayFormErrors(serverErrors);
                        return;
                    }

                    if (!response.ok) {
                        throw new Error('Không thể lưu combo.');
                    }

                    const message = editingComboId ? 'Đã cập nhật combo thành công.' : 'Đã tạo combo mới thành công.';
                    comboModal.hide();
                    showAlert('success', message);
                    await fetchCombos();
                } catch (error) {
                    displayFormErrors([error.message || 'Có lỗi xảy ra khi lưu combo.']);
                } finally {
                    comboSubmitBtn.disabled = false;
                    comboSubmitBtn.textContent = editingComboId ? 'Lưu thay đổi' : 'Thêm mới';
                }
            }

            async function openEditModal(id) {
                try {
                    const response = await fetch(`${API_BASE_URL}/${id}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Không thể tải dữ liệu combo.');
                    }

                    const combo = await response.json();
                    editingComboId = combo.id;
                    comboModalLabel.textContent = 'Chỉnh sửa combo';
                    comboSubmitBtn.textContent = 'Lưu thay đổi';
                    comboFormErrors.classList.add('d-none');
                    await fetchProductsIfNeeded();
                    populateComboForm(combo);
                    const normalizedItems = Array.isArray(combo.items)
                        ? combo.items.map(item => ({ productId: item.productId, quantity: item.quantity }))
                        : [];
                    setComboItems(normalizedItems);
                    comboModal.show();
                } catch (error) {
                    showAlert('danger', error.message || 'Có lỗi xảy ra khi tải dữ liệu combo.');
                }
            }

            async function openDetailModal(id) {
                try {
                    const response = await fetch(`${API_BASE_URL}/${id}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Không thể tải chi tiết combo.');
                    }

                    const combo = await response.json();
                    detailContent.innerHTML = `
                        <div class="d-flex align-items-center gap-3">
                            <img src="${combo.imageUrl}" alt="${combo.name}" class="rounded" style="width: 80px; height: 80px; object-fit: cover;" />
                            <div>
                                <h5 class="mb-1">${combo.name}</h5>
                                <div class="text-muted">${combo.description}</div>
                            </div>
                        </div>
                        <div class="row g-3 mt-2">
                            <div class="col-md-3">
                                <div class="small text-muted">Giá gốc</div>
                                <div class="fw-semibold">${formatCurrency(combo.price)}</div>
                            </div>
                            <div class="col-md-3">
                                <div class="small text-muted">Giá sau giảm</div>
                                <div class="fw-semibold">${formatCurrency(combo.finalPrice)}</div>
                            </div>
                            <div class="col-md-3">
                                <div class="small text-muted">Giảm giá</div>
                                <div>${discountLabels[combo.discountType] || 'Không áp dụng'}${combo.discount ? ` (${combo.discount}%)` : ''}</div>
                            </div>
                            <div class="col-md-3">
                                <div class="small text-muted">Tồn kho</div>
                                <div>${combo.stock}</div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <h6 class="mb-2">Sản phẩm</h6>
                            ${combo.items && combo.items.length > 0
                                ? `<div class="list-group">
                                    ${combo.items.map(item => `
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <div class="d-flex align-items-center gap-3">
                                                <img src="${item.productImageUrl || '/images/no-image.jpg'}" alt="${item.productName}" style="width: 40px; height: 40px; object-fit: cover;" class="rounded" />
                                                <div>
                                                    <div class="fw-semibold">${item.productName}</div>
                                                    <div class="text-muted small">Giá: ${formatCurrency(item.productFinalPrice)}</div>
                                                </div>
                                            </div>
                                            <span class="badge bg-primary">Số lượng: ${item.quantity}</span>
                                        </div>`).join('')}
                                  </div>`
                                : '<div class="text-muted">Combo chưa có sản phẩm.</div>'}
                        </div>`;

                    detailModal.show();
                } catch (error) {
                    showAlert('danger', error.message || 'Có lỗi xảy ra khi tải chi tiết combo.');
                }
            }

            function openDeleteModal(id) {
                const combo = combos.find(c => c.id === id);
                if (!combo) {
                    showAlert('danger', 'Không tìm thấy combo để xóa.');
                    return;
                }

                deleteComboId = id;
                deleteComboName.textContent = combo.name;
                deleteModal.show();
            }

            async function deleteCombo(id) {
                if (!canDelete) {
                    return;
                }

                try {
                    const response = await fetch(`${API_BASE_URL}/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Accept': 'application/json',
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        }
                    });

                    if (response.status === 404) {
                        showAlert('warning', 'Combo đã bị xóa hoặc không tồn tại.');
                        return;
                    }

                    if (!response.ok && response.status !== 204) {
                        throw new Error('Không thể xóa combo.');
                    }

                    showAlert('success', 'Đã xóa combo thành công.');
                    await fetchCombos();
                } catch (error) {
                    showAlert('danger', error.message || 'Có lỗi xảy ra khi xóa combo.');
                }
            }

            async function bulkDeleteCombos() {
                if (!canDelete || selectedComboIds.size === 0) {
                    return;
                }

                if (!confirm(`Bạn có chắc chắn muốn xóa ${selectedComboIds.size} combo đã chọn?`)) {
                    return;
                }

                try {
                    const response = await fetch(`${API_BASE_URL}/bulk-delete`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: JSON.stringify({ ids: Array.from(selectedComboIds) })
                    });

                    if (response.status === 400) {
                        const problem = await response.json();
                        const serverErrors = Object.values(problem.errors || {}).flat();
                        showAlert('danger', serverErrors.join('\n'));
                        return;
                    }

                    if (response.status === 403) {
                        showAlert('danger', 'Bạn không có quyền xóa các combo đã chọn.');
                        return;
                    }

                    if (!response.ok) {
                        throw new Error('Không thể xóa các combo đã chọn.');
                    }

                    const result = await response.json();
                    const deleted = result.deleted || 0;
                    const unauthorized = result.unauthorized || 0;
                    if (deleted > 0) {
                        showAlert('success', `Đã xóa ${deleted} combo.`);
                    }
                    if (unauthorized > 0) {
                        showAlert('warning', `${unauthorized} combo không đủ quyền xóa.`);
                    }

                    selectedComboIds.clear();
                    selectAllCheckbox.checked = false;
                    await fetchCombos();
                } catch (error) {
                    showAlert('danger', error.message || 'Có lỗi xảy ra khi xóa combo.');
                }
            }

            function updateBulkActions() {
                if (!canDelete) {
                    bulkActions.classList.add('d-none');
                    return;
                }

                if (selectedComboIds.size > 0) {
                    bulkActions.classList.remove('d-none');
                } else {
                    bulkActions.classList.add('d-none');
                }
            }

            function handleSelectAllChange() {
                const checkboxes = tableBody.querySelectorAll('.combo-select');
                const isChecked = selectAllCheckbox.checked;
                checkboxes.forEach(checkbox => {
                    checkbox.checked = isChecked;
                    const id = Number(checkbox.dataset.id);
                    if (isChecked) {
                        selectedComboIds.add(id);
                    } else {
                        selectedComboIds.delete(id);
                    }
                });
                updateBulkActions();
            }

            refreshBtn?.addEventListener('click', async () => {
                clearAlerts();
                await fetchCombos();
            });

            createBtn?.addEventListener('click', async () => {
                try {
                    await fetchProductsIfNeeded();
                    resetComboForm();
                    comboModalLabel.textContent = 'Thêm combo';
                    comboSubmitBtn.textContent = 'Thêm mới';
                    setComboItems();
                    comboModal.show();
                } catch (error) {
                    showAlert('danger', error.message || 'Không thể chuẩn bị biểu mẫu tạo combo.');
                }
            });

            discountTypeSelect.addEventListener('change', toggleDiscountField);
            addItemBtn.addEventListener('click', async () => {
                try {
                    await fetchProductsIfNeeded();
                    createItemRow();
                } catch (error) {
                    showAlert('danger', error.message || 'Không thể thêm sản phẩm vào combo.');
                }
            });

            importItemsBtn?.addEventListener('click', () => {
                importItemsInput?.click();
            });

            importItemsInput?.addEventListener('change', event => {
                const file = event.target.files && event.target.files[0];
                if (file) {
                    importComboItemsFromFile(file);
                }
            });

            clearItemsBtn?.addEventListener('click', async () => {
                try {
                    await fetchProductsIfNeeded();
                } catch (error) {
                    showAlert('danger', error.message || 'Không thể tải danh sách sản phẩm.');
                    return;
                }

                setComboItems();
                showAlert('info', 'Đã xóa tất cả sản phẩm khỏi combo.');
            });

            comboForm.addEventListener('submit', submitComboForm);
            confirmDeleteBtn.addEventListener('click', async () => {
                if (deleteComboId) {
                    await deleteCombo(deleteComboId);
                }
                deleteModal.hide();
            });

            bulkDeleteBtn?.addEventListener('click', bulkDeleteCombos);
            selectAllCheckbox.addEventListener('change', handleSelectAllChange);

            comboModalEl.addEventListener('hidden.bs.modal', () => {
                editingComboId = null;
                comboSubmitBtn.textContent = 'Thêm mới';
                comboSubmitBtn.disabled = false;
                resetComboForm();
            });

            if (canView) {
                fetchCombos();
            }
        })();
    </script>
}
