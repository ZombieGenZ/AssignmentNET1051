@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Collections.Generic
@using System.Linq
@using System.Text.Json
@using Assignment.Models
@model Assignment.Models.Combo
@inject UserManager<ApplicationUser> UserManager

@functions {
    private sealed class ComboItemInput
    {
        public long? ProductId { get; set; }
        public long Quantity { get; set; }
    }
}

@{
    ViewData["Title"] = "Tạo Combo mới";
    Layout = "_AdminLayout";

    var selectedProductIds = ViewData["SelectedProductIds"] as List<long> ?? new List<long>();
    var selectedQuantities = ViewData["SelectedQuantities"] as List<long> ?? new List<long>();
    var products = (IEnumerable<SelectListItem>?)ViewBag.Products ?? Enumerable.Empty<SelectListItem>();
    var comboItems = new List<ComboItemInput>();

    if (selectedProductIds.Any())
    {
        for (var index = 0; index < selectedProductIds.Count; index++)
        {
            var quantity = index < selectedQuantities.Count ? selectedQuantities[index] : 1;
            comboItems.Add(new ComboItemInput
            {
                ProductId = selectedProductIds[index],
                Quantity = quantity
            });
        }
    }
    else
    {
        comboItems.Add(new ComboItemInput
        {
            ProductId = null,
            Quantity = 1
        });
    }

    var productOptionsJson = JsonSerializer.Serialize(products.Select(p => new { value = p.Value, text = p.Text }));
}

<!-- Thêm link Font Awesome để sử dụng icons -->
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>

<div class="container-fluid pt-4 px-4">
    <div class="row g-4 justify-content-center">
        <div class="col-sm-12 col-xl-8">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h4 class="mb-0 text-primary">
                        <i class="fas fa-plus-circle me-2"></i>@ViewData["Title"]
                    </h4>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        <div class="row g-3 mb-3">
                            <div class="col-md-6">
                                <label asp-for="Name" class="form-label"></label>
                                <input asp-for="Name" class="form-control" placeholder="Nhập tên combo">
                                <span asp-validation-for="Name" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Giá combo</label>
                                <div class="form-control-plaintext border rounded px-3 py-2 bg-light">
                                    Giá combo sẽ được tự động tính dựa trên giá của các sản phẩm đã chọn.
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Description" class="form-label"></label>
                            <textarea asp-for="Description" class="form-control" rows="3" placeholder="Mô tả chi tiết về combo"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="ImageUrl" class="form-label"></label>
                            <input asp-for="ImageUrl" class="form-control" type="text" placeholder="Dán URL hình ảnh combo">
                            <span asp-validation-for="ImageUrl" class="text-danger"></span>
                        </div>

                        <div class="row g-3 mb-3">
                            <div class="col-md-4">
                                <label asp-for="Stock" class="form-label"></label>
                                <input asp-for="Stock" class="form-control" type="number" placeholder="Số lượng tồn kho">
                                <span asp-validation-for="Stock" class="text-danger"></span>
                            </div>
                            <div class="col-md-4">
                                <label asp-for="Index" class="form-label"></label>
                                <input asp-for="Index" class="form-control" type="number" placeholder="Thứ tự hiển thị">
                                <span asp-validation-for="Index" class="text-danger"></span>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group h-100 d-flex flex-column justify-content-end">
                                    <div class="form-check">
                                        <input asp-for="IsPublish" class="form-check-input" type="checkbox" />
                                        <label asp-for="IsPublish" class="form-check-label"></label>
                                        <span asp-validation-for="IsPublish" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row g-3 mb-3">
                            <div class="col-md-6">
                                <label asp-for="DiscountType" class="form-label"></label>
                                <select asp-for="DiscountType" class="form-select" id="DiscountType">
                                    <option value="0">Không giảm giá</option>
                                    <option value="1">Giảm theo %</option>
                                </select>
                                <span asp-validation-for="DiscountType" class="text-danger"></span>
                            </div>
                            <div class="col-md-6" id="DiscountField" style="display: none;">
                                <label asp-for="Discount" class="form-label"></label>
                                <input asp-for="Discount" class="form-control" type="number" id="DiscountInput" placeholder="Nhập giá trị giảm" />
                                <span asp-validation-for="Discount" class="text-danger"></span>
                            </div>
                        </div>

                        <hr />
                        <div class="d-flex flex-wrap align-items-center justify-content-between gap-2 mb-2">
                            <h5 class="mb-0">Sản phẩm trong Combo</h5>
                            <div class="btn-group" role="group" aria-label="Combo item helpers">
                                <a class="btn btn-outline-primary btn-sm" asp-action="DownloadComboTemplate">
                                    <i class="fas fa-file-download me-1"></i>Tải file mẫu
                                </a>
                                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="triggerComboImport()">
                                    <i class="fas fa-file-import me-1"></i>Nhập từ file
                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm" onclick="clearAllComboItems()">
                                    <i class="fas fa-trash me-1"></i>Xóa toàn bộ
                                </button>
                            </div>
                        </div>
                        <input type="file" id="comboImportInput" class="d-none" accept=".xlsx,.xls,.csv" />
                        <div id="comboItemsContainer">
                            @for (var index = 0; index < comboItems.Count; index++)
                            {
                                var item = comboItems[index];
                                <div class="combo-item-row row g-2 mb-2 align-items-end">
                                    <div class="col-md-7">
                                        <label class="form-label">Sản phẩm</label>
                                        <select name="ProductIds" class="form-select product-select" required>
                                            <option value="">-- Chọn sản phẩm --</option>
                                            @foreach (var product in products)
                                            {
                                                var isSelected = product.Value == item.ProductId?.ToString();
                                                <option value="@product.Value" selected="@(isSelected ? "selected" : null)">@product.Text</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Số lượng</label>
                                        <input type="number" name="Quantities" class="form-control" min="1" value="@item.Quantity" required />
                                    </div>
                                    <div class="col-md-2">
                                        <button type="button" class="btn btn-danger w-100" onclick="removeComboItem(this)"><i class="fas fa-trash-alt"></i> Xóa</button>
                                    </div>
                                </div>
                            }
                        </div>
                        <button type="button" class="btn btn-success btn-sm mt-2" onclick="addComboItem()"><i class="fas fa-plus"></i> Thêm sản phẩm</button>

                        <div class="card-footer bg-transparent border-top d-flex justify-content-end gap-2 mt-4">
                            @if (User.HasAnyPermission("GetCombo", "GetComboAll"))
                            {
                                <a class="btn btn-secondary" asp-action="Index">
                                    <i class="fas fa-arrow-left me-2"></i>Trở về
                                </a>
                            }
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-2"></i>Tạo
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <partial name="_XlsxScriptPartial" />
    <script>
        const allProducts = @Html.Raw(productOptionsJson);

        function normalizeProductIdentifier(value) {
            if (value == null) {
                return '';
            }

            let text = String(value).trim();
            if (!text) {
                return '';
            }

            const decimalMatch = text.match(/^(-?\d+)\.0+$/);
            if (decimalMatch) {
                text = decimalMatch[1];
            }

            if (/^-?\d+$/.test(text)) {
                const normalized = text.replace(/^0+(?=\d)/, '');
                return normalized.length ? normalized : '0';
            }

            return text;
        }

        function normalizeDisplayText(value) {
            if (value == null) {
                return '';
            }

            return String(value)
                .trim()
                .toLowerCase()
                .normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '')
                .replace(/\s+/g, '');
        }

        function findProductByIdentifier(value) {
            const normalized = normalizeProductIdentifier(value);
            if (normalized) {
                const matchedById = allProducts.find(product => normalizeProductIdentifier(product.value) === normalized);
                if (matchedById) {
                    return matchedById;
                }
            }

            const normalizedText = normalizeDisplayText(value);
            if (!normalizedText) {
                return null;
            }

            return allProducts.find(product => normalizeDisplayText(product.text) === normalizedText) ?? null;
        }

        function parsePositiveInteger(value) {
            if (value == null) {
                return NaN;
            }

            if (typeof value === 'number') {
                return Number.isFinite(value) ? Math.trunc(value) : NaN;
            }

            if (typeof value === 'string') {
                const cleaned = value.replace(/[,\s]/g, '');
                if (!cleaned) {
                    return NaN;
                }

                const parsed = Number.parseFloat(cleaned);
                return Number.isFinite(parsed) ? Math.trunc(parsed) : NaN;
            }

            return NaN;
        }

        function toggleDiscountField() {
            const discountType = document.getElementById('DiscountType').value;
            const discountField = document.getElementById('DiscountField');
            const discountInput = document.getElementById('DiscountInput');

            if (discountType === '0') {
                discountField.style.display = 'none';
                discountInput.value = '';
                discountInput.removeAttribute('required');
                discountInput.removeAttribute('max');
                discountInput.setAttribute('min', '0');
            } else if (discountType === '1') {
                discountField.style.display = 'block';
                discountInput.setAttribute('required', 'required');
                discountInput.setAttribute('max', '100');
                discountInput.setAttribute('min', '0');
            }
        }

        function getSelectedProductIds(excludeElement) {
            const selectedIds = [];
            document.querySelectorAll('.product-select').forEach(select => {
                if (select !== excludeElement && select.value) {
                    selectedIds.push(select.value);
                }
            });
            return selectedIds;
        }

        function buildProductOptions(selectedValue, excludeElement) {
            const selectedIds = getSelectedProductIds(excludeElement);
            let optionsHtml = '<option value="">-- Chọn sản phẩm --</option>';

            allProducts.forEach(product => {
                if (product.value === selectedValue || !selectedIds.includes(product.value)) {
                    const selectedAttr = product.value === selectedValue ? ' selected' : '';
                    optionsHtml += `<option value="${product.value ?? ''}"${selectedAttr}>${product.text ?? ''}</option>`;
                }
            });

            return optionsHtml;
        }

        function updateAllDropdowns() {
            document.querySelectorAll('.product-select').forEach(select => {
                const currentValue = select.value;
                select.innerHTML = buildProductOptions(currentValue, select);
                select.value = currentValue;
            });
        }

        function addComboItem(productId = '', quantity = 1) {
            const container = document.getElementById('comboItemsContainer');
            const row = document.createElement('div');
            row.className = 'combo-item-row row g-2 mb-2 align-items-end';

            row.innerHTML = `
                <div class="col-md-7">
                    <label class="form-label">Sản phẩm</label>
                    <select name="ProductIds" class="form-select product-select" required>
                        ${buildProductOptions(productId)}
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Số lượng</label>
                    <input type="number" name="Quantities" class="form-control" min="1" value="${quantity ?? 1}" required />
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-danger w-100" onclick="removeComboItem(this)"><i class="fas fa-trash-alt"></i> Xóa</button>
                </div>`;

            container.appendChild(row);

            const select = row.querySelector('select[name="ProductIds"]');
            select.value = productId ?? '';
            const quantityInput = row.querySelector('input[name="Quantities"]');
            quantityInput.value = quantity ?? 1;

            updateAllDropdowns();
        }

        function removeComboItem(button) {
            const container = document.getElementById('comboItemsContainer');
            const items = container.getElementsByClassName('combo-item-row');
            if (items.length > 1) {
                button.closest('.combo-item-row').remove();
            } else {
                const row = button.closest('.combo-item-row');
                const select = row?.querySelector('select[name="ProductIds"]');
                const quantityInput = row?.querySelector('input[name="Quantities"]');
                if (select) {
                    select.value = '';
                }
                if (quantityInput) {
                    quantityInput.value = 1;
                }
            }
            updateAllDropdowns();
        }

        function clearAllComboItems(addDefault = true) {
            const container = document.getElementById('comboItemsContainer');
            container.innerHTML = '';
            if (addDefault) {
                addComboItem();
            } else {
                updateAllDropdowns();
            }
        }

        function triggerComboImport() {
            const input = document.getElementById('comboImportInput');
            if (input) {
                input.value = '';
                input.click();
            }
        }

        function handleComboImport(event) {
            const file = event.target?.files?.[0];
            if (!file) {
                return;
            }

            const extension = (file.name.split('.').pop() ?? '').toLowerCase();

            const processRows = (rows) => {
                if (!Array.isArray(rows) || !rows.length) {
                    alert('Không tìm thấy dữ liệu hợp lệ trong file.');
                    return;
                }

                const items = [];
                const seenProductIds = new Set();
                let headerHandled = false;

                rows.forEach(row => {
                    if (!Array.isArray(row) || row.every(cell => cell == null || String(cell).trim() === '')) {
                        return;
                    }

                    const rawProductId = row[0];
                    const rawQuantity = row[1];

                    const productIdText = rawProductId == null ? '' : String(rawProductId).trim();
                    if (!productIdText) {
                        return;
                    }

                    const quantityText = rawQuantity == null ? '' : String(rawQuantity).trim();
                    const normalizedQuantityHeader = quantityText.toLowerCase();
                    const normalizedProductHeader = productIdText.toLowerCase();

                    let matchedProduct = findProductByIdentifier(productIdText);

                    if (!headerHandled) {
                        const looksLikeHeader =
                            normalizedProductHeader.includes('product') ||
                            normalizedProductHeader.includes('mã') ||
                            normalizedProductHeader.includes('san pham') ||
                            normalizedProductHeader.includes('sản phẩm') ||
                            normalizedProductHeader.includes('id') ||
                            normalizedProductHeader.includes('code') ||
                            normalizedQuantityHeader.includes('quantity') ||
                            normalizedQuantityHeader.includes('số lượng') ||
                            normalizedQuantityHeader.includes('qty');

                        if (looksLikeHeader && !matchedProduct) {
                            headerHandled = true;
                            return;
                        }

                        headerHandled = true;
                    }

                    if (!matchedProduct || !matchedProduct.value) {
                        return;
                    }

                    const normalizedProductId = matchedProduct.value;

                    if (seenProductIds.has(normalizedProductId)) {
                        return;
                    }

                    const quantity = parsePositiveInteger(quantityText || rawQuantity);

                    if (!Number.isFinite(quantity) || quantity <= 0) {
                        return;
                    }

                    items.push({ productId: normalizedProductId, quantity });
                    seenProductIds.add(normalizedProductId);
                });

                if (!items.length) {
                    alert('Không tìm thấy sản phẩm hợp lệ trong file.');
                    return;
                }

                clearAllComboItems(false);
                items.forEach(item => addComboItem(item.productId, item.quantity));
                updateAllDropdowns();
            };

            if (extension === 'csv') {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const content = e.target?.result;
                    if (typeof content !== 'string') {
                        alert('Không thể đọc dữ liệu từ file.');
                        return;
                    }

                    const rows = content
                        .split(/\r?\n/)
                        .map(line => line.trim())
                        .filter(line => line.length > 0)
                        .map(line => line.split(/[;,\t]/).map(part => part.trim()));

                    processRows(rows);
                };

                reader.readAsText(file);
                return;
            }

            if (typeof XLSX === 'undefined') {
                alert('Không thể đọc file Excel trên trình duyệt này.');
                return;
            }

            const reader = new FileReader();
            reader.onload = (e) => {
                const data = e.target?.result;
                if (!data) {
                    alert('Không thể đọc dữ liệu từ file.');
                    return;
                }

                try {
                    const workbook = XLSX.read(data, { type: 'array' });
                    const firstSheetName = workbook.SheetNames[0];
                    if (!firstSheetName) {
                        alert('File không có dữ liệu.');
                        return;
                    }

                    const worksheet = workbook.Sheets[firstSheetName];
                    const rows = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '', blankrows: false });
                    processRows(rows);
                } catch (error) {
                    console.error(error);
                    alert('Không thể đọc dữ liệu từ file. Vui lòng kiểm tra lại định dạng.');
                }
            };

            reader.readAsArrayBuffer(file);
        }

        document.addEventListener('change', event => {
            if (event.target.classList.contains('product-select')) {
                updateAllDropdowns();
            }
        });

        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('DiscountType').addEventListener('change', toggleDiscountField);
            document.getElementById('comboImportInput')?.addEventListener('change', handleComboImport);
            toggleDiscountField();
            updateAllDropdowns();
        });
    </script>
}
