@{
    ViewData["Title"] = "Quản lý kho";
    Layout = "_AdminLayout";

    var canCreate = ViewData["CanCreate"] as bool? ?? false;
    var canUpdate = ViewData["CanUpdate"] as bool? ?? false;
    var canDelete = ViewData["CanDelete"] as bool? ?? false;
    var canView = ViewData["CanView"] as bool? ?? false;
}

<div class="container-fluid pt-4 px-4" id="warehouse-app"
     data-can-create="@(canCreate ? "true" : "false")"
     data-can-update="@(canUpdate ? "true" : "false")"
     data-can-delete="@(canDelete ? "true" : "false")"
     data-can-view="@(canView ? "true" : "false")">
    <div class="card shadow-sm">
        <div class="card-header bg-light d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
            <div>
                <h4 class="mb-0 text-primary">
                    <i class="fas fa-warehouse me-2"></i>@ViewData["Title"]
                </h4>
                <p class="mb-0 text-muted small">Quản lý thông tin kho để phục vụ nhập kho.</p>
            </div>
            <div class="d-flex flex-column flex-md-row align-items-md-center gap-2 ms-md-auto">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="search" class="form-control" id="warehouseSearch" placeholder="Tìm kiếm theo mã, tên, liên hệ" />
                </div>
                <button type="button" class="btn btn-outline-secondary" id="warehouseRefreshBtn">
                    <i class="fas fa-rotate-right me-1"></i>Tải lại
                </button>
                @if (canCreate)
                {
                    <button type="button" class="btn btn-primary" id="warehouseCreateBtn">
                        <i class="fas fa-plus me-1"></i>Thêm kho
                    </button>
                }
            </div>
        </div>
        <div class="card-body">
            <div id="warehouseAlert"></div>
            <div class="table-responsive">
                <table class="table table-hover align-middle" id="warehouseTable">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 8%;">Mã</th>
                            <th style="width: 20%;">Tên kho</th>
                            <th style="width: 15%;">Người liên hệ</th>
                            <th style="width: 12%;">Điện thoại</th>
                            <th style="width: 18%;">Email</th>
                            <th>Địa chỉ</th>
                            <th style="width: 18%;">Ghi chú</th>
                            @if (canUpdate || canDelete)
                            {
                                <th style="width: 110px;" class="text-center">Hành động</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="@(canUpdate || canDelete ? 8 : 7)" class="text-center py-4 text-muted">@(canView ? "Đang tải danh sách kho..." : "Bạn không có quyền xem danh sách kho.")</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<form id="warehouseAntiForgeryForm" class="d-none">
    @Html.AntiForgeryToken()
</form>

<div class="modal fade" id="warehouseModal" tabindex="-1" aria-labelledby="warehouseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="warehouseModalLabel">Thêm kho</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <form id="warehouseForm" novalidate>
                <div class="modal-body">
                    <div id="warehouseFormErrors" class="alert alert-danger d-none" role="alert"></div>
                    <div class="row g-3">
                        <div class="col-12">
                            <label for="warehouseName" class="form-label">Tên kho<span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="warehouseName" maxlength="255" required />
                        </div>
                        <div class="col-md-6">
                            <label for="warehouseContact" class="form-label">Người liên hệ</label>
                            <input type="text" class="form-control" id="warehouseContact" maxlength="255" />
                        </div>
                        <div class="col-md-6">
                            <label for="warehousePhone" class="form-label">Điện thoại</label>
                            <input type="tel" class="form-control" id="warehousePhone" maxlength="50" />
                        </div>
                        <div class="col-md-6">
                            <label for="warehouseEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="warehouseEmail" maxlength="255" />
                        </div>
                        <div class="col-md-6">
                            <label for="warehouseAddress" class="form-label">Địa chỉ</label>
                            <input type="text" class="form-control" id="warehouseAddress" maxlength="500" />
                        </div>
                        <div class="col-12">
                            <label for="warehouseNotes" class="form-label">Ghi chú</label>
                            <textarea class="form-control" id="warehouseNotes" rows="3" maxlength="1000"></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary" id="warehouseSubmitBtn">Lưu</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="warehouseDeleteModal" tabindex="-1" aria-labelledby="warehouseDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="warehouseDeleteModalLabel">Xóa kho</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Bạn có chắc chắn muốn xóa kho <strong id="warehouseDeleteName"></strong>? Hành động này không thể hoàn tác.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="warehouseDeleteConfirmBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const app = document.getElementById('warehouse-app');
            if (!app) {
                return;
            }

            const canView = app.dataset.canView === 'true';
            const canCreate = app.dataset.canCreate === 'true';
            const canUpdate = app.dataset.canUpdate === 'true';
            const canDelete = app.dataset.canDelete === 'true';

            const searchInput = document.getElementById('warehouseSearch');
            const refreshBtn = document.getElementById('warehouseRefreshBtn');
            const createBtn = document.getElementById('warehouseCreateBtn');
            const tableBody = document.querySelector('#warehouseTable tbody');
            const alertPlaceholder = document.getElementById('warehouseAlert');
            const antiForgeryTokenInput = document.querySelector('#warehouseAntiForgeryForm input[name="__RequestVerificationToken"]');

            const modalEl = document.getElementById('warehouseModal');
            const modal = modalEl ? new bootstrap.Modal(modalEl) : null;
            const modalLabel = document.getElementById('warehouseModalLabel');
            const form = document.getElementById('warehouseForm');
            const formErrors = document.getElementById('warehouseFormErrors');
            const submitBtn = document.getElementById('warehouseSubmitBtn');
            const nameInput = document.getElementById('warehouseName');
            const contactInput = document.getElementById('warehouseContact');
            const phoneInput = document.getElementById('warehousePhone');
            const emailInput = document.getElementById('warehouseEmail');
            const addressInput = document.getElementById('warehouseAddress');
            const notesInput = document.getElementById('warehouseNotes');

            const deleteModalEl = document.getElementById('warehouseDeleteModal');
            const deleteModal = deleteModalEl ? new bootstrap.Modal(deleteModalEl) : null;
            const deleteNameLabel = document.getElementById('warehouseDeleteName');
            const deleteConfirmBtn = document.getElementById('warehouseDeleteConfirmBtn');

            let warehouses = [];
            let filteredWarehouses = [];
            let editingId = null;

            function showAlert(message, type = 'success') {
                if (!alertPlaceholder) {
                    return;
                }

                const wrapper = document.createElement('div');
                wrapper.className = `alert alert-${type} alert-dismissible fade show`;
                wrapper.role = 'alert';
                wrapper.innerHTML = `
                    <div>${message}</div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Đóng"></button>`;

                alertPlaceholder.appendChild(wrapper);
            }

            function setLoading(message) {
                if (!tableBody) {
                    return;
                }

                tableBody.innerHTML = `
                    <tr>
                        <td colspan="${canUpdate || canDelete ? 8 : 7}" class="text-center py-4 text-muted">${message}</td>
                    </tr>`;
            }

            function clearFormErrors() {
                if (!formErrors) {
                    return;
                }

                formErrors.classList.add('d-none');
                formErrors.innerHTML = '';
            }

            function showFormErrors(errors) {
                if (!formErrors) {
                    return;
                }

                const messages = Array.isArray(errors) ? errors : [errors];
                formErrors.innerHTML = messages.filter(Boolean).map(message => `<div>${message}</div>`).join('');
                formErrors.classList.toggle('d-none', formErrors.innerHTML.trim().length === 0);
            }

            function resetForm() {
                editingId = null;
                form?.reset();
                clearFormErrors();
                [nameInput, contactInput, phoneInput, emailInput, addressInput, notesInput].forEach(input => {
                    if (input) {
                        input.classList.remove('is-invalid');
                    }
                });
            }

            function renderTable(items) {
                if (!tableBody) {
                    return;
                }

                if (!canView) {
                    setLoading('Bạn không có quyền xem danh sách kho.');
                    return;
                }

                if (!Array.isArray(items) || items.length === 0) {
                    setLoading('Không có kho phù hợp.');
                    return;
                }

                tableBody.innerHTML = items.map(warehouse => {
                    const actions = (canUpdate || canDelete)
                        ? `<td class="text-center">
                                ${canUpdate ? `<button type="button" class="btn btn-outline-primary btn-sm" data-action="edit" data-id="${warehouse.id}">
                                    <i class="fas fa-pen"></i>
                                </button>` : ''}
                                ${canDelete ? `<button type="button" class="btn btn-outline-danger btn-sm ms-1" data-action="delete" data-id="${warehouse.id}" data-name="${warehouse.name ?? ''}">
                                    <i class="fas fa-trash"></i>
                                </button>` : ''}
                           </td>`
                        : '';

                    return `
                        <tr>
                            <td class="fw-semibold">${warehouse.code ?? '—'}</td>
                            <td>${warehouse.name ?? '—'}</td>
                            <td>${warehouse.contactName ?? '—'}</td>
                            <td>${warehouse.phoneNumber ?? '—'}</td>
                            <td>${warehouse.email ?? '—'}</td>
                            <td>${warehouse.address ?? '—'}</td>
                            <td>${warehouse.notes ?? '—'}</td>
                            ${actions}
                        </tr>`;
                }).join('');
            }

            function applyFilters() {
                const query = searchInput?.value?.trim().toLowerCase() ?? '';
                if (!Array.isArray(warehouses)) {
                    filteredWarehouses = [];
                    renderTable(filteredWarehouses);
                    return;
                }

                filteredWarehouses = warehouses.filter(warehouse => {
                    if (!query) {
                        return true;
                    }

                    const codeMatch = warehouse.code?.toLowerCase().includes(query);
                    const nameMatch = warehouse.name?.toLowerCase().includes(query);
                    const contactMatch = warehouse.contactName?.toLowerCase().includes(query);
                    const phoneMatch = warehouse.phoneNumber?.toLowerCase().includes(query);
                    const emailMatch = warehouse.email?.toLowerCase().includes(query);
                    const addressMatch = warehouse.address?.toLowerCase().includes(query);

                    return codeMatch || nameMatch || contactMatch || phoneMatch || emailMatch || addressMatch;
                });

                renderTable(filteredWarehouses);
            }

            async function loadWarehouses(showSpinner = true) {
                if (!canView) {
                    return;
                }

                if (showSpinner) {
                    setLoading('Đang tải danh sách kho...');
                }

                try {
                    const url = new URL('/api/warehouses', window.location.origin);
                    const searchValue = searchInput?.value?.trim();
                    if (searchValue) {
                        url.searchParams.set('search', searchValue);
                    }

                    const response = await fetch(url);
                    if (!response.ok) {
                        if (response.status === 403) {
                            setLoading('Bạn không có quyền xem danh sách kho.');
                            return;
                        }

                        throw new Error('Failed to load warehouses');
                    }

                    warehouses = await response.json();
                    applyFilters();
                } catch (error) {
                    setLoading('Không thể tải danh sách kho.');
                    showAlert('Có lỗi xảy ra khi tải danh sách kho. Vui lòng thử lại sau.', 'danger');
                }
            }

            function openCreateModal() {
                if (!modal || !canCreate) {
                    return;
                }

                resetForm();
                if (modalLabel) {
                    modalLabel.textContent = 'Thêm kho';
                }
                if (submitBtn) {
                    submitBtn.textContent = 'Thêm mới';
                }
                modal.show();
            }

            function openEditModal(id) {
                if (!modal || !canUpdate) {
                    return;
                }

                const warehouse = warehouses.find(item => item.id === id);
                if (!warehouse) {
                    showAlert('Không tìm thấy kho.', 'warning');
                    return;
                }

                resetForm();
                editingId = id;
                if (modalLabel) {
                    modalLabel.textContent = 'Cập nhật kho';
                }
                if (submitBtn) {
                    submitBtn.textContent = 'Cập nhật';
                }

                if (nameInput) nameInput.value = warehouse.name ?? '';
                if (contactInput) contactInput.value = warehouse.contactName ?? '';
                if (phoneInput) phoneInput.value = warehouse.phoneNumber ?? '';
                if (emailInput) emailInput.value = warehouse.email ?? '';
                if (addressInput) addressInput.value = warehouse.address ?? '';
                if (notesInput) notesInput.value = warehouse.notes ?? '';

                modal.show();
            }

            async function submitForm(event) {
                event.preventDefault();
                if (!form || !modal) {
                    return;
                }

                clearFormErrors();

                const payload = {
                    name: nameInput?.value?.trim() ?? '',
                    contactName: contactInput?.value?.trim() || null,
                    phoneNumber: phoneInput?.value?.trim() || null,
                    email: emailInput?.value?.trim() || null,
                    address: addressInput?.value?.trim() || null,
                    notes: notesInput?.value?.trim() || null
                };

                const errors = [];
                if (!payload.name) {
                    errors.push('Vui lòng nhập tên kho.');
                    if (nameInput) {
                        nameInput.classList.add('is-invalid');
                    }
                }

                if (errors.length > 0) {
                    showFormErrors(errors);
                    return;
                }

                if (submitBtn) {
                    submitBtn.setAttribute('disabled', 'disabled');
                    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>Đang lưu...';
                }

                try {
                    const isEditing = editingId != null;
                    const url = isEditing ? `/api/warehouses/${editingId}` : '/api/warehouses';
                    const method = isEditing ? 'PUT' : 'POST';
                    const response = await fetch(url, {
                        method,
                        headers: {
                            'Content-Type': 'application/json',
                            ...(antiForgeryTokenInput?.value ? { 'RequestVerificationToken': antiForgeryTokenInput.value } : {})
                        },
                        body: JSON.stringify(payload)
                    });

                    if (response.ok) {
                        const warehouse = await response.json();
                        if (isEditing) {
                            warehouses = warehouses.map(item => item.id === warehouse.id ? warehouse : item);
                            showAlert('Cập nhật kho thành công.', 'success');
                        } else {
                            warehouses = [warehouse, ...warehouses];
                            showAlert('Thêm kho thành công.', 'success');
                        }

                        applyFilters();
                        modal.hide();
                        return;
                    }

                    if (response.status === 400 || response.status === 422) {
                        const problem = await response.json().catch(() => null);
                        const problemErrors = problem?.errors ? Object.values(problem.errors).flat() : [];
                        if (problemErrors.length > 0) {
                            showFormErrors(problemErrors);
                            return;
                        }

                        if (problem?.message) {
                            showFormErrors(problem.message);
                            return;
                        }
                    }

                    if (response.status === 403) {
                        showFormErrors('Bạn không có quyền thực hiện thao tác này.');
                        return;
                    }

                    showFormErrors('Không thể lưu kho. Vui lòng thử lại sau.');
                } catch (error) {
                    showFormErrors('Có lỗi xảy ra khi lưu kho. Vui lòng thử lại sau.');
                } finally {
                    if (submitBtn) {
                        submitBtn.innerHTML = editingId != null ? 'Cập nhật' : 'Thêm mới';
                        submitBtn.removeAttribute('disabled');
                    }
                }
            }

            function confirmDelete(id) {
                if (!deleteModal || !canDelete) {
                    return;
                }

                const warehouse = warehouses.find(item => item.id === id);
                if (warehouse && deleteNameLabel) {
                    deleteNameLabel.textContent = warehouse.name ?? '';
                }

                if (deleteConfirmBtn) {
                    deleteConfirmBtn.dataset.id = String(id);
                }
                deleteModal.show();
            }

            async function performDelete(id) {
                if (!canDelete) {
                    return;
                }

                if (!Number.isFinite(id) || id <= 0) {
                    return;
                }

                if (deleteConfirmBtn) {
                    deleteConfirmBtn.setAttribute('disabled', 'disabled');
                    deleteConfirmBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>Đang xóa...';
                }

                try {
                    const response = await fetch(`/api/warehouses/${id}`, {
                        method: 'DELETE',
                        headers: {
                            ...(antiForgeryTokenInput?.value ? { 'RequestVerificationToken': antiForgeryTokenInput.value } : {})
                        }
                    });

                    if (response.status === 204) {
                        warehouses = warehouses.filter(item => item.id !== id);
                        applyFilters();
                        showAlert('Xóa kho thành công.', 'success');
                        deleteModal?.hide();
                        return;
                    }

                    if (response.status === 403) {
                        showFormErrors('Bạn không có quyền xóa kho này.');
                        return;
                    }

                    showFormErrors('Không thể xóa kho. Vui lòng thử lại sau.');
                } catch (error) {
                    showFormErrors('Có lỗi xảy ra khi xóa kho. Vui lòng thử lại sau.');
                } finally {
                    if (deleteConfirmBtn) {
                        deleteConfirmBtn.innerHTML = 'Xóa';
                        deleteConfirmBtn.removeAttribute('disabled');
                    }
                }
            }

            searchInput?.addEventListener('input', () => applyFilters());
            refreshBtn?.addEventListener('click', () => loadWarehouses());
            createBtn?.addEventListener('click', openCreateModal);

            form?.addEventListener('submit', submitForm);

            tableBody?.addEventListener('click', event => {
                const target = event.target;
                if (!(target instanceof HTMLElement)) {
                    return;
                }

                const button = target.closest('button[data-action]');
                if (!button) {
                    return;
                }

                const action = button.dataset.action;
                const id = Number(button.dataset.id);

                if (action === 'edit') {
                    openEditModal(id);
                }

                if (action === 'delete') {
                    confirmDelete(id);
                }
            });

            deleteConfirmBtn?.addEventListener('click', () => {
                const id = Number(deleteConfirmBtn.dataset.id);
                performDelete(id);
            });

            loadWarehouses();
        })();
    </script>
}
