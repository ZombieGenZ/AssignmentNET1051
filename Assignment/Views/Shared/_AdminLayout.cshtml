@using Assignment.Extensions
@using Assignment.Models
@using Microsoft.AspNetCore.Identity
@using System.Collections.Generic
@using System.Linq
@using System.Security.Claims
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Hệ Thống Quản Lý</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link href="~/css/admin-layout.css" rel="stylesheet" />
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    @{
        var userDisplayName = "Người dùng";
        var userInitials = "?";
        var userRoles = new List<string>();
        var userIdentifier = string.Empty;

        if (SignInManager.IsSignedIn(User))
        {
            var appUser = await UserManager.GetUserAsync(User);

            userDisplayName = appUser?.FullName;

            if (string.IsNullOrWhiteSpace(userDisplayName))
            {
                userDisplayName = appUser?.UserName;
            }

            if (string.IsNullOrWhiteSpace(userDisplayName))
            {
                userDisplayName = appUser?.Email;
            }

            userDisplayName ??= "Người dùng";

            userIdentifier = !string.IsNullOrWhiteSpace(appUser?.Email)
            ? appUser!.Email!
            : !string.IsNullOrWhiteSpace(appUser?.UserName)
            ? appUser!.UserName!
            : userDisplayName;

            userInitials = string.Concat(userDisplayName
            .Split(' ', StringSplitOptions.RemoveEmptyEntries)
            .Where(s => s.Length > 0)
            .Select(s => char.ToUpperInvariant(s[0])));

            if (string.IsNullOrWhiteSpace(userInitials))
            {
                userInitials = "?";
            }

            userRoles = User.Claims
            .Where(claim => claim.Type == ClaimTypes.Role)
            .Select(claim => claim.Value)
            .Distinct()
            .ToList();
        }

        var primaryRole = userRoles.FirstOrDefault();
        if (string.IsNullOrWhiteSpace(primaryRole))
        {
            primaryRole = "Quản trị viên";
        }

        var canViewStatistics = User.HasPermission("ViewStatistics");
        var canManageCategories = User.HasAnyPermission("GetCategoryAll", "GetCategory");
        var canManageProducts = User.HasAnyPermission("GetProductAll", "GetProduct");
        var canManageProductExtras = User.HasAnyPermission("GetProductExtraAll", "GetProductExtra");
        var canManageUnits = User.HasAnyPermission("GetUnitAll", "GetUnit");
        var canManageMaterials = User.HasAnyPermission("GetMaterialAll", "GetMaterial");
        var canManageInventory = User.HasAnyPermission("ViewInventoryAll", "ViewInventory");
        var canManageReceiving = User.HasPermission("GetReceivingAll") || User.HasPermission("CreateReceiving");
        var canManageRecipes = User.HasAnyPermission("GetRecipeAll", "GetRecipe");
        var canManageCombos = User.HasAnyPermission("GetComboAll", "GetCombo");
        var canManageVouchers = User.HasAnyPermission("GetVoucherAll", "GetVoucher");
        var canManageRewards = User.HasAnyPermission("GetRewardAll", "GetReward");
        var canManageOrders = User.HasPermission("GetOrderAll");
        var canManageCustomers = User.HasAnyPermission("ViewCustomerAll", "ViewTopUserAll");
        var isSuperAdmin = User.HasPermission("superadmin");

        var hasProductGroup = canManageCategories || canManageProducts || canManageProductExtras || canManageRecipes || canManageCombos;
        var hasInventoryGroup = canManageUnits || canManageMaterials || canManageInventory || canManageReceiving;
        var hasSalesGroup = canManageOrders;
        var hasCustomerGroup = canManageVouchers || canManageRewards || canManageCustomers;
        var hasAdminGroup = isSuperAdmin;
    }
    <div class="admin-shell">
        <aside class="admin-sidebar" id="sidebar">
            <div class="admin-sidebar-header">
                <a asp-action="Index" asp-controller="Home" class="admin-brand">
                    <i class="fas fa-layer-group"></i>
                    Quản Lý
                </a>
            </div>
            @if (SignInManager.IsSignedIn(User))
            {
                <section class="admin-profile">
                    <div class="admin-profile-avatar">@userInitials</div>
                    <div class="admin-profile-meta">
                        <span class="admin-profile-name">@userDisplayName</span>
                        <span class="admin-profile-role">@primaryRole</span>
                        <span class="admin-profile-identifier">@userIdentifier</span>
                    </div>
                </section>
            }
            <nav class="admin-nav">
                <div class="admin-nav-section">
                    <span class="admin-nav-title" data-section="general">
                        Chung
                        <i class="fas fa-chevron-down"></i>
                    </span>
                    <ul class="admin-nav-list" data-list="general">
                        <li class="admin-nav-item">
                            <a asp-action="Index" asp-controller="Home" class="admin-nav-link">
                                <i class="fas fa-home"></i>
                                <span>Trang chủ</span>
                            </a>
                        </li>
                    </ul>
                </div>
                @if (canViewStatistics)
                {
                    var overviewLinks = new[]
                    {
                                (CanAccess: canViewStatistics, Action: "Index", Controller: "Statistics", Label: "Thống kê", Icon: "fa-chart-line")
                                };
                    if (overviewLinks.Any(link => link.CanAccess))
                    {
                        <div class="admin-nav-section">
                            <span class="admin-nav-title" data-section="overview">
                                Tổng quan
                                <i class="fas fa-chevron-down"></i>
                            </span>
                            <ul class="admin-nav-list" data-list="overview">
                                @foreach (var link in overviewLinks.Where(l => l.CanAccess))
                                {
                                    <li class="admin-nav-item">
                                        <a asp-action="@link.Action" asp-controller="@link.Controller" class="admin-nav-link">
                                            <i class="fas @link.Icon"></i>
                                            <span>@link.Label</span>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                }
                @if (hasProductGroup)
                {
                    var productLinks = new[]
                    {
                                (CanAccess: canManageCategories, Action: "Index", Controller: "Categories", Label: "Danh mục", Icon: "fa-folder"),
                                (CanAccess: canManageProducts, Action: "Index", Controller: "Products", Label: "Sản phẩm", Icon: "fa-coffee"),
                                (CanAccess: canManageProductExtras, Action: "Index", Controller: "ProductExtras", Label: "Sản phẩm bổ sung", Icon: "fa-plus-circle"),
                                (CanAccess: canManageRecipes, Action: "Index", Controller: "Recipes", Label: "Công thức sản phẩm", Icon: "fa-book"),
                                (CanAccess: canManageCombos, Action: "Index", Controller: "Combos", Label: "Combo", Icon: "fa-box")
                                };
                    if (productLinks.Any(link => link.CanAccess))
                    {
                        <div class="admin-nav-section">
                            <span class="admin-nav-title" data-section="products">
                                Sản phẩm &amp; danh mục
                                <i class="fas fa-chevron-down"></i>
                            </span>
                            <ul class="admin-nav-list" data-list="products">
                                @foreach (var link in productLinks.Where(l => l.CanAccess))
                                {
                                    <li class="admin-nav-item">
                                        <a asp-action="@link.Action" asp-controller="@link.Controller" class="admin-nav-link">
                                            <i class="fas @link.Icon"></i>
                                            <span>@link.Label</span>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                }
                @if (hasInventoryGroup)
                {
                    var inventoryLinks = new[]
                    {
                                (CanAccess: canManageUnits, Action: "Index", Controller: "Units", Label: "Đơn vị &amp; chuyển đổi", Icon: "fa-balance-scale"),
                                (CanAccess: canManageMaterials, Action: "Index", Controller: "Materials", Label: "Nguyên vật liệu", Icon: "fa-cubes"),
                                (CanAccess: canManageInventory, Action: "Index", Controller: "Inventories", Label: "Tồn kho", Icon: "fa-warehouse"),
                                (CanAccess: canManageReceiving, Action: "Index", Controller: "ReceivingNotes", Label: "Nhập kho", Icon: "fa-truck-loading")
                                };
                    if (inventoryLinks.Any(link => link.CanAccess))
                    {
                        <div class="admin-nav-section">
                            <span class="admin-nav-title" data-section="inventory">
                                Kho &amp; nguyên liệu
                                <i class="fas fa-chevron-down"></i>
                            </span>
                            <ul class="admin-nav-list" data-list="inventory">
                                @foreach (var link in inventoryLinks.Where(l => l.CanAccess))
                                {
                                    <li class="admin-nav-item">
                                        <a asp-action="@link.Action" asp-controller="@link.Controller" class="admin-nav-link">
                                            <i class="fas @link.Icon"></i>
                                            <span>@link.Label</span>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                }
                @if (hasSalesGroup)
                {
                    <div class="admin-nav-section">
                        <span class="admin-nav-title" data-section="sales">
                            Bán hàng
                            <i class="fas fa-chevron-down"></i>
                        </span>
                        <ul class="admin-nav-list" data-list="sales">
                            <li class="admin-nav-item">
                                <a asp-action="Manage" asp-controller="Order" class="admin-nav-link">
                                    <i class="fas fa-shopping-cart"></i>
                                    <span>Đơn hàng</span>
                                </a>
                            </li>
                        </ul>
                    </div>
                }
                @if (hasCustomerGroup)
                {
                    var customerLinks = new[]
                    {
                                (CanAccess: canManageVouchers, Action: "Index", Controller: "Vouchers", Label: "Mã giảm giá", Icon: "fa-ticket-alt"),
                                (CanAccess: canManageRewards, Action: "Index", Controller: "Rewards", Label: "Vật phẩm đổi thưởng", Icon: "fa-gift"),
                                (CanAccess: canManageCustomers, Action: "Index", Controller: "Customers", Label: "Khách hàng", Icon: "fa-users")
                                };
                    if (customerLinks.Any(link => link.CanAccess))
                    {
                        <div class="admin-nav-section">
                            <span class="admin-nav-title" data-section="customers">
                                Khách hàng &amp; ưu đãi
                                <i class="fas fa-chevron-down"></i>
                            </span>
                            <ul class="admin-nav-list" data-list="customers">
                                @foreach (var link in customerLinks.Where(l => l.CanAccess))
                                {
                                    <li class="admin-nav-item">
                                        <a asp-action="@link.Action" asp-controller="@link.Controller" class="admin-nav-link">
                                            <i class="fas @link.Icon"></i>
                                            <span>@link.Label</span>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                }
                @if (hasAdminGroup)
                {
                    <div class="admin-nav-section">
                        <span class="admin-nav-title" data-section="admin">
                            Quản trị hệ thống
                            <i class="fas fa-chevron-down"></i>
                        </span>
                        <ul class="admin-nav-list" data-list="admin">
                            <li class="admin-nav-item">
                                <a asp-action="Index" asp-controller="RoleManagement" class="admin-nav-link">
                                    <i class="fas fa-user-shield"></i>
                                    <span>Vai trò</span>
                                </a>
                            </li>
                            <li class="admin-nav-item">
                                <a asp-action="Index" asp-controller="UserManagement" class="admin-nav-link">
                                    <i class="fas fa-user-cog"></i>
                                    <span>Người dùng</span>
                                </a>
                            </li>
                        </ul>
                    </div>
                }
            </nav>
        </aside>

        <div class="overlay" id="overlay"></div>

        <div class="main-content">
            <header class="top-header">
                <button class="header-toggle" id="menuToggle" aria-label="Mở menu">
                    <i class="fas fa-bars"></i>
                </button>
                <div class="header-spacer"></div>
                <div class="header-right">
                    @if (SignInManager.IsSignedIn(User))
                    {
                        <div class="user-profile-container">
                            <button class="user-profile" id="userProfileToggle" type="button">
                                <span class="user-avatar">@userInitials</span>
                                <span class="user-name">@userDisplayName</span>
                                <i class="fas fa-chevron-down" aria-hidden="true"></i>
                            </button>
                            <div class="dropdown-menu-user" id="userDropdown">
                                <a class="dropdown-item" asp-area="Identity" asp-page="/Account/Manage/Index">
                                    <i class="fas fa-user-circle"></i> Hồ sơ
                                </a>
                                <a asp-action="Index" asp-controller="Home" class="dropdown-item">
                                    <i class="fas fa-home"></i> Trang chủ
                                </a>
                                <div class="dropdown-divider"></div>
                                <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                                    <button type="submit" class="dropdown-item">
                                        <i class="fas fa-sign-out-alt"></i> Đăng xuất
                                    </button>
                                </form>
                            </div>
                        </div>
                    }
                </div>
            </header>

            <div class="content-wrapper">
                <main role="main">
                    @RenderBody()
                </main>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('overlay');
            const menuToggle = document.getElementById('menuToggle');
            const adminNavLinks = document.querySelectorAll('.admin-nav-link');
            const currentPath = window.location.pathname.toLowerCase();

            // Active link highlighting
            adminNavLinks.forEach(link => {
                const href = link.getAttribute('href');
                if (!href) return;

                const linkPath = href.toLowerCase();
                if (linkPath !== '/' && currentPath.startsWith(linkPath)) {
                    link.classList.add('active');
                } else if (linkPath === '/' && currentPath === '/') {
                    link.classList.add('active');
                }
            });

            // Sidebar toggle
            const toggleSidebar = (shouldShow) => {
                if (!sidebar) return;

                if (shouldShow) {
                    sidebar.classList.add('open');
                    overlay?.classList.add('show');
                } else {
                    sidebar.classList.remove('open');
                    overlay?.classList.remove('show');
                }
            };

            menuToggle?.addEventListener('click', () => {
                const isOpen = sidebar?.classList.contains('open');
                toggleSidebar(!isOpen);
            });

            overlay?.addEventListener('click', () => toggleSidebar(false));

            // Collapsible sections
            const navTitles = document.querySelectorAll('.admin-nav-title');

            // Load saved collapse states from localStorage
            const loadCollapseStates = () => {
                navTitles.forEach(title => {
                    const section = title.getAttribute('data-section');
                    const list = document.querySelector(`[data-list="${section}"]`);
                    const isCollapsed = localStorage.getItem(`nav-${section}-collapsed`) === 'true';

                    if (isCollapsed && list) {
                        title.classList.add('collapsed');
                        list.classList.add('collapsed');
                    }
                });
            };

            // Toggle section collapse
            navTitles.forEach(title => {
                title.addEventListener('click', () => {
                    const section = title.getAttribute('data-section');
                    const list = document.querySelector(`[data-list="${section}"]`);

                    if (list) {
                        const isCollapsed = list.classList.contains('collapsed');

                        title.classList.toggle('collapsed');
                        list.classList.toggle('collapsed');

                        // Save state to localStorage
                        localStorage.setItem(`nav-${section}-collapsed`, !isCollapsed);
                    }
                });
            });

            // Initialize collapse states
            loadCollapseStates();

            // User dropdown
            const userProfileToggle = document.getElementById('userProfileToggle');
            const userDropdown = document.getElementById('userDropdown');

            userProfileToggle?.addEventListener('click', event => {
                event.stopPropagation();
                userDropdown?.classList.toggle('show');
            });

            window.addEventListener('click', event => {
                if (userDropdown?.classList.contains('show') && !userProfileToggle?.contains(event.target)) {
                    userDropdown.classList.remove('show');
                }
            });
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>