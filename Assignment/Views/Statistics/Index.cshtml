@using Assignment.Enums
@using Assignment.ViewModels.Statistics
@using System.Linq
@using System.Text.Json
@model StatisticsViewModel

@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Thống kê";
    var labelsJson = JsonSerializer.Serialize(Model.PrimarySeries.DataPoints.Select(p => p.Label));
    var primaryRevenueJson = JsonSerializer.Serialize(Model.PrimarySeries.DataPoints.Select(p => Math.Round(p.TotalBill, 2)));
    var compareRevenueJson = Model.CompareSeries != null
        ? JsonSerializer.Serialize(Model.CompareSeries.DataPoints.Select(p => Math.Round(p.TotalBill, 2)))
        : "null";

    string GetPeriodTypeLabel(StatisticsPeriodType type) => type switch
    {
        StatisticsPeriodType.Hour => "Theo giờ",
        StatisticsPeriodType.Day => "Theo ngày",
        StatisticsPeriodType.Month => "Theo tháng",
        StatisticsPeriodType.Quarter => "Theo quý",
        StatisticsPeriodType.Year => "Theo năm",
        _ => type.ToString()
    };

    var exportUrl = Url.Action("Export", new
    {
        Model.Filter.PeriodType,
        PrimaryStart = Model.Filter.PrimaryStart?.ToString("yyyy-MM-dd"),
        PrimaryEnd = Model.Filter.PrimaryEnd?.ToString("yyyy-MM-dd"),
        CompareStart = Model.CompareSeries != null ? Model.Filter.CompareStart?.ToString("yyyy-MM-dd") : null,
        CompareEnd = Model.CompareSeries != null ? Model.Filter.CompareEnd?.ToString("yyyy-MM-dd") : null
    });
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-1">Thống kê doanh thu</h1>
        <p class="text-muted mb-0">Bộ lọc @GetPeriodTypeLabel(Model.Filter.PeriodType).</p>
    </div>
    <a class="btn btn-outline-secondary" href="@exportUrl"><i class="fas fa-file-export me-2"></i>Xuất Excel</a>
</div>

<form class="row g-3 mb-4" method="get">
    <div class="col-md-3">
        <label asp-for="Filter.PeriodType" class="form-label">Kiểu thống kê</label>
        <select asp-for="Filter.PeriodType" class="form-select" asp-items="Html.GetEnumSelectList<StatisticsPeriodType>()" data-default-value="@((int)StatisticsPeriodType.Month)"></select>
    </div>
    <div class="col-md-3">
        <label asp-for="Filter.PrimaryStart" class="form-label">Bắt đầu</label>
        <input asp-for="Filter.PrimaryStart" class="form-control" type="date" />
    </div>
    <div class="col-md-3">
        <label asp-for="Filter.PrimaryEnd" class="form-label">Kết thúc</label>
        <input asp-for="Filter.PrimaryEnd" class="form-control" type="date" />
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <div class="d-flex w-100 gap-2 flex-wrap">
            <button class="btn btn-primary flex-fill" type="submit"><i class="fas fa-filter me-2"></i>Áp dụng bộ lọc</button>
            <button class="btn btn-outline-secondary flex-fill" type="button" id="resetPrimaryFilters"><i class="fas fa-rotate-left me-2"></i>Đặt lại</button>
        </div>
    </div>
    <div class="col-12">
        <div class="border-top pt-3 mt-2">
            <h2 class="h6 text-uppercase text-muted">So sánh</h2>
        </div>
    </div>
    <div class="col-md-3">
        <label asp-for="Filter.CompareStart" class="form-label">Bắt đầu (so sánh)</label>
        <input asp-for="Filter.CompareStart" class="form-control" type="date" />
        <div class="form-text">Để trống nếu không cần so sánh.</div>
    </div>
    <div class="col-md-3">
        <label asp-for="Filter.CompareEnd" class="form-label">Kết thúc (so sánh)</label>
        <input asp-for="Filter.CompareEnd" class="form-control" type="date" />
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button type="submit" class="btn btn-primary w-100"><i class="fas fa-chart-line me-2"></i>Áp dụng so sánh</button>
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button type="button" class="btn btn-outline-secondary w-100" id="resetCompareFilters"><i class="fas fa-rotate-left me-2"></i>Đặt lại so sánh</button>
    </div>
</form>

<div class="row g-4 mb-4">
    <div class="col-md-6">
        <div class="modern-stat-card card-revenue">
            <div class="stat-icon-wrapper">
                <i class="fas fa-coins"></i>
            </div>
            <div class="stat-content">
                <h2 class="stat-label">Tổng doanh thu</h2>
                <p class="stat-value">@Model.PrimarySeries.TotalBill.ToString("N0") đ</p>
                @if (Model.CompareSeries != null)
                {
                    var diff = Model.PrimarySeries.TotalBill - Model.CompareSeries.TotalBill;
                    var percentChange = Model.CompareSeries.TotalBill > 0 ? (diff / Model.CompareSeries.TotalBill * 100) : 0;
                    var isPositive = diff >= 0;
                    <div class="stat-comparison @(isPositive ? "positive" : "negative")">
                        <i class="fas fa-@(isPositive ? "arrow-up" : "arrow-down")"></i>
                        <span>@Math.Abs(percentChange).ToString("F1")%</span>
                        <span class="comparison-text">so với kỳ trước</span>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="modern-stat-card card-quantity">
            <div class="stat-icon-wrapper">
                <i class="fas fa-shopping-cart"></i>
            </div>
            <div class="stat-content">
                <h2 class="stat-label">Tổng số lượng</h2>
                <p class="stat-value">@Model.PrimarySeries.TotalQuantity</p>
                @if (Model.CompareSeries != null)
                {
                    var diff = Model.PrimarySeries.TotalQuantity - Model.CompareSeries.TotalQuantity;
                    var percentChange = Model.CompareSeries.TotalQuantity > 0 ? ((double)diff / Model.CompareSeries.TotalQuantity * 100) : 0;
                    var isPositive = diff >= 0;
                    <div class="stat-comparison @(isPositive ? "positive" : "negative")">
                        <i class="fas fa-@(isPositive ? "arrow-up" : "arrow-down")"></i>
                        <span>@Math.Abs(percentChange).ToString("F1")%</span>
                        <span class="comparison-text">so với kỳ trước</span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="modern-chart-card">
    <div class="chart-header">
        <div>
            <h2 class="chart-title">Biểu đồ doanh thu</h2>
            <p class="chart-subtitle">Theo dõi xu hướng doanh thu theo thời gian</p>
        </div>
        <div class="chart-legend-indicator">
            <span class="legend-dot primary"></span>
            <span>Kỳ chính</span>
            @if (Model.CompareSeries != null)
            {
                <span class="legend-dot compare"></span>
                <span>Kỳ so sánh</span>
            }
        </div>
    </div>
    <div class="chart-container">
        <canvas id="revenueChart"></canvas>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-body">
        <h2 class="card-title h5">Chi tiết thống kê</h2>
        <div class="table-responsive">
            <table class="table table-striped align-middle">
                <thead>
                    <tr>
                        <th>Nhãn</th>
                        <th class="text-end">Số lượng</th>
                        <th class="text-end">Doanh thu</th>
                        @if (Model.CompareSeries != null)
                        {
                            <th class="text-end">Số lượng (so sánh)</th>
                            <th class="text-end">Doanh thu (so sánh)</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (var i = 0; i < Model.PrimarySeries.DataPoints.Count; i++)
                    {
                        var primary = Model.PrimarySeries.DataPoints[i];
                        <tr>
                            <td>@primary.Label</td>
                            <td class="text-end">@primary.TotalQuantity</td>
                            <td class="text-end">@primary.TotalBill.ToString("N0") đ</td>
                            @if (Model.CompareSeries != null)
                            {
                                var comparePoint = Model.CompareSeries.DataPoints.ElementAtOrDefault(i);
                                if (comparePoint != null)
                                {
                                    <td class="text-end">@comparePoint.TotalQuantity</td>
                                    <td class="text-end">@comparePoint.TotalBill.ToString("N0") đ</td>
                                }
                                else
                                {
                                    <td class="text-end">0</td>
                                    <td class="text-end">0 đ</td>
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .modern-stat-card {
            background: #ffffff;
            border-radius: 16px;
            padding: 1.75rem;
            color: #0f172a;
            box-shadow: 0 8px 24px rgba(15, 23, 42, 0.08);
            border: 1px solid rgba(15, 23, 42, 0.08);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .modern-stat-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 32px rgba(15, 23, 42, 0.12);
        }

        .card-revenue {
            border-left: 4px solid #2563eb;
        }

        .card-quantity {
            border-left: 4px solid #f97316;
        }

        .stat-icon-wrapper {
            width: 56px;
            height: 56px;
            background: #e8f0ff;
            border-radius: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1.25rem;
            color: #1d4ed8;
        }

        .card-quantity .stat-icon-wrapper {
            background: #fff1e6;
            color: #c2410c;
        }

        .stat-icon-wrapper i {
            font-size: 1.5rem;
        }

        .stat-content .stat-label {
            font-size: 0.9rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.08em;
            color: #475569;
            margin-bottom: 0.75rem;
        }

        .stat-content .stat-value {
            font-size: 2.25rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            line-height: 1;
        }

        .stat-comparison {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background: rgba(37, 99, 235, 0.08);
            padding: 0.45rem 0.9rem;
            border-radius: 999px;
            font-size: 0.9rem;
            font-weight: 600;
            color: #1d4ed8;
            margin-top: 0.75rem;
        }

        .card-quantity .stat-comparison {
            background: rgba(249, 115, 22, 0.08);
            color: #c2410c;
        }

        .stat-comparison.negative {
            background: rgba(239, 68, 68, 0.12);
            color: #b91c1c;
        }

        .comparison-text {
            opacity: 0.85;
            font-size: 0.85rem;
        }

        .modern-chart-card {
            background: #ffffff;
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 6px 24px rgba(15, 23, 42, 0.08);
            margin-bottom: 2rem;
            border: 1px solid rgba(15, 23, 42, 0.08);
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .chart-title {
            font-size: 1.45rem;
            font-weight: 700;
            color: #0f172a;
            margin: 0;
        }

        .chart-subtitle {
            color: #64748b;
            font-size: 0.9rem;
            margin: 0.25rem 0 0 0;
        }

        .chart-legend-indicator {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 0.9rem;
            color: #475569;
            font-weight: 500;
        }

        .legend-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
        }

        .legend-dot.primary {
            background: #2563eb;
        }

        .legend-dot.compare {
            background: #f97316;
        }

        .chart-container {
            position: relative;
            height: 400px;
            background: #ffffff;
            border-radius: 12px;
            padding: 1.5rem;
            border: 1px solid rgba(15, 23, 42, 0.08);
        }

        @@media (max-width: 768px) {
            .chart-header {
                flex-direction: column;
                align-items: flex-start;
            }

            .stat-content .stat-value {
                font-size: 2rem;
            }
        }
    </style>
    <script>
        const revenueLabels = @Html.Raw(labelsJson);
        const primaryRevenue = @Html.Raw(primaryRevenueJson);
        const compareRevenue = @Html.Raw(compareRevenueJson);
        const canvas = document.getElementById('revenueChart');
        const ctx = canvas.getContext('2d');

        const numberFormatter = new Intl.NumberFormat('vi-VN');

        const datasets = [
            {
                label: 'Doanh thu',
                data: primaryRevenue,
                fill: false,
                backgroundColor: '#2563eb',
                borderColor: '#2563eb',
                borderWidth: 3,
                pointRadius: 5,
                pointHoverRadius: 7,
                pointBackgroundColor: '#2563eb',
                pointBorderColor: '#ffffff',
                pointBorderWidth: 2,
                tension: 0.35
            }
        ];

        if (Array.isArray(compareRevenue)) {
            datasets.push({
                label: 'Doanh thu (so sánh)',
                data: compareRevenue,
                fill: false,
                backgroundColor: '#f97316',
                borderColor: '#f97316',
                borderWidth: 3,
                borderDash: [8, 6],
                pointRadius: 5,
                pointHoverRadius: 7,
                pointBackgroundColor: '#f97316',
                pointBorderColor: '#ffffff',
                pointBorderWidth: 2,
                tension: 0.35
            });
        }

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: revenueLabels,
                datasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                layout: {
                    padding: {
                        top: 18,
                        right: 24,
                        bottom: 12,
                        left: 18
                    }
                },
                interaction: {
                    mode: 'index',
                    intersect: false
                },
                scales: {
                    x: {
                        grid: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            color: '#0f172a',
                            font: {
                                weight: '600'
                            },
                            padding: 12
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#1f2937',
                            padding: 12,
                            callback: (value) => `${numberFormatter.format(value)} đ`
                        },
                        grid: {
                            color: 'rgba(148, 163, 184, 0.28)',
                            drawBorder: false
                        }
                    }
                },
                elements: {
                    point: {
                        hitRadius: 12
                    },
                    line: {
                        borderJoinStyle: 'round',
                        borderCapStyle: 'round'
                    }
                },
                plugins: {
                    legend: {
                        align: 'start',
                        labels: {
                            usePointStyle: true,
                            pointStyle: 'circle',
                            color: '#0f172a',
                            font: {
                                weight: '600'
                            },
                            padding: 20
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(15, 23, 42, 0.92)',
                        titleColor: '#f8fafc',
                        bodyColor: '#e2e8f0',
                        displayColors: false,
                        cornerRadius: 12,
                        padding: 14,
                        callbacks: {
                            label: (context) => `${context.dataset.label}: ${numberFormatter.format(context.parsed.y)} đ`
                        }
                    }
                }
            },
            plugins: []
        });

        const setupResetButtons = () => {
            const primaryReset = document.getElementById('resetPrimaryFilters');
            const compareReset = document.getElementById('resetCompareFilters');
            const periodSelect = document.querySelector('[name="Filter.PeriodType"]');
            const primaryStart = document.querySelector('[name="Filter.PrimaryStart"]');
            const primaryEnd = document.querySelector('[name="Filter.PrimaryEnd"]');
            const compareStart = document.querySelector('[name="Filter.CompareStart"]');
            const compareEnd = document.querySelector('[name="Filter.CompareEnd"]');

            if (primaryReset) {
                primaryReset.addEventListener('click', function () {
                    if (primaryStart) primaryStart.value = '';
                    if (primaryEnd) primaryEnd.value = '';
                    if (periodSelect) {
                        const defaultValue = periodSelect.dataset.defaultValue;
                        if (typeof defaultValue !== 'undefined') {
                            periodSelect.value = defaultValue;
                        }
                    }
                });
            }

            if (compareReset) {
                compareReset.addEventListener('click', function () {
                    if (compareStart) compareStart.value = '';
                    if (compareEnd) compareEnd.value = '';
                });
            }
        };

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', setupResetButtons);
        } else {
            setupResetButtons();
        }
    </script>
}
