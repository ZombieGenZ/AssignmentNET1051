@using Assignment.Enums
@using Assignment.ViewModels.Statistics
@using System.Linq
@using System.Text.Json
@model StatisticsViewModel

@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Thống kê";
    var labelsJson = JsonSerializer.Serialize(Model.PrimarySeries.DataPoints.Select(p => p.Label));
    var primaryRevenueJson = JsonSerializer.Serialize(Model.PrimarySeries.DataPoints.Select(p => Math.Round(p.TotalBill, 2)));
    var compareRevenueJson = Model.CompareSeries != null
        ? JsonSerializer.Serialize(Model.CompareSeries.DataPoints.Select(p => Math.Round(p.TotalBill, 2)))
        : "null";

    string GetPeriodTypeLabel(StatisticsPeriodType type) => type switch
    {
        StatisticsPeriodType.Hour => "Theo giờ",
        StatisticsPeriodType.Day => "Theo ngày",
        StatisticsPeriodType.Month => "Theo tháng",
        StatisticsPeriodType.Quarter => "Theo quý",
        StatisticsPeriodType.Year => "Theo năm",
        _ => type.ToString()
    };

    var exportUrl = Url.Action("Export", new
    {
        Model.Filter.PeriodType,
        PrimaryStart = Model.Filter.PrimaryStart?.ToString("yyyy-MM-dd"),
        PrimaryEnd = Model.Filter.PrimaryEnd?.ToString("yyyy-MM-dd"),
        CompareStart = Model.CompareSeries != null ? Model.Filter.CompareStart?.ToString("yyyy-MM-dd") : null,
        CompareEnd = Model.CompareSeries != null ? Model.Filter.CompareEnd?.ToString("yyyy-MM-dd") : null
    });
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-1">Thống kê doanh thu</h1>
        <p class="text-muted mb-0">Bộ lọc @GetPeriodTypeLabel(Model.Filter.PeriodType).</p>
    </div>
    <a class="btn btn-outline-secondary" href="@exportUrl"><i class="fas fa-file-export me-2"></i>Xuất Excel</a>
</div>

<form class="row g-3 mb-4" method="get">
    <div class="col-md-3">
        <label asp-for="Filter.PeriodType" class="form-label">Kiểu thống kê</label>
        <select asp-for="Filter.PeriodType" class="form-select" asp-items="Html.GetEnumSelectList<StatisticsPeriodType>()" data-default-value="@((int)StatisticsPeriodType.Month)"></select>
    </div>
    <div class="col-md-3">
        <label asp-for="Filter.PrimaryStart" class="form-label">Bắt đầu</label>
        <input asp-for="Filter.PrimaryStart" class="form-control" type="date" />
    </div>
    <div class="col-md-3">
        <label asp-for="Filter.PrimaryEnd" class="form-label">Kết thúc</label>
        <input asp-for="Filter.PrimaryEnd" class="form-control" type="date" />
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <div class="d-flex w-100 gap-2 flex-wrap">
            <button class="btn btn-primary flex-fill" type="submit"><i class="fas fa-filter me-2"></i>Áp dụng bộ lọc</button>
            <button class="btn btn-outline-secondary flex-fill" type="button" id="resetPrimaryFilters"><i class="fas fa-rotate-left me-2"></i>Đặt lại</button>
        </div>
    </div>
    <div class="col-12">
        <div class="border-top pt-3 mt-2">
            <h2 class="h6 text-uppercase text-muted">So sánh</h2>
        </div>
    </div>
    <div class="col-md-3">
        <label asp-for="Filter.CompareStart" class="form-label">Bắt đầu (so sánh)</label>
        <input asp-for="Filter.CompareStart" class="form-control" type="date" />
    </div>
    <div class="col-md-3">
        <label asp-for="Filter.CompareEnd" class="form-label">Kết thúc (so sánh)</label>
        <input asp-for="Filter.CompareEnd" class="form-control" type="date" />
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <div class="form-text">Để trống nếu không cần so sánh.</div>
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button type="button" class="btn btn-outline-secondary w-100" id="resetCompareFilters"><i class="fas fa-rotate-left me-2"></i>Đặt lại so sánh</button>
    </div>
</form>

<div class="row g-3 mb-4">
    <div class="col-md-6">
        <div class="card shadow-sm h-100">
            <div class="card-body">
                <h2 class="card-title h6 text-muted text-uppercase">Tổng doanh thu</h2>
                <p class="display-6 fw-semibold text-primary">@Model.PrimarySeries.TotalBill.ToString("N0") đ</p>
                @if (Model.CompareSeries != null)
                {
                    <p class="mb-0 text-muted">So sánh: @Model.CompareSeries.TotalBill.ToString("N0") đ</p>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card shadow-sm h-100">
            <div class="card-body">
                <h2 class="card-title h6 text-muted text-uppercase">Tổng số lượng</h2>
                <p class="display-6 fw-semibold">@Model.PrimarySeries.TotalQuantity</p>
                @if (Model.CompareSeries != null)
                {
                    <p class="mb-0 text-muted">So sánh: @Model.CompareSeries.TotalQuantity</p>
                }
            </div>
        </div>
    </div>
</div>

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <h2 class="card-title h5">Biểu đồ doanh thu</h2>
        <div class="position-relative" style="height: 360px;">
            <canvas id="revenueChart"></canvas>
        </div>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-body">
        <h2 class="card-title h5">Chi tiết thống kê</h2>
        <div class="table-responsive">
            <table class="table table-striped align-middle">
                <thead>
                    <tr>
                        <th>Nhãn</th>
                        <th class="text-end">Số lượng</th>
                        <th class="text-end">Doanh thu</th>
                        @if (Model.CompareSeries != null)
                        {
                            <th class="text-end">Số lượng (so sánh)</th>
                            <th class="text-end">Doanh thu (so sánh)</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (var i = 0; i < Model.PrimarySeries.DataPoints.Count; i++)
                    {
                        var primary = Model.PrimarySeries.DataPoints[i];
                        <tr>
                            <td>@primary.Label</td>
                            <td class="text-end">@primary.TotalQuantity</td>
                            <td class="text-end">@primary.TotalBill.ToString("N0") đ</td>
                            @if (Model.CompareSeries != null)
                            {
                                var comparePoint = Model.CompareSeries.DataPoints.ElementAtOrDefault(i);
                                if (comparePoint != null)
                                {
                                    <td class="text-end">@comparePoint.TotalQuantity</td>
                                    <td class="text-end">@comparePoint.TotalBill.ToString("N0") đ</td>
                                }
                                else
                                {
                                    <td class="text-end">0</td>
                                    <td class="text-end">0 đ</td>
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const revenueLabels = @Html.Raw(labelsJson);
        const primaryRevenue = @Html.Raw(primaryRevenueJson);
        const compareRevenue = @Html.Raw(compareRevenueJson);
        const canvas = document.getElementById('revenueChart');
        const ctx = canvas.getContext('2d');

        const numberFormatter = new Intl.NumberFormat('vi-VN');

        const chartAreaBackground = {
            id: 'revenueChartBackground',
            beforeDraw: (chart) => {
                const { ctx, chartArea } = chart;
                if (!chartArea) {
                    return;
                }

                const { top, bottom, left, right } = chartArea;
                const gradient = ctx.createLinearGradient(0, top, 0, bottom);
                gradient.addColorStop(0, '#f8fafc');
                gradient.addColorStop(1, '#eef2ff');

                ctx.save();
                ctx.fillStyle = gradient;
                ctx.fillRect(left - 16, top - 24, (right - left) + 32, (bottom - top) + 40);
                ctx.restore();
            }
        };

        const createAreaGradient = (context, stops) => {
            const chart = context.chart;
            const { ctx, chartArea } = chart;
            const fallbackColor = stops && stops.length > 0 ? stops[0][1] : 'rgba(37, 99, 235, 0.2)';
            if (!chartArea) {
                return fallbackColor;
            }

            const gradient = ctx.createLinearGradient(0, chartArea.top, 0, chartArea.bottom);
            stops.forEach(stop => gradient.addColorStop(stop[0], stop[1]));
            return gradient;
        };

        const createLineGradient = (context, stops) => {
            const chart = context.chart;
            const { ctx, chartArea } = chart;
            const fallbackColor = stops && stops.length > 0 ? stops[stops.length - 1][1] : '#2563eb';
            if (!chartArea) {
                return fallbackColor;
            }

            const gradient = ctx.createLinearGradient(chartArea.left, 0, chartArea.right, 0);
            stops.forEach(stop => gradient.addColorStop(stop[0], stop[1]));
            return gradient;
        };

        const datasets = [
            {
                label: 'Doanh thu',
                data: primaryRevenue,
                fill: true,
                backgroundColor: (context) => createAreaGradient(context, [
                    [0, 'rgba(37, 99, 235, 0.35)'],
                    [1, 'rgba(37, 99, 235, 0.04)']
                ]),
                borderColor: (context) => createLineGradient(context, [
                    [0, '#2563eb'],
                    [1, '#38bdf8']
                ]),
                borderWidth: 3,
                pointRadius: 6,
                pointHoverRadius: 8,
                pointBackgroundColor: '#1d4ed8',
                pointBorderColor: '#ffffff',
                pointBorderWidth: 2,
                tension: 0.35
            }
        ];

        if (Array.isArray(compareRevenue)) {
            datasets.push({
                label: 'Doanh thu (so sánh)',
                data: compareRevenue,
                fill: true,
                backgroundColor: (context) => createAreaGradient(context, [
                    [0, 'rgba(249, 115, 22, 0.28)'],
                    [1, 'rgba(249, 115, 22, 0.04)']
                ]),
                borderColor: (context) => createLineGradient(context, [
                    [0, '#f97316'],
                    [1, '#fb7185']
                ]),
                borderWidth: 3,
                borderDash: [8, 6],
                pointRadius: 6,
                pointHoverRadius: 8,
                pointBackgroundColor: '#f97316',
                pointBorderColor: '#ffffff',
                pointBorderWidth: 2,
                tension: 0.35
            });
        }

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: revenueLabels,
                datasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                layout: {
                    padding: {
                        top: 18,
                        right: 24,
                        bottom: 12,
                        left: 18
                    }
                },
                interaction: {
                    mode: 'index',
                    intersect: false
                },
                scales: {
                    x: {
                        grid: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            color: '#0f172a',
                            font: {
                                weight: '600'
                            },
                            padding: 12
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#1f2937',
                            padding: 12,
                            callback: (value) => `${numberFormatter.format(value)} đ`
                        },
                        grid: {
                            color: 'rgba(148, 163, 184, 0.28)',
                            drawBorder: false
                        }
                    }
                },
                elements: {
                    point: {
                        hitRadius: 12
                    },
                    line: {
                        borderJoinStyle: 'round',
                        borderCapStyle: 'round'
                    }
                },
                plugins: {
                    legend: {
                        align: 'start',
                        labels: {
                            usePointStyle: true,
                            pointStyle: 'circle',
                            color: '#0f172a',
                            font: {
                                weight: '600'
                            },
                            padding: 20
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(15, 23, 42, 0.92)',
                        titleColor: '#f8fafc',
                        bodyColor: '#e2e8f0',
                        displayColors: false,
                        cornerRadius: 12,
                        padding: 14,
                        callbacks: {
                            label: (context) => `${context.dataset.label}: ${numberFormatter.format(context.parsed.y)} đ`
                        }
                    }
                }
            },
            plugins: [chartAreaBackground]
        });

        const setupResetButtons = () => {
            const primaryReset = document.getElementById('resetPrimaryFilters');
            const compareReset = document.getElementById('resetCompareFilters');
            const periodSelect = document.querySelector('[name="Filter.PeriodType"]');
            const primaryStart = document.querySelector('[name="Filter.PrimaryStart"]');
            const primaryEnd = document.querySelector('[name="Filter.PrimaryEnd"]');
            const compareStart = document.querySelector('[name="Filter.CompareStart"]');
            const compareEnd = document.querySelector('[name="Filter.CompareEnd"]');

            if (primaryReset) {
                primaryReset.addEventListener('click', function () {
                    if (primaryStart) primaryStart.value = '';
                    if (primaryEnd) primaryEnd.value = '';
                    if (periodSelect) {
                        const defaultValue = periodSelect.dataset.defaultValue;
                        if (typeof defaultValue !== 'undefined') {
                            periodSelect.value = defaultValue;
                        }
                    }
                });
            }

            if (compareReset) {
                compareReset.addEventListener('click', function () {
                    if (compareStart) compareStart.value = '';
                    if (compareEnd) compareEnd.value = '';
                });
            }
        };

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', setupResetButtons);
        } else {
            setupResetButtons();
        }
    </script>
}
