@{
    ViewData["Title"] = "Quản lý công thức sản phẩm";
    Layout = "_AdminLayout";

    var canCreate = ViewData["CanCreate"] as bool? ?? false;
    var canUpdate = ViewData["CanUpdate"] as bool? ?? false;
    var canDelete = ViewData["CanDelete"] as bool? ?? false;
    var canView = ViewData["CanView"] as bool? ?? false;
}

@section Styles {
    <style>
        #recipeModal .modal-dialog {
            max-width: 980px;
        }

        #recipeModal .modal-content {
            display: flex;
            flex-direction: column;
            max-height: calc(100vh - var(--bs-modal-margin) * 2);
        }

        #recipeModal form {
            display: flex;
            flex-direction: column;
            flex: 1 1 auto;
            min-height: 0;
        }

        #recipeModal .modal-body {
            flex: 1 1 auto;
            overflow-y: auto;
            min-height: 0;
        }

        #recipeModal .modal-footer {
            flex-shrink: 0;
        }

        .recipe-detail-row {
            border: 1px solid var(--bs-border-color);
            border-radius: 0.75rem;
            padding: 1rem;
            margin-bottom: 1rem;
            background-color: var(--bs-light);
        }

        .recipe-detail-row:last-child {
            margin-bottom: 0;
        }

        .recipe-detail-row .btn {
            min-width: 42px;
        }

        .recipe-cost-preview {
            background-color: var(--bs-light);
            border-radius: 0.75rem;
            padding: 1rem;
        }

        .recipe-cost-preview table {
            margin-bottom: 0;
        }

        .text-truncate-2 {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
    </style>
}

<div class="container-fluid pt-4 px-4">
    <div class="card shadow-sm" id="recipe-app"
         data-can-create="@(canCreate ? "true" : "false")"
         data-can-update="@(canUpdate ? "true" : "false")"
         data-can-delete="@(canDelete ? "true" : "false")"
         data-can-view="@(canView ? "true" : "false")">
        <div class="card-header bg-light">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                <div>
                    <h4 class="mb-1 text-primary">
                        <i class="fas fa-utensils me-2"></i>@ViewData["Title"]
                    </h4>
                </div>
                @if (canCreate)
                {
                    <button type="button" class="btn btn-primary" id="createRecipeBtn">
                        <i class="fas fa-plus me-2"></i>Thêm công thức
                    </button>
                }
            </div>
        </div>
        <div class="card-body">
            <div id="recipeAlertPlaceholder"></div>
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 mb-3">
                <div class="text-muted small" id="recipeTableStatus">@(canView ? "Đang tải dữ liệu công thức..." : "Bạn không có quyền xem danh sách công thức.")</div>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="refreshRecipesBtn">
                        <i class="fas fa-rotate-right me-1"></i>Tải lại
                    </button>
                </div>
            </div>
            <div class="filter-toolbar mb-4" id="recipeFilters">
                <div class="row g-3 align-items-end">
                    <div class="col-12 col-lg-5">
                        <label class="form-label filter-label" for="recipeSearchInput">Tìm kiếm</label>
                        <div class="filter-input-icon">
                            <i class="fas fa-search filter-icon"></i>
                            <input type="search" class="form-control" id="recipeSearchInput" placeholder="Tên hoặc mô tả công thức" />
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-3">
                        <label class="form-label filter-label" for="recipeOutputUnitFilter">Đơn vị đầu ra</label>
                        <select id="recipeOutputUnitFilter" class="form-select">
                            <option value="">Tất cả đơn vị</option>
                        </select>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-2 d-flex align-items-end">
                        <button type="button" class="btn btn-outline-secondary w-100" id="recipeResetFilters">
                            <i class="fas fa-eraser me-1"></i>Xóa lọc
                        </button>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Tên công thức</th>
                            <th style="width: 220px;">Mô tả</th>
                            <th style="width: 160px;">Đơn vị đầu ra</th>
                            <th style="width: 160px;" class="text-center">Thời gian chuẩn bị</th>
                            <th style="width: 180px;" class="text-end">Tổng chi phí (VNĐ)</th>
                            <th style="width: 160px;" class="text-center">Nguyên vật liệu</th>
                            <th style="width: 160px;" class="text-center">Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="recipesTableBody">
                        <tr>
                            <td colspan="7" class="text-center py-4 text-muted">@(canView ? "Đang tải dữ liệu..." : "Không có dữ liệu để hiển thị.")</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<form id="recipeAntiForgeryForm" class="d-none">
    @Html.AntiForgeryToken()
</form>
<div class="modal fade" id="recipeModal" tabindex="-1" aria-labelledby="recipeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="recipeModalLabel">Thêm công thức</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="recipeForm" novalidate>
                <input type="hidden" id="recipeId" />
                <div class="modal-body">
                    <div id="recipeFormErrors" class="alert alert-danger d-none" role="alert"></div>
                    <div class="row g-3 mb-3">
                        <div class="col-12 col-lg-6">
                            <label for="recipeName" class="form-label">Tên công thức<span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="recipeName" maxlength="200" required />
                        </div>
                        <div class="col-12 col-lg-6">
                            <label for="recipeOutputUnit" class="form-label">Đơn vị đầu ra<span class="text-danger">*</span></label>
                            <select id="recipeOutputUnit" class="form-select" required></select>
                        </div>
                    </div>
                    <div class="row g-3 mb-3">
                        <div class="col-12 col-lg-8">
                            <label for="recipeDescription" class="form-label">Mô tả</label>
                            <textarea class="form-control" id="recipeDescription" rows="2" maxlength="1000"></textarea>
                        </div>
                        <div class="col-12 col-lg-4">
                            <label for="recipePreparationTime" class="form-label">Thời gian chuẩn bị (phút)</label>
                            <input type="number" class="form-control" id="recipePreparationTime" min="0" step="1" placeholder="0" />
                        </div>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0 text-primary">Nguyên vật liệu<span class="text-danger">*</span></h6>
                        <button type="button" class="btn btn-outline-primary btn-sm" id="addRecipeDetailBtn">
                            <i class="fas fa-plus me-1"></i>Thêm nguyên vật liệu
                        </button>
                    </div>
                    <div id="recipeDetailList" class="mb-4"></div>
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="mb-0 text-primary">Tính toán chi phí</h6>
                        <button type="button" class="btn btn-outline-success btn-sm" id="calculateRecipeCostBtn">
                            <i class="fas fa-calculator me-1"></i>Tính toán chi phí
                        </button>
                    </div>
                    <div id="recipeCostPreview" class="recipe-cost-preview d-none">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <span class="text-secondary">Tổng chi phí ước tính</span>
                            <strong class="fs-5 text-success" id="recipeCostPreviewTotal">0</strong>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-sm align-middle">
                                <thead>
                                    <tr>
                                        <th>Nguyên vật liệu</th>
                                        <th class="text-end">SL gốc</th>
                                        <th class="text-end">SL quy đổi</th>
                                        <th class="text-end">Giá (VNĐ)</th>
                                        <th class="text-end">Chi phí (VNĐ)</th>
                                    </tr>
                                </thead>
                                <tbody id="recipeCostPreviewBody">
                                    <tr>
                                        <td colspan="5" class="text-center text-muted">Chưa có dữ liệu.</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary" id="recipeSubmitBtn">Lưu</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="recipeDetailModal" tabindex="-1" aria-labelledby="recipeDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="recipeDetailModalLabel">Chi tiết công thức</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <h5 class="mb-1" id="detailRecipeName"></h5>
                    <p class="mb-2 text-muted" id="detailRecipeDescription"></p>
                    <div class="row g-3">
                        <div class="col-12 col-md-4">
                            <span class="text-secondary d-block">Đơn vị đầu ra</span>
                            <strong id="detailRecipeOutputUnit"></strong>
                        </div>
                        <div class="col-12 col-md-4">
                            <span class="text-secondary d-block">Thời gian chuẩn bị</span>
                            <strong id="detailRecipePreparation"></strong>
                        </div>
                        <div class="col-12 col-md-4">
                            <span class="text-secondary d-block">Tổng chi phí</span>
                            <strong class="text-success" id="detailRecipeTotalCost"></strong>
                        </div>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="table table-striped align-middle">
                        <thead>
                            <tr>
                                <th>Nguyên vật liệu</th>
                                <th class="text-end">SL gốc</th>
                                <th class="text-end">SL quy đổi</th>
                                <th class="text-end">Giá (VNĐ)</th>
                                <th class="text-end">Chi phí (VNĐ)</th>
                            </tr>
                        </thead>
                        <tbody id="detailRecipeBody">
                            <tr>
                                <td colspan="5" class="text-center text-muted">Không có dữ liệu.</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="recipeDeleteModal" tabindex="-1" aria-labelledby="recipeDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="recipeDeleteModalLabel">Xóa công thức</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Bạn có chắc chắn muốn xóa công thức <strong id="deleteRecipeName"></strong>? Hành động này không thể hoàn tác.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteRecipeBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        (() => {
            const app = document.getElementById('recipe-app');
            if (!app) {
                return;
            }

            const canView = app.dataset.canView === 'true';
            const canUpdate = app.dataset.canUpdate === 'true';
            const canDelete = app.dataset.canDelete === 'true';
            const canCreate = app.dataset.canCreate === 'true';

            const API_BASE_URL = '/api/recipes';
            const MATERIALS_URL = '/api/materials';
            const UNIT_LOOKUP_URL = '/api/units/lookup';

            const tableBody = document.getElementById('recipesTableBody');
            const tableStatus = document.getElementById('recipeTableStatus');
            const alertPlaceholder = document.getElementById('recipeAlertPlaceholder');
            const refreshBtn = document.getElementById('refreshRecipesBtn');
            const searchInput = document.getElementById('recipeSearchInput');
            const unitFilter = document.getElementById('recipeOutputUnitFilter');
            const resetFiltersBtn = document.getElementById('recipeResetFilters');
            const createBtn = document.getElementById('createRecipeBtn');

            const recipeModalElement = document.getElementById('recipeModal');
            const recipeModal = new bootstrap.Modal(recipeModalElement);
            const recipeForm = document.getElementById('recipeForm');
            const recipeFormErrors = document.getElementById('recipeFormErrors');
            const recipeSubmitBtn = document.getElementById('recipeSubmitBtn');
            const recipeModalLabel = document.getElementById('recipeModalLabel');
            const recipeIdInput = document.getElementById('recipeId');
            const recipeNameInput = document.getElementById('recipeName');
            const recipeDescriptionInput = document.getElementById('recipeDescription');
            const recipeOutputUnitSelect = document.getElementById('recipeOutputUnit');
            const recipePreparationInput = document.getElementById('recipePreparationTime');
            const recipeDetailList = document.getElementById('recipeDetailList');
            const addRecipeDetailBtn = document.getElementById('addRecipeDetailBtn');
            const calculateCostBtn = document.getElementById('calculateRecipeCostBtn');
            const costPreviewContainer = document.getElementById('recipeCostPreview');
            const costPreviewBody = document.getElementById('recipeCostPreviewBody');
            const costPreviewTotal = document.getElementById('recipeCostPreviewTotal');

            const detailModal = new bootstrap.Modal(document.getElementById('recipeDetailModal'));
            const detailRecipeName = document.getElementById('detailRecipeName');
            const detailRecipeDescription = document.getElementById('detailRecipeDescription');
            const detailRecipeOutputUnit = document.getElementById('detailRecipeOutputUnit');
            const detailRecipePreparation = document.getElementById('detailRecipePreparation');
            const detailRecipeTotalCost = document.getElementById('detailRecipeTotalCost');
            const detailRecipeBody = document.getElementById('detailRecipeBody');

            const deleteModal = new bootstrap.Modal(document.getElementById('recipeDeleteModal'));
            const deleteRecipeName = document.getElementById('deleteRecipeName');
            const confirmDeleteBtn = document.getElementById('confirmDeleteRecipeBtn');

            const antiForgeryInput = document.querySelector('#recipeAntiForgeryForm input[name="__RequestVerificationToken"]');
            const antiForgeryToken = antiForgeryInput ? antiForgeryInput.value : '';

            const state = {
                recipes: [],
                materials: [],
                units: [],
                selectedRecipeId: null,
                isLoading: false,
                searchTimeout: null,
                formMode: 'create'
            };

            const currencyFormatter = new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' });

            const formatCurrency = (value) => currencyFormatter.format(Number(value || 0));

            const showAlert = (type, message) => {
                const wrapper = document.createElement('div');
                wrapper.innerHTML = `
                    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>`;
                alertPlaceholder.append(wrapper);
                setTimeout(() => {
                    const alert = bootstrap.Alert.getOrCreateInstance(wrapper.firstElementChild);
                    alert.close();
                }, 5000);
            };

            const clearAlerts = () => {
                alertPlaceholder.innerHTML = '';
            };

            const setTableLoading = (loading) => {
                if (!canView) {
                    return;
                }
                if (loading) {
                    tableStatus.textContent = 'Đang tải dữ liệu công thức...';
                    tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4 text-muted">Đang tải dữ liệu...</td></tr>';
                }
            };

            const loadUnits = async () => {
                try {
                    const response = await fetch(UNIT_LOOKUP_URL);
                    if (!response.ok) {
                        throw new Error('Không thể tải danh sách đơn vị.');
                    }
                    const data = await response.json();
                    state.units = data;
                    renderUnitOptions();
                }
                catch (error) {
                    showAlert('danger', error.message);
                }
            };

            const renderUnitOptions = () => {
                const unitOptions = state.units
                    .map(unit => `<option value="${unit.id}">${unit.name}</option>`)
                    .join('');

                recipeOutputUnitSelect.innerHTML = '<option value="">Chọn đơn vị đầu ra</option>' + unitOptions;

                if (unitFilter) {
                    const selected = unitFilter.value;
                    unitFilter.innerHTML = '<option value="">Tất cả đơn vị</option>' + unitOptions;
                    if (selected) {
                        unitFilter.value = selected;
                    }
                }

                recipeDetailList
                    .querySelectorAll('.recipe-detail-unit')
                    .forEach(select => {
                        const value = select.value;
                        select.innerHTML = '<option value="">Chọn đơn vị</option>' + unitOptions;
                        if (value) {
                            select.value = value;
                        }
                    });
            };

            const loadMaterials = async () => {
                try {
                    const response = await fetch(MATERIALS_URL);
                    if (!response.ok) {
                        throw new Error('Không thể tải danh sách nguyên vật liệu.');
                    }
                    const data = await response.json();
                    state.materials = data;
                    renderMaterialOptions();
                }
                catch (error) {
                    showAlert('danger', error.message);
                }
            };

            const renderMaterialOptions = () => {
                const options = state.materials
                    .map(material => `<option value="${material.id}" data-unit-name="${material.unitName || ''}" data-unit-id="${material.unitId}">${material.name}</option>`)
                    .join('');

                recipeDetailList
                    .querySelectorAll('.recipe-detail-material')
                    .forEach(select => {
                        const value = select.value;
                        select.innerHTML = '<option value="">Chọn nguyên vật liệu</option>' + options;
                        if (value) {
                            select.value = value;
                        }
                    });
            };

            const loadRecipes = async (force = false) => {
                if (!canView) {
                    return;
                }

                if (state.isLoading && !force) {
                    return;
                }

                state.isLoading = true;
                setTableLoading(true);

                const params = new URLSearchParams();
                const search = searchInput.value.trim();
                const outputUnitId = unitFilter.value;

                if (search) {
                    params.append('search', search);
                }

                if (outputUnitId) {
                    params.append('outputUnitId', outputUnitId);
                }

                try {
                    const response = await fetch(`${API_BASE_URL}?${params.toString()}`);
                    if (!response.ok) {
                        throw new Error('Không thể tải danh sách công thức.');
                    }
                    const data = await response.json();
                    state.recipes = data;
                    renderRecipeTable();
                }
                catch (error) {
                    tableBody.innerHTML = `<tr><td colspan="7" class="text-center py-4 text-danger">${error.message}</td></tr>`;
                }
                finally {
                    state.isLoading = false;
                }
            };

            const renderRecipeTable = () => {
                if (!canView) {
                    tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4 text-muted">Bạn không có quyền xem công thức.</td></tr>';
                    return;
                }

                if (state.recipes.length === 0) {
                    tableStatus.textContent = 'Không có công thức nào phù hợp điều kiện lọc hiện tại.';
                    tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4 text-muted">Không có dữ liệu.</td></tr>';
                    return;
                }

                tableStatus.textContent = `Đang hiển thị ${state.recipes.length} công thức.`;

                const rows = state.recipes.map(recipe => {
                    const materialCount = recipe.details ? recipe.details.length : 0;
                    const actionButtons = [
                        `<button type="button" class="btn btn-outline-secondary btn-sm me-2" data-recipe-action="view" data-recipe-id="${recipe.id}"><i class="fas fa-eye"></i></button>`
                    ];

                    if (canUpdate) {
                        actionButtons.push(`<button type="button" class="btn btn-outline-primary btn-sm me-2" data-recipe-action="edit" data-recipe-id="${recipe.id}"><i class="fas fa-pen"></i></button>`);
                    }

                    if (canDelete) {
                        actionButtons.push(`<button type="button" class="btn btn-outline-danger btn-sm" data-recipe-action="delete" data-recipe-id="${recipe.id}" data-recipe-name="${recipe.name.replace(/"/g, '&quot;')}"><i class="fas fa-trash"></i></button>`);
                    }

                    return `
                        <tr>
                            <td>
                                <div class="fw-semibold">${recipe.name}</div>
                                <div class="small text-muted">Cập nhật: ${recipe.updatedAt ? new Date(recipe.updatedAt).toLocaleString('vi-VN') : new Date(recipe.createdAt).toLocaleString('vi-VN')}</div>
                            </td>
                            <td><div class="text-truncate-2">${recipe.description || '<span class="text-muted">(Không có)</span>'}</div></td>
                            <td>${recipe.outputUnitName || ''}</td>
                            <td class="text-center">${recipe.preparationTime || 0} phút</td>
                            <td class="text-end text-success">${formatCurrency(recipe.totalCost || 0)}</td>
                            <td class="text-center">${materialCount}</td>
                            <td class="text-center">${actionButtons.join('')}</td>
                        </tr>`;
                });

                tableBody.innerHTML = rows.join('');
            };

            const resetCostPreview = () => {
                costPreviewContainer.classList.add('d-none');
                costPreviewTotal.textContent = '0';
                costPreviewBody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">Chưa có dữ liệu.</td></tr>';
            };

            const openRecipeModal = (mode, recipe = null) => {
                state.formMode = mode;
                recipeForm.reset();
                clearFormErrors();
                resetCostPreview();
                recipeDetailList.innerHTML = '';

                if (mode === 'create') {
                    recipeModalLabel.textContent = 'Thêm công thức';
                    recipeSubmitBtn.textContent = 'Thêm mới';
                    recipeIdInput.value = '';
                    addRecipeDetailRow();
                } else if (recipe) {
                    recipeModalLabel.textContent = 'Cập nhật công thức';
                    recipeSubmitBtn.textContent = 'Cập nhật';
                    recipeIdInput.value = recipe.id;
                    recipeNameInput.value = recipe.name || '';
                    recipeDescriptionInput.value = recipe.description || '';
                    recipeOutputUnitSelect.value = recipe.outputUnitId || '';
                    recipePreparationInput.value = recipe.preparationTime ?? '';
                    if (!recipe.details || recipe.details.length === 0) {
                        addRecipeDetailRow();
                    } else {
                        recipe.details.forEach(detail => addRecipeDetailRow(detail));
                    }
                }

                recipeModal.show();
            };

            const clearFormErrors = () => {
                recipeFormErrors.classList.add('d-none');
                recipeFormErrors.innerHTML = '';
            };

            const showFormErrors = (errors) => {
                if (!errors || Object.keys(errors).length === 0) {
                    recipeFormErrors.classList.add('d-none');
                    recipeFormErrors.innerHTML = '';
                    return;
                }

                const items = Object.values(errors)
                    .flat()
                    .map(err => `<li>${err}</li>`)
                    .join('');

                recipeFormErrors.innerHTML = `<ul class="mb-0">${items}</ul>`;
                recipeFormErrors.classList.remove('d-none');
            };

            const addRecipeDetailRow = (detail = null) => {
                const row = document.createElement('div');
                row.className = 'recipe-detail-row';
                row.innerHTML = `
                    <div class="row g-3 align-items-end">
                        <div class="col-12 col-lg-5">
                            <label class="form-label">Nguyên vật liệu<span class="text-danger">*</span></label>
                            <select class="form-select recipe-detail-material" required></select>
                            <div class="form-text recipe-detail-base text-secondary"></div>
                        </div>
                        <div class="col-12 col-sm-6 col-lg-3">
                            <label class="form-label">Đơn vị<span class="text-danger">*</span></label>
                            <select class="form-select recipe-detail-unit" required></select>
                        </div>
                        <div class="col-10 col-sm-4 col-lg-3">
                            <label class="form-label">Số lượng<span class="text-danger">*</span></label>
                            <input type="number" class="form-control recipe-detail-quantity" min="0.0001" step="0.0001" required />
                            <input type="hidden" class="recipe-detail-id" />
                        </div>
                        <div class="col-2 col-sm-2 col-lg-1 d-flex align-items-end">
                            <button type="button" class="btn btn-outline-danger recipe-detail-remove"><i class="fas fa-trash"></i></button>
                        </div>
                    </div>`;

                recipeDetailList.appendChild(row);

                const materialSelect = row.querySelector('.recipe-detail-material');
                const unitSelect = row.querySelector('.recipe-detail-unit');
                const quantityInput = row.querySelector('.recipe-detail-quantity');
                const idInput = row.querySelector('.recipe-detail-id');
                const removeBtn = row.querySelector('.recipe-detail-remove');
                const baseInfo = row.querySelector('.recipe-detail-base');

                const populateMaterialOptions = () => {
                    const options = state.materials
                        .map(material => `<option value="${material.id}" data-unit-name="${material.unitName || ''}" data-unit-id="${material.unitId}">${material.name}</option>`)
                        .join('');
                    materialSelect.innerHTML = '<option value="">Chọn nguyên vật liệu</option>' + options;
                };

                populateMaterialOptions();

                const populateUnitOptions = () => {
                    const unitOptions = state.units
                        .map(unit => `<option value="${unit.id}">${unit.name}</option>`)
                        .join('');
                    unitSelect.innerHTML = '<option value="">Chọn đơn vị</option>' + unitOptions;
                };

                populateUnitOptions();

                const updateBaseInfo = () => {
                    const selectedMaterial = state.materials.find(m => m.id === Number(materialSelect.value));
                    if (selectedMaterial) {
                        baseInfo.textContent = `Đơn vị gốc: ${selectedMaterial.unitName || ''}`;
                    } else {
                        baseInfo.textContent = '';
                    }
                };

                materialSelect.addEventListener('change', () => {
                    updateBaseInfo();
                });

                removeBtn.addEventListener('click', () => {
                    if (recipeDetailList.children.length <= 1) {
                        showAlert('warning', 'Công thức cần có ít nhất một nguyên vật liệu.');
                        return;
                    }
                    row.remove();
                });

                if (detail) {
                    materialSelect.value = detail.materialId;
                    unitSelect.value = detail.unitId;
                    quantityInput.value = detail.quantity;
                    idInput.value = detail.id || '';
                    updateBaseInfo();
                }
            };

            const collectFormData = (includeDetailIds) => {
                const details = [];
                recipeDetailList.querySelectorAll('.recipe-detail-row').forEach(row => {
                    const materialId = Number(row.querySelector('.recipe-detail-material').value);
                    const unitId = Number(row.querySelector('.recipe-detail-unit').value);
                    const quantityValue = row.querySelector('.recipe-detail-quantity').value;
                    const quantity = quantityValue ? Number(quantityValue) : NaN;
                    const idValue = row.querySelector('.recipe-detail-id').value;

                    if (!materialId || !unitId || !quantity || quantity <= 0) {
                        return;
                    }

                    const detail = {
                        materialId,
                        unitId,
                        quantity
                    };

                    if (includeDetailIds && idValue) {
                        detail.id = Number(idValue);
                    }

                    details.push(detail);
                });

                return {
                    name: recipeNameInput.value,
                    description: recipeDescriptionInput.value,
                    outputUnitId: recipeOutputUnitSelect.value ? Number(recipeOutputUnitSelect.value) : null,
                    preparationTime: recipePreparationInput.value ? Number(recipePreparationInput.value) : null,
                    details
                };
            };

            const submitRecipeForm = async () => {
                clearFormErrors();

                const includeIds = state.formMode === 'edit';
                const payload = collectFormData(includeIds);

                if (!payload.details || payload.details.length === 0) {
                    showFormErrors({ Details: ['Cần ít nhất một nguyên vật liệu hợp lệ.'] });
                    return;
                }

                recipeSubmitBtn.disabled = true;
                recipeSubmitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Đang xử lý';

                try {
                    const method = state.formMode === 'edit' ? 'PUT' : 'POST';
                    const url = state.formMode === 'edit'
                        ? `${API_BASE_URL}/${recipeIdInput.value}`
                        : API_BASE_URL;

                    const response = await fetch(url, {
                        method,
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': antiForgeryToken
                        },
                        body: JSON.stringify(payload)
                    });

                    if (response.status === 400) {
                        const problem = await response.json();
                        showFormErrors(problem.errors || {});
                        return;
                    }

                    if (!response.ok) {
                        throw new Error(state.formMode === 'edit' ? 'Không thể cập nhật công thức.' : 'Không thể tạo công thức.');
                    }

                    const data = await response.json();
                    recipeModal.hide();
                    showAlert('success', state.formMode === 'edit' ? 'Cập nhật công thức thành công.' : 'Tạo công thức thành công.');

                    const existingIndex = state.recipes.findIndex(item => item.id === data.id);
                    if (existingIndex >= 0) {
                        state.recipes[existingIndex] = data;
                    } else {
                        state.recipes.push(data);
                    }

                    renderRecipeTable();
                }
                catch (error) {
                    showAlert('danger', error.message);
                }
                finally {
                    recipeSubmitBtn.disabled = false;
                    recipeSubmitBtn.textContent = state.formMode === 'edit' ? 'Cập nhật' : 'Thêm mới';
                }
            };

            const populateCostPreview = (response) => {
                if (!response || !response.details || response.details.length === 0) {
                    resetCostPreview();
                    return;
                }

                costPreviewContainer.classList.remove('d-none');
                costPreviewTotal.textContent = formatCurrency(response.totalCost || 0);

                const rows = response.details.map(detail => `
                    <tr>
                        <td>
                            <div class="fw-semibold">${detail.materialName}</div>
                            <div class="small text-muted">Đơn vị gốc: ${detail.baseUnitName}</div>
                        </td>
                        <td class="text-end">${detail.quantity.toLocaleString('vi-VN')} ${detail.unitName}</td>
                        <td class="text-end">${detail.convertedQuantity.toLocaleString('vi-VN')} ${detail.baseUnitName}</td>
                        <td class="text-end">${formatCurrency(detail.materialPrice)}</td>
                        <td class="text-end fw-semibold">${formatCurrency(detail.cost)}</td>
                    </tr>`);

                costPreviewBody.innerHTML = rows.join('');
            };

            const calculateRecipeCost = async () => {
                clearFormErrors();
                const payload = collectFormData(false);

                if (!payload.details || payload.details.length === 0) {
                    showFormErrors({ Details: ['Cần ít nhất một nguyên vật liệu hợp lệ.'] });
                    return;
                }

                calculateCostBtn.disabled = true;
                calculateCostBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Đang tính...';

                try {
                    const response = await fetch(`${API_BASE_URL}/calculate-cost`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': antiForgeryToken
                        },
                        body: JSON.stringify(payload)
                    });

                    if (response.status === 400) {
                        const problem = await response.json();
                        showFormErrors(problem.errors || {});
                        resetCostPreview();
                        return;
                    }

                    if (!response.ok) {
                        throw new Error('Không thể tính toán chi phí.');
                    }

                    const data = await response.json();
                    populateCostPreview(data);
                }
                catch (error) {
                    showAlert('danger', error.message);
                    resetCostPreview();
                }
                finally {
                    calculateCostBtn.disabled = false;
                    calculateCostBtn.innerHTML = '<i class="fas fa-calculator me-1"></i>Tính toán chi phí';
                }
            };

            const openDetailModal = (recipeId) => {
                const recipe = state.recipes.find(item => item.id === recipeId);
                if (!recipe) {
                    showAlert('danger', 'Không tìm thấy công thức.');
                    return;
                }

                detailRecipeName.textContent = recipe.name;
                detailRecipeDescription.textContent = recipe.description || '(Không có mô tả)';
                detailRecipeOutputUnit.textContent = recipe.outputUnitName || '';
                detailRecipePreparation.textContent = `${recipe.preparationTime || 0} phút`;
                detailRecipeTotalCost.textContent = formatCurrency(recipe.totalCost || 0);

                if (!recipe.details || recipe.details.length === 0) {
                    detailRecipeBody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">Không có dữ liệu.</td></tr>';
                } else {
                    const rows = recipe.details.map(detail => `
                        <tr>
                            <td>
                                <div class="fw-semibold">${detail.materialName}</div>
                                <div class="small text-muted">Đơn vị gốc: ${detail.baseUnitName}</div>
                            </td>
                            <td class="text-end">${detail.quantity.toLocaleString('vi-VN')} ${detail.unitName}</td>
                            <td class="text-end">${detail.convertedQuantity.toLocaleString('vi-VN')} ${detail.baseUnitName}</td>
                            <td class="text-end">${formatCurrency(detail.materialPrice)}</td>
                            <td class="text-end fw-semibold">${formatCurrency(detail.cost)}</td>
                        </tr>`);
                    detailRecipeBody.innerHTML = rows.join('');
                }

                detailModal.show();
            };

            const openDeleteModal = (recipeId, recipeName) => {
                state.selectedRecipeId = recipeId;
                deleteRecipeName.textContent = recipeName;
                confirmDeleteBtn.disabled = false;
                deleteModal.show();
            };

            const confirmDeleteRecipe = async () => {
                if (!state.selectedRecipeId) {
                    return;
                }

                confirmDeleteBtn.disabled = true;
                confirmDeleteBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Đang xóa';

                try {
                    const response = await fetch(`${API_BASE_URL}/${state.selectedRecipeId}`, {
                        method: 'DELETE',
                        headers: {
                            'RequestVerificationToken': antiForgeryToken
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Không thể xóa công thức.');
                    }

                    state.recipes = state.recipes.filter(item => item.id !== state.selectedRecipeId);
                    renderRecipeTable();
                    deleteModal.hide();
                    showAlert('success', 'Xóa công thức thành công.');
                }
                catch (error) {
                    showAlert('danger', error.message);
                }
                finally {
                    confirmDeleteBtn.disabled = false;
                    confirmDeleteBtn.textContent = 'Xóa';
                    state.selectedRecipeId = null;
                }
            };

            const handleTableClick = (event) => {
                const target = event.target.closest('[data-recipe-action]');
                if (!target) {
                    return;
                }

                const recipeId = Number(target.dataset.recipeId);
                const action = target.dataset.recipeAction;

                if (action === 'view') {
                    openDetailModal(recipeId);
                } else if (action === 'edit') {
                    const recipe = state.recipes.find(item => item.id === recipeId);
                    if (!recipe) {
                        showAlert('danger', 'Không tìm thấy công thức.');
                        return;
                    }
                    openRecipeModal('edit', recipe);
                } else if (action === 'delete') {
                    openDeleteModal(recipeId, target.dataset.recipeName || '');
                }
            };

            const resetFilters = () => {
                searchInput.value = '';
                unitFilter.value = '';
                loadRecipes(true);
            };

            const handleSearchChange = () => {
                if (state.searchTimeout) {
                    clearTimeout(state.searchTimeout);
                }
                state.searchTimeout = setTimeout(() => loadRecipes(true), 300);
            };

            recipeForm.addEventListener('submit', (event) => {
                event.preventDefault();
                submitRecipeForm();
            });

            addRecipeDetailBtn.addEventListener('click', () => addRecipeDetailRow());
            calculateCostBtn.addEventListener('click', () => calculateRecipeCost());
            confirmDeleteBtn.addEventListener('click', () => confirmDeleteRecipe());

            if (createBtn) {
                createBtn.addEventListener('click', () => openRecipeModal('create'));
            }

            if (refreshBtn) {
                refreshBtn.addEventListener('click', () => loadRecipes(true));
            }

            if (resetFiltersBtn) {
                resetFiltersBtn.addEventListener('click', () => resetFilters());
            }

            searchInput.addEventListener('input', handleSearchChange);
            unitFilter.addEventListener('change', () => loadRecipes(true));
            tableBody.addEventListener('click', handleTableClick);

            recipeModalElement.addEventListener('hidden.bs.modal', () => {
                recipeForm.reset();
                recipeDetailList.innerHTML = '';
                clearFormErrors();
                resetCostPreview();
            });

            const initialize = async () => {
                await Promise.all([loadUnits(), loadMaterials()]);
                if (canView) {
                    await loadRecipes();
                }
            };

            initialize();
        })();
    </script>
}
