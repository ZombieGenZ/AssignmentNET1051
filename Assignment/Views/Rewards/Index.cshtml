@using Assignment.Enums
@{
    ViewData["Title"] = "Quản lý vật phẩm đổi thưởng";
    Layout = "_AdminLayout";

    var canCreate = ViewData["CanCreate"] as bool? ?? false;
    var canUpdate = ViewData["CanUpdate"] as bool? ?? false;
    var canDelete = ViewData["CanDelete"] as bool? ?? false;
    var canView = ViewData["CanView"] as bool? ?? false;
    var canDownloadTemplates = ViewData["CanDownloadTemplates"] as bool? ?? false;
}

<div class="container-fluid pt-4 px-4">
    <div class="card shadow-sm" id="reward-app"
         data-can-create="@(canCreate ? "true" : "false")"
         data-can-update="@(canUpdate ? "true" : "false")"
         data-can-delete="@(canDelete ? "true" : "false")"
         data-can-view="@(canView ? "true" : "false")">
        <div class="card-header bg-light">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                <div>
                    <h4 class="mb-1 text-primary">
                        <i class="fas fa-gift me-2"></i>@ViewData["Title"]
                    </h4>
                </div>
                <div class="d-flex flex-wrap gap-2 justify-content-end">
                    @if (canCreate)
                    {
                        <button type="button" class="btn btn-primary" id="createRewardBtn">
                            <i class="fas fa-plus me-2"></i>Thêm vật phẩm
                        </button>
                    }
                </div>
            </div>
        </div>
        <div class="card-body">
            <div id="alertPlaceholder"></div>
            <div class="d-flex flex-column flex-lg-row justify-content-between align-items-lg-center gap-3 mb-3">
                <div class="text-muted small" id="tableStatus">@(canView ? "Đang tải dữ liệu vật phẩm..." : "Bạn không có quyền xem danh sách vật phẩm.")</div>
                <div class="d-flex flex-wrap gap-2 align-items-center">
                    <div class="input-group input-group-sm" style="width: auto;">
                        <label class="input-group-text" for="pageSizeSelect">Số dòng</label>
                        <select id="pageSizeSelect" class="form-select">
                            @foreach (var size in Assignment.Options.PaginationDefaults.PageSizeOptions)
                            {
                                <option value="@size">@size</option>
                            }
                        </select>
                    </div>
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="refreshRewardsBtn">
                        <i class="fas fa-rotate-right me-1"></i>Tải lại
                    </button>
                    @if (canDelete)
                    {
                        <div class="d-none" id="bulkActions">
                            <button type="button" class="btn btn-danger btn-sm" id="bulkDeleteBtn">
                                <i class="fas fa-trash-alt me-1"></i>Xóa đã chọn
                            </button>
                        </div>
                    }
                </div>
            </div>
            <div class="filter-toolbar mb-4" id="rewardFilters">
                <div class="row g-3 align-items-end">
                    <div class="col-12 col-lg-5">
                        <label class="form-label filter-label" for="rewardSearchInput">Tìm kiếm</label>
                        <div class="filter-input-icon">
                            <i class="fas fa-search filter-icon"></i>
                            <input type="search" class="form-control" id="rewardSearchInput" placeholder="Tên hoặc mô tả vật phẩm" />
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-3">
                        <label class="form-label filter-label" for="rewardStatusFilter">Trạng thái</label>
                        <select id="rewardStatusFilter" class="form-select">
                            <option value="">Tất cả</option>
                            <option value="true">Cho phép</option>
                            <option value="false">Tạm khóa</option>
                        </select>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-2 ms-lg-auto d-flex align-items-end">
                        <button type="button" class="btn btn-outline-secondary w-100" id="rewardResetFilters">
                            <i class="fas fa-eraser me-1"></i>Xóa lọc
                        </button>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            @if (canDelete)
                            {
                                <th style="width: 50px;" class="text-center">
                                    <input type="checkbox" id="selectAllRewards" class="form-check-input" />
                                </th>
                            }
                            <th>Tên vật phẩm</th>
                            <th>Điểm đổi thưởng</th>
                            <th>Giảm giá</th>
                            <th>Phạm vi áp dụng</th>
                            <th>Đơn tối thiểu</th>
                            <th>Yêu cầu cấp bậc</th>
                            <th>Số lượng</th>
                            <th>Thời hạn hiệu lực</th>
                            <th>Trạng thái</th>
                            <th style="width: 150px;" class="text-center">Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="rewardsTableBody">
                        <tr>
                            <td colspan="@(canDelete ? 11 : 10)" class="text-center py-4 text-muted">@(canView ? "Đang tải dữ liệu..." : "Không có dữ liệu để hiển thị.")</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 mt-3">
                <div id="paginationSummary" class="text-muted small"></div>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="prevPageBtn">
                        <i class="fas fa-angle-left me-1"></i>Trước
                    </button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="nextPageBtn">
                        Sau<i class="fas fa-angle-right ms-1"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<form id="antiForgeryForm" class="d-none">
    @Html.AntiForgeryToken()
</form>

<div class="modal fade" id="rewardModal" tabindex="-1" aria-labelledby="rewardModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <form id="rewardForm" class="modal-content" novalidate>
            <div class="modal-header">
                <h5 class="modal-title" id="rewardModalLabel">Thêm vật phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="rewardFormErrors" class="alert alert-danger d-none" role="alert"></div>
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="rewardType" class="form-label">Loại vật phẩm</label>
                        <select id="rewardType" class="form-select">
                            <option value="@((int)RewardItemType.Voucher)">Mã giảm giá</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="rewardPointCost" class="form-label">Điểm đổi thưởng<span class="text-danger">*</span></label>
                        <input type="number" min="0" step="1" class="form-control" id="rewardPointCost" required />
                    </div>
                    <div class="col-12">
                        <label for="rewardName" class="form-label">Tên vật phẩm<span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="rewardName" maxlength="300" required />
                    </div>
                    <div class="col-12">
                        <label for="rewardDescription" class="form-label">Mô tả<span class="text-danger">*</span></label>
                        <textarea class="form-control" id="rewardDescription" rows="3" maxlength="1000" required></textarea>
                    </div>
                    <div class="col-md-6">
                        <label for="rewardMinimumRank" class="form-label">Yêu cầu cấp bậc</label>
                        <select id="rewardMinimumRank" class="form-select">
                            <option value="">Không yêu cầu</option>
                            <option value="@((int)CustomerRank.Potential)">Cấp tiềm năng trở lên</option>
                            <option value="@((int)CustomerRank.Bronze)">Cấp đồng trở lên</option>
                            <option value="@((int)CustomerRank.Silver)">Cấp bạc trở lên</option>
                            <option value="@((int)CustomerRank.Gold)">Cấp vàng trở lên</option>
                            <option value="@((int)CustomerRank.Platinum)">Cấp bạch kim trở lên</option>
                            <option value="@((int)CustomerRank.Diamond)">Cấp kim cương trở lên</option>
                            <option value="@((int)CustomerRank.Emerald)">Cấp lục bảo trở lên</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="rewardQuantity" class="form-label">Số lượng</label>
                        <input type="number" min="1" step="1" class="form-control" id="rewardQuantity" />
                        <div class="form-check mt-2">
                            <input class="form-check-input" type="checkbox" id="rewardIsQuantityUnlimited" />
                            <label class="form-check-label" for="rewardIsQuantityUnlimited">Không giới hạn số lượng</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label for="rewardValidityValue" class="form-label">Thời hạn hiệu lực<span class="text-danger">*</span></label>
                        <div class="input-group">
                            <input type="number" min="1" step="1" class="form-control" id="rewardValidityValue" required />
                            <select id="rewardValidityUnit" class="form-select" style="max-width: 160px;">
                                <option value="@((int)RewardValidityUnit.Minute)">Phút</option>
                                <option value="@((int)RewardValidityUnit.Day)">Ngày</option>
                                <option value="@((int)RewardValidityUnit.Week)">Tuần</option>
                                <option value="@((int)RewardValidityUnit.Month)">Tháng</option>
                                <option value="@((int)RewardValidityUnit.Year)">Năm</option>
                            </select>
                        </div>
                        <div class="form-check mt-2">
                            <input class="form-check-input" type="checkbox" id="rewardValidityUnlimited" />
                            <label class="form-check-label" for="rewardValidityUnlimited">Không giới hạn thời gian sử dụng</label>
                        </div>
                    </div>
                    <div class="col-md-6 d-flex flex-column justify-content-end">
                        <div class="form-check form-switch mb-2">
                            <input class="form-check-input" type="checkbox" id="rewardIsPublish" />
                            <label class="form-check-label" for="rewardIsPublish">Cho phép sử dụng</label>
                        </div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="rewardVoucherIsForNewUsersOnly" />
                            <label class="form-check-label" for="rewardVoucherIsForNewUsersOnly">Chỉ áp dụng cho khách hàng mới</label>
                        </div>
                    </div>
                    <div class="col-12">
                        <hr class="text-muted" />
                        <h6 class="text-primary">Thông tin mã giảm giá</h6>
                    </div>
                    <div class="col-md-4">
                        <label for="rewardVoucherDiscountType" class="form-label">Kiểu giảm giá</label>
                        <select id="rewardVoucherDiscountType" class="form-select">
                            <option value="@((int)VoucherDiscountType.Money)">Tiền mặt</option>
                            <option value="@((int)VoucherDiscountType.Percent)">Phần trăm</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="rewardVoucherDiscount" class="form-label">Giá trị giảm<span class="text-danger">*</span></label>
                        <input type="number" min="0" step="0.01" class="form-control" id="rewardVoucherDiscount" required />
                    </div>
                    <div class="col-md-4">
                        <label for="rewardVoucherMinimumRequirements" class="form-label">Đơn tối thiểu<span class="text-danger">*</span></label>
                        <input type="number" min="0" step="0.01" class="form-control" id="rewardVoucherMinimumRequirements" required />
                    </div>
                    <div class="col-md-4">
                        <label for="rewardVoucherQuantity" class="form-label">Số lượng vé giảm giá<span class="text-danger">*</span></label>
                        <input type="number" min="1" step="1" class="form-control" id="rewardVoucherQuantity" />
                        <div class="form-text">Số lượt sử dụng cho mỗi mã giảm giá được tạo.</div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="rewardVoucherUnlimitedPercentage" />
                            <label class="form-check-label" for="rewardVoucherUnlimitedPercentage">Không giới hạn mức giảm tối đa (áp dụng cho giảm phần trăm)</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label for="rewardVoucherMaximumPercentageReduction" class="form-label">Mức giảm tối đa</label>
                        <input type="number" min="0" step="0.01" class="form-control" id="rewardVoucherMaximumPercentageReduction" />
                        <small class="text-muted">Áp dụng khi giảm theo phần trăm và có giới hạn.</small>
                    </div>
                    <div class="col-md-6">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="rewardVoucherHasCombinedLimit" />
                            <label class="form-check-label" for="rewardVoucherHasCombinedLimit">Giới hạn số voucher áp dụng chung</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label for="rewardVoucherMaxCombinedUsageCount" class="form-label">Số voucher áp dụng chung tối đa</label>
                        <input type="number" min="1" step="1" class="form-control" id="rewardVoucherMaxCombinedUsageCount" />
                    </div>
                    <div class="col-md-6">
                        <label for="rewardVoucherProductScope" class="form-label">Phạm vi sản phẩm</label>
                        <select id="rewardVoucherProductScope" class="form-select">
                            <option value="@((int)VoucherProductScope.AllProducts)">Tất cả sản phẩm</option>
                            <option value="@((int)VoucherProductScope.SelectedProducts)">Một số sản phẩm</option>
                            <option value="@((int)VoucherProductScope.NoProducts)">Không áp dụng sản phẩm</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="rewardVoucherComboScope" class="form-label">Phạm vi combo</label>
                        <select id="rewardVoucherComboScope" class="form-select">
                            <option value="@((int)VoucherComboScope.AllCombos)">Tất cả combo</option>
                            <option value="@((int)VoucherComboScope.SelectedCombos)">Một số combo</option>
                            <option value="@((int)VoucherComboScope.NoCombos)">Không áp dụng combo</option>
                        </select>
                    </div>
                    <div class="col-12 d-none" id="rewardSelectedProductsWrapper">
                        <div class="d-flex flex-wrap justify-content-between align-items-center gap-2 mb-2">
                            <label class="form-label mb-0">Sản phẩm áp dụng<span class="text-danger">*</span></label>
                            <div class="d-flex flex-wrap gap-2">
                                @if (canDownloadTemplates)
                                {
                                    <a class="btn btn-outline-secondary btn-sm" href="/api/rewards/product-template">
                                        <i class="fas fa-file-download me-1"></i>Tải mẫu
                                    </a>
                                }
                                <button type="button" class="btn btn-outline-primary btn-sm" id="importRewardProductsBtn">
                                    <i class="fas fa-file-import me-1"></i>Nhập từ file
                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm" id="clearRewardProductsBtn">
                                    <i class="fas fa-times me-1"></i>Xóa tất cả
                                </button>
                                <button type="button" class="btn btn-outline-success btn-sm" id="addRewardProductBtn">
                                    <i class="fas fa-plus me-1"></i>Thêm sản phẩm
                                </button>
                            </div>
                        </div>
                        <div id="rewardProductsContainer" class="d-flex flex-column gap-2"></div>
                        <input type="file" class="d-none" id="rewardProductImportInput" accept=".xlsx" />
                        <small class="text-muted">Chọn các sản phẩm áp dụng vật phẩm hoặc nhập nhanh từ file.</small>
                    </div>
                    <div class="col-12 d-none" id="rewardSelectedCombosWrapper">
                        <div class="d-flex flex-wrap justify-content-between align-items-center gap-2 mb-2">
                            <label class="form-label mb-0">Combo áp dụng<span class="text-danger">*</span></label>
                            <div class="d-flex flex-wrap gap-2">
                                @if (canDownloadTemplates)
                                {
                                    <a class="btn btn-outline-secondary btn-sm" href="/api/rewards/combo-template">
                                        <i class="fas fa-file-download me-1"></i>Tải mẫu
                                    </a>
                                }
                                <button type="button" class="btn btn-outline-primary btn-sm" id="importRewardCombosBtn">
                                    <i class="fas fa-file-import me-1"></i>Nhập từ file
                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm" id="clearRewardCombosBtn">
                                    <i class="fas fa-times me-1"></i>Xóa tất cả
                                </button>
                                <button type="button" class="btn btn-outline-success btn-sm" id="addRewardComboBtn">
                                    <i class="fas fa-plus me-1"></i>Thêm combo
                                </button>
                            </div>
                        </div>
                        <div id="rewardCombosContainer" class="d-flex flex-column gap-2"></div>
                        <input type="file" class="d-none" id="rewardComboImportInput" accept=".xlsx" />
                        <small class="text-muted">Chọn các combo áp dụng vật phẩm hoặc nhập nhanh từ file.</small>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="submit" class="btn btn-primary" id="rewardSubmitBtn">Lưu</button>
            </div>
        </form>
    </div>
</div>

<div class="modal fade" id="rewardDetailModal" tabindex="-1" aria-labelledby="rewardDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rewardDetailModalLabel">Chi tiết vật phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="rewardDetailBody">
                <div class="text-center text-muted py-4">Đang tải thông tin...</div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="rewardDeleteModal" tabindex="-1" aria-labelledby="rewardDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rewardDeleteModalLabel">Xóa vật phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Bạn có chắc chắn muốn xóa vật phẩm <strong id="deleteRewardName"></strong>? Hành động này không thể hoàn tác.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteRewardBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="rewardBulkDeleteModal" tabindex="-1" aria-labelledby="rewardBulkDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rewardBulkDeleteModalLabel">Xóa nhiều vật phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Bạn có chắc chắn muốn xóa các vật phẩm đã chọn? Hành động này không thể hoàn tác.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmBulkDeleteRewardBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const app = document.getElementById('reward-app');
            if (!app) {
                return;
            }

            const canCreate = app.dataset.canCreate === 'true';
            const canUpdate = app.dataset.canUpdate === 'true';
            const canDelete = app.dataset.canDelete === 'true';
            const canView = app.dataset.canView === 'true';
            const API_BASE_URL = '/api/rewards';

            const tableBody = document.getElementById('rewardsTableBody');
            const tableStatus = document.getElementById('tableStatus');
            const alertPlaceholder = document.getElementById('alertPlaceholder');
            const refreshBtn = document.getElementById('refreshRewardsBtn');
            const pageSizeSelect = document.getElementById('pageSizeSelect');
            const prevPageBtn = document.getElementById('prevPageBtn');
            const nextPageBtn = document.getElementById('nextPageBtn');
            const paginationSummary = document.getElementById('paginationSummary');
            const bulkActions = document.getElementById('bulkActions');
            const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
            const selectAllCheckbox = document.getElementById('selectAllRewards');
            const createBtn = document.getElementById('createRewardBtn');
            const searchInput = document.getElementById('rewardSearchInput');
            const statusFilterSelect = document.getElementById('rewardStatusFilter');
            const resetFiltersBtn = document.getElementById('rewardResetFilters');

            const rewardModalEl = document.getElementById('rewardModal');
            const rewardModal = new bootstrap.Modal(rewardModalEl);
            const rewardForm = document.getElementById('rewardForm');
            const rewardFormErrors = document.getElementById('rewardFormErrors');
            const rewardModalLabel = document.getElementById('rewardModalLabel');
            const rewardSubmitBtn = document.getElementById('rewardSubmitBtn');

            const detailModal = new bootstrap.Modal(document.getElementById('rewardDetailModal'));
            const detailModalBody = document.getElementById('rewardDetailBody');

            const deleteModal = new bootstrap.Modal(document.getElementById('rewardDeleteModal'));
            const deleteRewardName = document.getElementById('deleteRewardName');
            const confirmDeleteRewardBtn = document.getElementById('confirmDeleteRewardBtn');

            const bulkDeleteModal = new bootstrap.Modal(document.getElementById('rewardBulkDeleteModal'));
            const confirmBulkDeleteRewardBtn = document.getElementById('confirmBulkDeleteRewardBtn');

            const antiForgeryTokenInput = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]');
            const antiForgeryToken = antiForgeryTokenInput ? antiForgeryTokenInput.value : '';

            const formFields = {
                typeSelect: document.getElementById('rewardType'),
                nameInput: document.getElementById('rewardName'),
                descriptionInput: document.getElementById('rewardDescription'),
                pointCostInput: document.getElementById('rewardPointCost'),
                minimumRankSelect: document.getElementById('rewardMinimumRank'),
                quantityInput: document.getElementById('rewardQuantity'),
                quantityUnlimitedSwitch: document.getElementById('rewardIsQuantityUnlimited'),
                validityValueInput: document.getElementById('rewardValidityValue'),
                validityUnitSelect: document.getElementById('rewardValidityUnit'),
                validityUnlimitedSwitch: document.getElementById('rewardValidityUnlimited'),
                isPublishSwitch: document.getElementById('rewardIsPublish'),
                voucherIsForNewUsersOnlySwitch: document.getElementById('rewardVoucherIsForNewUsersOnly'),
                voucherDiscountTypeSelect: document.getElementById('rewardVoucherDiscountType'),
                voucherDiscountInput: document.getElementById('rewardVoucherDiscount'),
                voucherMinimumRequirementsInput: document.getElementById('rewardVoucherMinimumRequirements'),
                voucherQuantityInput: document.getElementById('rewardVoucherQuantity'),
                voucherUnlimitedPercentageSwitch: document.getElementById('rewardVoucherUnlimitedPercentage'),
                voucherMaximumPercentageInput: document.getElementById('rewardVoucherMaximumPercentageReduction'),
                voucherHasCombinedLimitSwitch: document.getElementById('rewardVoucherHasCombinedLimit'),
                voucherMaxCombinedInput: document.getElementById('rewardVoucherMaxCombinedUsageCount'),
                voucherProductScopeSelect: document.getElementById('rewardVoucherProductScope'),
                voucherComboScopeSelect: document.getElementById('rewardVoucherComboScope'),
                productsWrapper: document.getElementById('rewardSelectedProductsWrapper'),
                combosWrapper: document.getElementById('rewardSelectedCombosWrapper'),
                productsContainer: document.getElementById('rewardProductsContainer'),
                combosContainer: document.getElementById('rewardCombosContainer'),
                addProductBtn: document.getElementById('addRewardProductBtn'),
                addComboBtn: document.getElementById('addRewardComboBtn'),
                importProductsBtn: document.getElementById('importRewardProductsBtn'),
                importCombosBtn: document.getElementById('importRewardCombosBtn'),
                clearProductsBtn: document.getElementById('clearRewardProductsBtn'),
                clearCombosBtn: document.getElementById('clearRewardCombosBtn'),
                productImportInput: document.getElementById('rewardProductImportInput'),
                comboImportInput: document.getElementById('rewardComboImportInput')
            };

            const rankLabels = {
                none: 'Không yêu cầu',
                '@((int)CustomerRank.Potential)': 'Khách hàng tiềm năng',
                '@((int)CustomerRank.Bronze)': 'Khách hàng cấp đồng',
                '@((int)CustomerRank.Silver)': 'Khách hàng cấp bạc',
                '@((int)CustomerRank.Gold)': 'Khách hàng cấp vàng',
                '@((int)CustomerRank.Platinum)': 'Khách hàng bạch kim',
                '@((int)CustomerRank.Diamond)': 'Khách hàng kim cương',
                '@((int)CustomerRank.Emerald)': 'Khách hàng lục bảo'
            };

            const validityUnitLabels = {
                '@((int)RewardValidityUnit.Minute)': 'Phút',
                '@((int)RewardValidityUnit.Day)': 'Ngày',
                '@((int)RewardValidityUnit.Week)': 'Tuần',
                '@((int)RewardValidityUnit.Month)': 'Tháng',
                '@((int)RewardValidityUnit.Year)': 'Năm',
                '@((int)RewardValidityUnit.Forever)': 'Vĩnh viễn'
            };

            const productScopeLabels = {
                '@((int)VoucherProductScope.AllProducts)': 'Tất cả sản phẩm',
                '@((int)VoucherProductScope.SelectedProducts)': 'Một số sản phẩm',
                '@((int)VoucherProductScope.NoProducts)': 'Không áp dụng sản phẩm'
            };

            const comboScopeLabels = {
                '@((int)VoucherComboScope.AllCombos)': 'Tất cả combo',
                '@((int)VoucherComboScope.SelectedCombos)': 'Một số combo',
                '@((int)VoucherComboScope.NoCombos)': 'Không áp dụng combo'
            };

            const discountTypeLabels = {
                '@((int)VoucherDiscountType.Money)': 'Tiền mặt',
                '@((int)VoucherDiscountType.Percent)': 'Phần trăm'
            };

            const DISCOUNT_TYPE_PERCENT = @((int)VoucherDiscountType.Percent);
            const VALIDITY_UNIT_FOREVER = @((int)RewardValidityUnit.Forever);
            const PRODUCT_SCOPE_ALL = @((int)VoucherProductScope.AllProducts);
            const PRODUCT_SCOPE_SELECTED = @((int)VoucherProductScope.SelectedProducts);
            const PRODUCT_SCOPE_NONE = @((int)VoucherProductScope.NoProducts);
            const COMBO_SCOPE_ALL = @((int)VoucherComboScope.AllCombos);
            const COMBO_SCOPE_SELECTED = @((int)VoucherComboScope.SelectedCombos);
            const COMBO_SCOPE_NONE = @((int)VoucherComboScope.NoCombos);

            const state = {
                items: [],
                page: 1,
                pageSize: Number(pageSizeSelect?.value || 25),
                totalItems: 0,
                totalPages: 0,
                selectedIds: new Set(),
                formMode: 'create',
                editingId: null,
                deletingId: null,
                filters: {
                    search: '',
                    isPublish: ''
                },
                formOptionsLoaded: false,
                formOptions: {
                    products: [],
                    combos: []
                }
            };

            function showAlert(message, type = 'info') {
                if (!alertPlaceholder || !message) {
                    return;
                }

                const wrapper = document.createElement('div');
                wrapper.className = `alert alert-${type} alert-dismissible fade show`;
                wrapper.role = 'alert';
                wrapper.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`;

                alertPlaceholder.append(wrapper);
            }

            function formatCurrency(value) {
                const number = Number(value || 0);
                if (Number.isNaN(number)) {
                    return '0';
                }
                return number.toLocaleString('vi-VN');
            }

            function formatValidity(item) {
                if (!item) {
                    return 'Không xác định';
                }

                if (item.isValidityUnlimited || item.validityUnit === VALIDITY_UNIT_FOREVER) {
                    return 'Vĩnh viễn';
                }

                if (!item.validityValue) {
                    return 'Không xác định';
                }

                const unitKey = String(item.validityUnit);
                const unitText = validityUnitLabels[unitKey] ?? 'Ngày';
                return `${Number(item.validityValue).toLocaleString('vi-VN')} ${unitText}`;
            }

            function formatDiscount(item) {
                if (!item) {
                    return 'Không xác định';
                }

                const discountValue = Number(item.voucherDiscount) || 0;
                if (item.voucherDiscountType === DISCOUNT_TYPE_PERCENT) {
                    const unlimited = item.voucherUnlimitedPercentageDiscount;
                    const baseText = `${discountValue.toLocaleString('vi-VN')}%`;
                    if (unlimited) {
                        return `${baseText} (không giới hạn)`;
                    }

                    const maximum = Number(item.voucherMaximumPercentageReduction) || 0;
                    const maxText = maximum > 0 ? `${formatCurrency(maximum)} đ` : 'Không xác định';
                    return `${baseText} (tối đa ${maxText})`;
                }

                return `${formatCurrency(discountValue)} đ`;
            }

            function formatScope(item) {
                if (!item) {
                    return 'Không xác định';
                }

                const productScopeValue = Number(item.voucherProductScope);
                const comboScopeValue = Number(item.voucherComboScope);

                let productText = productScopeLabels[String(productScopeValue)] ?? 'Không xác định';
                if (productScopeValue === PRODUCT_SCOPE_SELECTED) {
                    const count = Number(item.selectedProductCount || 0);
                    productText += count > 0 ? ` (${count.toLocaleString('vi-VN')})` : ' (0)';
                }

                let comboText = comboScopeLabels[String(comboScopeValue)] ?? 'Không xác định';
                if (comboScopeValue === COMBO_SCOPE_SELECTED) {
                    const count = Number(item.selectedComboCount || 0);
                    comboText += count > 0 ? ` (${count.toLocaleString('vi-VN')})` : ' (0)';
                }

                return `<div><div><strong>SP:</strong> ${productText}</div><div><strong>Combo:</strong> ${comboText}</div></div>`;
            }

            function populateSelectOptions(selectElement, options, valueKey, labelKey, selectedOption = null) {
                if (!selectElement) {
                    return;
                }

                const selectedValue = selectedOption && selectedOption[valueKey] != null
                    ? String(selectedOption[valueKey])
                    : '';
                const selectedLabel = selectedOption ? selectedOption[labelKey] || '' : '';

                selectElement.innerHTML = '<option value="">-- Chọn --</option>';

                let hasSelected = false;
                options.forEach(option => {
                    if (!option) {
                        return;
                    }

                    const value = option[valueKey];
                    if (value === undefined || value === null) {
                        return;
                    }

                    const label = option[labelKey] ?? String(value);
                    const optionElement = document.createElement('option');
                    optionElement.value = String(value);
                    optionElement.textContent = label;

                    if (selectedValue && String(value) === selectedValue) {
                        optionElement.selected = true;
                        hasSelected = true;
                    }

                    selectElement.appendChild(optionElement);
                });

                if (selectedValue && !hasSelected) {
                    const fallbackOption = document.createElement('option');
                    fallbackOption.value = selectedValue;
                    fallbackOption.textContent = selectedLabel || selectedValue;
                    fallbackOption.selected = true;
                    selectElement.appendChild(fallbackOption);
                }
            }

            function refreshRewardProductSelectOptions() {
                if (!formFields.productsContainer) {
                    return;
                }

                const selects = Array.from(formFields.productsContainer.querySelectorAll('.reward-product-select'));
                const selectedValues = new Set(selects.map(select => select.value).filter(value => value));

                selects.forEach(select => {
                    const currentValue = select.value;
                    Array.from(select.options).forEach(option => {
                        if (!option.value) {
                            option.disabled = false;
                            return;
                        }

                        option.disabled = option.value !== currentValue && selectedValues.has(option.value);
                    });
                });
            }

            function refreshRewardComboSelectOptions() {
                if (!formFields.combosContainer) {
                    return;
                }

                const selects = Array.from(formFields.combosContainer.querySelectorAll('.reward-combo-select'));
                const selectedValues = new Set(selects.map(select => select.value).filter(value => value));

                selects.forEach(select => {
                    const currentValue = select.value;
                    Array.from(select.options).forEach(option => {
                        if (!option.value) {
                            option.disabled = false;
                            return;
                        }

                        option.disabled = option.value !== currentValue && selectedValues.has(option.value);
                    });
                });
            }

            function updateRewardProductControlStates() {
                if (!formFields.productsContainer) {
                    return;
                }

                const rowCount = formFields.productsContainer.querySelectorAll('.reward-product-row').length;
                const totalOptions = state.formOptions.products.length;

                if (formFields.addProductBtn) {
                    formFields.addProductBtn.disabled = totalOptions === 0 || rowCount >= totalOptions;
                }

                if (formFields.clearProductsBtn) {
                    formFields.clearProductsBtn.disabled = rowCount === 0;
                }
            }

            function updateRewardComboControlStates() {
                if (!formFields.combosContainer) {
                    return;
                }

                const rowCount = formFields.combosContainer.querySelectorAll('.reward-combo-row').length;
                const totalOptions = state.formOptions.combos.length;

                if (formFields.addComboBtn) {
                    formFields.addComboBtn.disabled = totalOptions === 0 || rowCount >= totalOptions;
                }

                if (formFields.clearCombosBtn) {
                    formFields.clearCombosBtn.disabled = rowCount === 0;
                }
            }

            function createRewardProductRow(productOption = null) {
                const row = document.createElement('div');
                row.className = 'row g-2 align-items-end reward-product-row';

                const selectCol = document.createElement('div');
                selectCol.className = 'col';
                const select = document.createElement('select');
                select.className = 'form-select reward-product-select';
                select.required = true;
                populateSelectOptions(select, state.formOptions.products, 'id', 'name', productOption);
                select.addEventListener('change', () => {
                    refreshRewardProductSelectOptions();
                    updateRewardProductControlStates();
                });
                selectCol.appendChild(select);

                const actionCol = document.createElement('div');
                actionCol.className = 'col-auto';
                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'btn btn-outline-danger';
                removeBtn.innerHTML = '<i class="fas fa-trash"></i>';
                removeBtn.addEventListener('click', () => {
                    row.remove();
                    refreshRewardProductSelectOptions();
                    updateRewardProductControlStates();
                });
                actionCol.appendChild(removeBtn);

                row.appendChild(selectCol);
                row.appendChild(actionCol);
                return row;
            }

            function createRewardComboRow(comboOption = null) {
                const row = document.createElement('div');
                row.className = 'row g-2 align-items-end reward-combo-row';

                const selectCol = document.createElement('div');
                selectCol.className = 'col';
                const select = document.createElement('select');
                select.className = 'form-select reward-combo-select';
                select.required = true;
                populateSelectOptions(select, state.formOptions.combos, 'id', 'name', comboOption);
                select.addEventListener('change', () => {
                    refreshRewardComboSelectOptions();
                    updateRewardComboControlStates();
                });
                selectCol.appendChild(select);

                const actionCol = document.createElement('div');
                actionCol.className = 'col-auto';
                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'btn btn-outline-danger';
                removeBtn.innerHTML = '<i class="fas fa-trash"></i>';
                removeBtn.addEventListener('click', () => {
                    row.remove();
                    refreshRewardComboSelectOptions();
                    updateRewardComboControlStates();
                });
                actionCol.appendChild(removeBtn);

                row.appendChild(selectCol);
                row.appendChild(actionCol);
                return row;
            }

            function addRewardProductRow(productOption = null) {
                if (!formFields.productsContainer) {
                    return;
                }

                if (!productOption && (!state.formOptions.products || state.formOptions.products.length === 0)) {
                    showAlert('Không có dữ liệu sản phẩm để chọn.', 'warning');
                    return;
                }

                const row = createRewardProductRow(productOption);
                formFields.productsContainer.appendChild(row);
                refreshRewardProductSelectOptions();
                updateRewardProductControlStates();
            }

            function addRewardComboRow(comboOption = null) {
                if (!formFields.combosContainer) {
                    return;
                }

                if (!comboOption && (!state.formOptions.combos || state.formOptions.combos.length === 0)) {
                    showAlert('Không có dữ liệu combo để chọn.', 'warning');
                    return;
                }

                const row = createRewardComboRow(comboOption);
                formFields.combosContainer.appendChild(row);
                refreshRewardComboSelectOptions();
                updateRewardComboControlStates();
            }

            function setRewardProductRows(products = []) {
                if (!formFields.productsContainer) {
                    return;
                }

                formFields.productsContainer.innerHTML = '';

                if (Array.isArray(products) && products.length > 0) {
                    products.forEach(product => {
                        addRewardProductRow(product);
                    });
                }

                refreshRewardProductSelectOptions();
                updateRewardProductControlStates();
            }

            function setRewardComboRows(combos = []) {
                if (!formFields.combosContainer) {
                    return;
                }

                formFields.combosContainer.innerHTML = '';

                if (Array.isArray(combos) && combos.length > 0) {
                    combos.forEach(combo => {
                        addRewardComboRow(combo);
                    });
                }

                refreshRewardComboSelectOptions();
                updateRewardComboControlStates();
            }

            function clearRewardProductRows() {
                if (!formFields.productsContainer) {
                    return;
                }

                formFields.productsContainer.innerHTML = '';
                refreshRewardProductSelectOptions();
                updateRewardProductControlStates();
            }

            function clearRewardComboRows() {
                if (!formFields.combosContainer) {
                    return;
                }

                formFields.combosContainer.innerHTML = '';
                refreshRewardComboSelectOptions();
                updateRewardComboControlStates();
            }

            function getSelectedProductIds() {
                if (!formFields.productsContainer) {
                    return [];
                }

                const selects = Array.from(formFields.productsContainer.querySelectorAll('.reward-product-select'));
                const ids = selects
                    .map(select => Number(select.value))
                    .filter(value => Number.isFinite(value) && value > 0);

                return Array.from(new Set(ids));
            }

            function getSelectedComboIds() {
                if (!formFields.combosContainer) {
                    return [];
                }

                const selects = Array.from(formFields.combosContainer.querySelectorAll('.reward-combo-select'));
                const ids = selects
                    .map(select => Number(select.value))
                    .filter(value => Number.isFinite(value) && value > 0);

                return Array.from(new Set(ids));
            }

            function mergeProductOptions(products = []) {
                if (!Array.isArray(products) || products.length === 0) {
                    return;
                }

                const existingIds = new Set(state.formOptions.products.map(product => String(product.id)));
                products.forEach(product => {
                    const idValue = product?.id ?? product?.Id;
                    if (idValue == null) {
                        return;
                    }

                    const id = String(idValue);
                    if (!existingIds.has(id)) {
                        state.formOptions.products.push({
                            id: Number(idValue),
                            name: product?.name ?? product?.Name ?? `Sản phẩm #${id}`
                        });
                        existingIds.add(id);
                    }
                });

                refreshRewardProductSelectOptions();
                updateRewardProductControlStates();
            }

            function mergeComboOptions(combos = []) {
                if (!Array.isArray(combos) || combos.length === 0) {
                    return;
                }

                const existingIds = new Set(state.formOptions.combos.map(combo => String(combo.id)));
                combos.forEach(combo => {
                    const idValue = combo?.id ?? combo?.Id;
                    if (idValue == null) {
                        return;
                    }

                    const id = String(idValue);
                    if (!existingIds.has(id)) {
                        state.formOptions.combos.push({
                            id: Number(idValue),
                            name: combo?.name ?? combo?.Name ?? `Combo #${id}`
                        });
                        existingIds.add(id);
                    }
                });

                refreshRewardComboSelectOptions();
                updateRewardComboControlStates();
            }

            async function ensureFormOptionsLoaded() {
                if (state.formOptionsLoaded) {
                    return;
                }

                try {
                    const response = await fetch(`${API_BASE_URL}/form-options`, {
                        headers: { 'Accept': 'application/json' }
                    });

                    if (!response.ok) {
                        throw new Error('Không thể tải danh sách sản phẩm/combo.');
                    }

                    const data = await response.json();
                    state.formOptions.products = Array.isArray(data.products)
                        ? data.products.map(product => ({
                            id: Number(product?.id ?? product?.Id),
                            name: product?.name ?? product?.Name ?? `Sản phẩm #${product?.id ?? product?.Id ?? ''}`
                        })).filter(product => Number.isFinite(product.id) && product.id > 0)
                        : [];
                    state.formOptions.combos = Array.isArray(data.combos)
                        ? data.combos.map(combo => ({
                            id: Number(combo?.id ?? combo?.Id),
                            name: combo?.name ?? combo?.Name ?? `Combo #${combo?.id ?? combo?.Id ?? ''}`
                        })).filter(combo => Number.isFinite(combo.id) && combo.id > 0)
                        : [];
                    state.formOptionsLoaded = true;
                    refreshRewardProductSelectOptions();
                    refreshRewardComboSelectOptions();
                    updateRewardProductControlStates();
                    updateRewardComboControlStates();
                } catch (error) {
                    showAlert(error.message || 'Không thể tải dữ liệu lựa chọn.', 'danger');
                }
            }

            function ensureScopeOptionAvailability() {
                let productScopeValue = Number(formFields.voucherProductScopeSelect?.value ?? PRODUCT_SCOPE_ALL);
                let comboScopeValue = Number(formFields.voucherComboScopeSelect?.value ?? COMBO_SCOPE_ALL);

                if (!formFields.voucherProductScopeSelect || !formFields.voucherComboScopeSelect) {
                    return { productScopeValue, comboScopeValue };
                }

                const productNoneOption = Array.from(formFields.voucherProductScopeSelect.options || [])
                    .find(option => Number(option.value) === PRODUCT_SCOPE_NONE);
                const comboNoneOption = Array.from(formFields.voucherComboScopeSelect.options || [])
                    .find(option => Number(option.value) === COMBO_SCOPE_NONE);

                if (comboNoneOption) {
                    const hideComboNone = productScopeValue === PRODUCT_SCOPE_NONE;
                    comboNoneOption.hidden = hideComboNone;
                    comboNoneOption.disabled = hideComboNone;

                    if (hideComboNone && comboScopeValue === COMBO_SCOPE_NONE) {
                        formFields.voucherComboScopeSelect.value = String(COMBO_SCOPE_ALL);
                        comboScopeValue = COMBO_SCOPE_ALL;
                    }
                }

                if (productNoneOption) {
                    const hideProductNone = comboScopeValue === COMBO_SCOPE_NONE;
                    productNoneOption.hidden = hideProductNone;
                    productNoneOption.disabled = hideProductNone;

                    if (hideProductNone && productScopeValue === PRODUCT_SCOPE_NONE) {
                        formFields.voucherProductScopeSelect.value = String(PRODUCT_SCOPE_ALL);
                        productScopeValue = PRODUCT_SCOPE_ALL;
                    }
                }

                return { productScopeValue, comboScopeValue };
            }

            function updateScopeControls() {
                const { productScopeValue, comboScopeValue } = ensureScopeOptionAvailability();

                if (formFields.productsWrapper) {
                    const showProducts = productScopeValue === PRODUCT_SCOPE_SELECTED;
                    formFields.productsWrapper.classList.toggle('d-none', !showProducts);
                    if (showProducts) {
                        if (formFields.productsContainer && formFields.productsContainer.childElementCount === 0) {
                            addRewardProductRow();
                        } else {
                            refreshRewardProductSelectOptions();
                            updateRewardProductControlStates();
                        }
                    } else {
                        clearRewardProductRows();
                    }
                }

                if (formFields.combosWrapper) {
                    const showCombos = comboScopeValue === COMBO_SCOPE_SELECTED;
                    formFields.combosWrapper.classList.toggle('d-none', !showCombos);
                    if (showCombos) {
                        if (formFields.combosContainer && formFields.combosContainer.childElementCount === 0) {
                            addRewardComboRow();
                        } else {
                            refreshRewardComboSelectOptions();
                            updateRewardComboControlStates();
                        }
                    } else {
                        clearRewardComboRows();
                    }
                }
            }

            function updateQuantityControls() {
                if (!formFields.quantityUnlimitedSwitch || !formFields.quantityInput) {
                    return;
                }

                const isUnlimited = formFields.quantityUnlimitedSwitch.checked;
                formFields.quantityInput.disabled = isUnlimited;
                if (isUnlimited) {
                    formFields.quantityInput.value = '';
                } else if (!formFields.quantityInput.value) {
                    formFields.quantityInput.value = 1;
                }
            }

            function updateBulkActionsVisibility() {
                if (!canDelete || !bulkActions) {
                    return;
                }

                const hasSelection = state.selectedIds.size > 0;
                bulkActions.classList.toggle('d-none', !hasSelection);
                if (bulkDeleteBtn) {
                    bulkDeleteBtn.disabled = !hasSelection;
                }
            }

            function renderPagination() {
                if (!paginationSummary) {
                    return;
                }

                if (state.totalItems === 0) {
                    paginationSummary.textContent = 'Không có vật phẩm nào.';
                    return;
                }

                const startItem = (state.page - 1) * state.pageSize + 1;
                const endItem = Math.min(state.totalItems, state.page * state.pageSize);
                paginationSummary.textContent = `Hiển thị ${startItem.toLocaleString('vi-VN')} - ${endItem.toLocaleString('vi-VN')} trong tổng số ${state.totalItems.toLocaleString('vi-VN')} vật phẩm.`;
            }

            function renderTable() {
                if (!canView) {
                    tableBody.innerHTML = `<tr><td colspan="${canDelete ? 11 : 10}" class="text-center py-4 text-muted">Bạn không có quyền xem danh sách vật phẩm.</td></tr>`;
                    tableStatus.textContent = 'Không có dữ liệu để hiển thị.';
                    return;
                }

                if (!state.items.length) {
                    tableBody.innerHTML = `<tr><td colspan="${canDelete ? 11 : 10}" class="text-center py-4 text-muted">Không có vật phẩm nào để hiển thị.</td></tr>`;
                    tableStatus.textContent = 'Không có dữ liệu để hiển thị.';
                    return;
                }

                const rows = state.items.map(item => {
                    const rankKey = item.minimumRank === null || item.minimumRank === undefined ? 'none' : String(item.minimumRank);
                    const rankText = rankLabels[rankKey] ?? rankLabels.none;
                    const redeemedText = Number(item.redeemed).toLocaleString('vi-VN');
                    const hasLimitedQuantity = !item.isQuantityUnlimited && Number(item.quantity) > 0;
                    const quantityText = hasLimitedQuantity
                        ? `${redeemedText} / ${Number(item.quantity).toLocaleString('vi-VN')}`
                        : `${redeemedText} / Không giới hạn`;
                    const validityText = formatValidity(item);
                    const discountText = formatDiscount(item);
                    const scopeText = formatScope(item);
                    const minimumRequirementsText = `${formatCurrency(item.voucherMinimumRequirements)} đ`;

                    const statusBadge = item.isPublish
                        ? '<span class="badge bg-success">Cho phép</span>'
                        : '<span class="badge bg-secondary">Tạm khóa</span>';

                    const actions = [];
                    actions.push(`<button type="button" class="btn btn-sm btn-outline-info me-1" data-action="detail" data-id="${item.id}"><i class="fas fa-eye"></i></button>`);

                    if (canUpdate) {
                        actions.push(`<button type="button" class="btn btn-sm btn-outline-warning me-1" data-action="edit" data-id="${item.id}"><i class="fas fa-pen"></i></button>`);
                    }

                    if (canDelete) {
                        actions.push(`<button type="button" class="btn btn-sm btn-outline-danger" data-action="delete" data-id="${item.id}" data-name="${item.name}"><i class="fas fa-trash"></i></button>`);
                    }

                    const selectCell = canDelete
                        ? `<td class="text-center"><input type="checkbox" class="form-check-input reward-select" data-id="${item.id}" ${state.selectedIds.has(item.id) ? 'checked' : ''}></td>`
                        : '';

                    return `
                        <tr data-id="${item.id}">
                            ${selectCell}
                            <td class="fw-semibold">${item.name}</td>
                            <td>${formatCurrency(item.pointCost)} điểm</td>
                            <td>${discountText}</td>
                            <td>${scopeText}</td>
                            <td>${minimumRequirementsText}</td>
                            <td>${rankText}</td>
                            <td>${quantityText}</td>
                            <td>${validityText}</td>
                            <td>${statusBadge}</td>
                            <td class="text-center">${actions.join('')}</td>
                        </tr>`;
                });

                tableBody.innerHTML = rows.join('');
                tableStatus.textContent = `Hiển thị ${state.items.length.toLocaleString('vi-VN')} / ${state.totalItems.toLocaleString('vi-VN')} vật phẩm.`;

                if (canDelete) {
                    tableBody.querySelectorAll('.reward-select').forEach(checkbox => {
                        checkbox.addEventListener('change', event => {
                            const id = Number(event.target.dataset.id);
                            if (event.target.checked) {
                                state.selectedIds.add(id);
                            } else {
                                state.selectedIds.delete(id);
                            }
                            updateBulkActionsVisibility();
                            if (selectAllCheckbox) {
                                const totalSelectable = tableBody.querySelectorAll('.reward-select').length;
                                const selectedCount = tableBody.querySelectorAll('.reward-select:checked').length;
                                selectAllCheckbox.checked = selectedCount > 0 && selectedCount === totalSelectable;
                                if ('indeterminate' in selectAllCheckbox) {
                                    selectAllCheckbox.indeterminate = selectedCount > 0 && selectedCount < totalSelectable;
                                }
                            }
                        });
                    });
                }

                tableBody.querySelectorAll('button[data-action="detail"]').forEach(button => {
                    button.addEventListener('click', () => openDetailModal(Number(button.dataset.id)));
                });

                if (canUpdate) {
                    tableBody.querySelectorAll('button[data-action="edit"]').forEach(button => {
                        button.addEventListener('click', () => openEditModal(Number(button.dataset.id)));
                    });
                }

                if (canDelete) {
                    tableBody.querySelectorAll('button[data-action="delete"]').forEach(button => {
                        button.addEventListener('click', () => openDeleteModal(Number(button.dataset.id), button.dataset.name));
                    });
                }
            }

            function resetForm() {
                rewardForm.reset();
                rewardFormErrors.classList.add('d-none');
                rewardFormErrors.innerHTML = '';
                state.formMode = 'create';
                state.editingId = null;

                if (formFields.typeSelect) {
                    formFields.typeSelect.value = '@((int)RewardItemType.Voucher)';
                }
                if (formFields.minimumRankSelect) {
                    formFields.minimumRankSelect.value = '';
                }
                if (formFields.quantityInput) {
                    formFields.quantityInput.value = 1;
                }
                if (formFields.quantityUnlimitedSwitch) {
                    formFields.quantityUnlimitedSwitch.checked = false;
                }
                if (formFields.validityUnitSelect) {
                    formFields.validityUnitSelect.value = '@((int)RewardValidityUnit.Day)';
                }
                if (formFields.validityValueInput) {
                    formFields.validityValueInput.value = 1;
                }
                if (formFields.validityUnlimitedSwitch) {
                    formFields.validityUnlimitedSwitch.checked = false;
                }
                if (formFields.isPublishSwitch) {
                    formFields.isPublishSwitch.checked = true;
                }
                if (formFields.voucherIsForNewUsersOnlySwitch) {
                    formFields.voucherIsForNewUsersOnlySwitch.checked = false;
                }
                if (formFields.voucherDiscountTypeSelect) {
                    formFields.voucherDiscountTypeSelect.value = '@((int)VoucherDiscountType.Money)';
                }
                if (formFields.voucherDiscountInput) {
                    formFields.voucherDiscountInput.value = '';
                }
                if (formFields.voucherMinimumRequirementsInput) {
                    formFields.voucherMinimumRequirementsInput.value = 0;
                }
                if (formFields.voucherQuantityInput) {
                    formFields.voucherQuantityInput.value = 1;
                }
                if (formFields.voucherUnlimitedPercentageSwitch) {
                    formFields.voucherUnlimitedPercentageSwitch.checked = false;
                }
                if (formFields.voucherMaximumPercentageInput) {
                    formFields.voucherMaximumPercentageInput.value = '';
                }
                if (formFields.voucherHasCombinedLimitSwitch) {
                    formFields.voucherHasCombinedLimitSwitch.checked = false;
                }
                if (formFields.voucherMaxCombinedInput) {
                    formFields.voucherMaxCombinedInput.value = '';
                }
                if (formFields.voucherProductScopeSelect) {
                    formFields.voucherProductScopeSelect.value = '@((int)VoucherProductScope.AllProducts)';
                }
                if (formFields.voucherComboScopeSelect) {
                    formFields.voucherComboScopeSelect.value = '@((int)VoucherComboScope.AllCombos)';
                }

                clearRewardProductRows();
                clearRewardComboRows();

                updateQuantityControls();
                updateScopeControls();
                updateValidityControls();
                updatePercentageControls();
                updateCombinedLimitControls();
            }

            function updateValidityControls() {
                if (!formFields.validityUnlimitedSwitch) {
                    return;
                }

                const isUnlimited = formFields.validityUnlimitedSwitch.checked;
                if (formFields.validityValueInput) {
                    formFields.validityValueInput.disabled = isUnlimited;
                    if (isUnlimited) {
                        formFields.validityValueInput.value = '';
                    } else if (!formFields.validityValueInput.value) {
                        formFields.validityValueInput.value = 1;
                    }
                }

                if (formFields.validityUnitSelect) {
                    formFields.validityUnitSelect.disabled = isUnlimited;
                    if (isUnlimited) {
                        formFields.validityUnitSelect.value = String(VALIDITY_UNIT_FOREVER);
                    } else if (formFields.validityUnitSelect.value === String(VALIDITY_UNIT_FOREVER)) {
                        formFields.validityUnitSelect.value = '@((int)RewardValidityUnit.Day)';
                    }
                }
            }

            function updatePercentageControls() {
                if (!formFields.voucherDiscountTypeSelect) {
                    return;
                }

                const isPercent = Number(formFields.voucherDiscountTypeSelect.value) === DISCOUNT_TYPE_PERCENT;

                if (formFields.voucherUnlimitedPercentageSwitch) {
                    formFields.voucherUnlimitedPercentageSwitch.disabled = !isPercent;
                    if (!isPercent) {
                        formFields.voucherUnlimitedPercentageSwitch.checked = false;
                    }
                }

                const shouldDisableMaximum = !isPercent || (formFields.voucherUnlimitedPercentageSwitch && formFields.voucherUnlimitedPercentageSwitch.checked);
                if (formFields.voucherMaximumPercentageInput) {
                    formFields.voucherMaximumPercentageInput.disabled = shouldDisableMaximum;
                    if (shouldDisableMaximum) {
                        formFields.voucherMaximumPercentageInput.value = '';
                    }
                }
            }

            function updateCombinedLimitControls() {
                if (!formFields.voucherHasCombinedLimitSwitch || !formFields.voucherMaxCombinedInput) {
                    return;
                }

                const hasLimit = formFields.voucherHasCombinedLimitSwitch.checked;
                formFields.voucherMaxCombinedInput.disabled = !hasLimit;
                if (!hasLimit) {
                    formFields.voucherMaxCombinedInput.value = '';
                }
            }

            async function loadRewards() {
                if (!canView) {
                    renderTable();
                    return;
                }

                const params = new URLSearchParams();
                params.set('page', state.page.toString());
                params.set('pageSize', state.pageSize.toString());
                if (state.filters.search) {
                    params.set('search', state.filters.search);
                }
                if (state.filters.isPublish) {
                    params.set('isPublish', state.filters.isPublish);
                }

                tableStatus.textContent = 'Đang tải dữ liệu vật phẩm...';

                try {
                    const response = await fetch(`${API_BASE_URL}?${params.toString()}`, {
                        headers: { 'Accept': 'application/json' }
                    });

                    if (!response.ok) {
                        throw new Error('Không thể tải dữ liệu vật phẩm.');
                    }

                    const result = await response.json();
                    state.items = result.items || [];
                    state.page = Number(result.currentPage || 1);
                    state.pageSize = Number(result.pageSize || state.pageSize);
                    state.totalItems = Number(result.totalItems || 0);
                    state.totalPages = Number(result.totalPages || 0);
                    renderTable();
                    renderPagination();
                    updateBulkActionsVisibility();
                } catch (error) {
                    state.items = [];
                    renderTable();
                    renderPagination();
                    showAlert(error.message || 'Không thể tải dữ liệu vật phẩm.', 'danger');
                }
            }

            function collectFormData() {
                const isValidityUnlimited = formFields.validityUnlimitedSwitch ? formFields.validityUnlimitedSwitch.checked : false;
                const isQuantityUnlimited = formFields.quantityUnlimitedSwitch ? formFields.quantityUnlimitedSwitch.checked : false;
                const selectedValidityUnit = Number(formFields.validityUnitSelect?.value || 0);
                const validityUnit = isValidityUnlimited ? VALIDITY_UNIT_FOREVER : selectedValidityUnit;
                const discountType = Number(formFields.voucherDiscountTypeSelect?.value || @((int)VoucherDiscountType.Money));
                const isPercentDiscount = discountType === DISCOUNT_TYPE_PERCENT;
                const unlimitedPercentage = isPercentDiscount && (formFields.voucherUnlimitedPercentageSwitch?.checked ?? false);
                const hasCombinedLimit = formFields.voucherHasCombinedLimitSwitch?.checked ?? false;
                const productScopeValue = Number(formFields.voucherProductScopeSelect?.value || PRODUCT_SCOPE_ALL);
                const comboScopeValue = Number(formFields.voucherComboScopeSelect?.value || COMBO_SCOPE_ALL);
                const selectedProductIds = getSelectedProductIds();
                const selectedComboIds = getSelectedComboIds();

                return {
                    type: Number(formFields.typeSelect?.value || @((int)RewardItemType.Voucher)),
                    name: formFields.nameInput.value?.trim(),
                    description: formFields.descriptionInput.value?.trim(),
                    pointCost: Number(formFields.pointCostInput.value || 0),
                    minimumRank: formFields.minimumRankSelect.value ? Number(formFields.minimumRankSelect.value) : null,
                    quantity: isQuantityUnlimited ? 0 : Number(formFields.quantityInput.value || 0),
                    validityValue: isValidityUnlimited ? 0 : Number(formFields.validityValueInput.value || 0),
                    validityUnit,
                    isValidityUnlimited,
                    isQuantityUnlimited,
                    isPublish: formFields.isPublishSwitch.checked,
                    voucherIsForNewUsersOnly: formFields.voucherIsForNewUsersOnlySwitch?.checked ?? false,
                    voucherDiscountType: discountType,
                    voucherDiscount: Number(formFields.voucherDiscountInput?.value || 0),
                    voucherMinimumRequirements: Number(formFields.voucherMinimumRequirementsInput?.value || 0),
                    voucherUnlimitedPercentageDiscount: unlimitedPercentage,
                    voucherMaximumPercentageReduction: unlimitedPercentage ? null : Number(formFields.voucherMaximumPercentageInput?.value || 0),
                    voucherHasCombinedUsageLimit: hasCombinedLimit,
                    voucherMaxCombinedUsageCount: hasCombinedLimit ? Number(formFields.voucherMaxCombinedInput?.value || 0) : null,
                    voucherProductScope: productScopeValue,
                    voucherComboScope: comboScopeValue,
                    voucherQuantity: Number(formFields.voucherQuantityInput?.value || 1),
                    productIds: productScopeValue === PRODUCT_SCOPE_SELECTED ? selectedProductIds : [],
                    comboIds: comboScopeValue === COMBO_SCOPE_SELECTED ? selectedComboIds : []
                };
            }
            async function submitForm(event) {
                event.preventDefault();
                rewardFormErrors.classList.add('d-none');
                rewardFormErrors.innerHTML = '';

                const payload = collectFormData();
                const method = state.formMode === 'edit' ? 'PUT' : 'POST';
                const url = state.formMode === 'edit'
                    ? `${API_BASE_URL}/${state.editingId}`
                    : API_BASE_URL;

                rewardSubmitBtn.disabled = true;
                rewardSubmitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Đang lưu...';

                try {
                    const response = await fetch(url, {
                        method,
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'RequestVerificationToken': antiForgeryToken
                        },
                        body: JSON.stringify(payload)
                    });

                    if (response.status === 400 || response.status === 422) {
                        const errorData = await response.json().catch(() => null);
                        const errors = errorData?.errors;
                        if (errors) {
                            const messages = [];
                            Object.keys(errors).forEach(key => {
                                const fieldErrors = errors[key];
                                if (Array.isArray(fieldErrors)) {
                                    messages.push(...fieldErrors);
                                }
                            });

                            if (messages.length) {
                                rewardFormErrors.innerHTML = messages.map(message => `<div>${message}</div>`).join('');
                                rewardFormErrors.classList.remove('d-none');
                            }
                        }
                        throw new Error(errorData?.title || 'Không thể lưu vật phẩm.');
                    }

                    if (!response.ok) {
                        throw new Error('Không thể lưu vật phẩm đổi thưởng.');
                    }

                    rewardModal.hide();
                    showAlert('Đã lưu vật phẩm đổi thưởng thành công.', 'success');
                    await loadRewards();
                } catch (error) {
                    if (!rewardFormErrors.classList.contains('d-none') && rewardFormErrors.innerHTML) {
                        showAlert(error.message || 'Không thể lưu vật phẩm.', 'danger');
                    } else {
                        showAlert(error.message || 'Không thể lưu vật phẩm.', 'danger');
                    }
                } finally {
                    rewardSubmitBtn.disabled = false;
                    rewardSubmitBtn.innerHTML = 'Lưu';
                }
            }

            async function openCreateModal() {
                resetForm();
                rewardModalLabel.textContent = 'Thêm vật phẩm';
                rewardSubmitBtn.textContent = 'Thêm mới';
                await ensureFormOptionsLoaded();
                updateScopeControls();
                rewardModal.show();
            }

            async function openEditModal(id) {
                resetForm();
                rewardModalLabel.textContent = 'Chỉnh sửa vật phẩm';
                rewardSubmitBtn.textContent = 'Cập nhật';
                state.formMode = 'edit';
                state.editingId = id;

                try {
                    await ensureFormOptionsLoaded();
                    const response = await fetch(`${API_BASE_URL}/${id}`, {
                        headers: { 'Accept': 'application/json' }
                    });

                    if (!response.ok) {
                        throw new Error('Không thể tải thông tin vật phẩm.');
                    }

                    const reward = await response.json();
                    if (formFields.typeSelect) {
                        formFields.typeSelect.value = String(reward.type ?? @((int)RewardItemType.Voucher));
                    }
                    formFields.nameInput.value = reward.name || '';
                    formFields.descriptionInput.value = reward.description || '';
                    formFields.pointCostInput.value = Number(reward.pointCost || 0);
                    formFields.minimumRankSelect.value = reward.minimumRank ?? '';
                    const isQuantityUnlimited = Boolean(reward.isQuantityUnlimited);
                    if (formFields.quantityUnlimitedSwitch) {
                        formFields.quantityUnlimitedSwitch.checked = isQuantityUnlimited;
                    }
                    if (formFields.quantityInput) {
                        formFields.quantityInput.value = isQuantityUnlimited ? '' : Number(reward.quantity || 0);
                    }
                    const isValidityUnlimited = Boolean(reward.isValidityUnlimited) || reward.validityUnit === VALIDITY_UNIT_FOREVER;
                    if (formFields.validityUnlimitedSwitch) {
                        formFields.validityUnlimitedSwitch.checked = isValidityUnlimited;
                    }
                    if (formFields.validityValueInput) {
                        formFields.validityValueInput.value = isValidityUnlimited ? '' : Number(reward.validityValue || 0);
                    }
                    if (formFields.validityUnitSelect) {
                        formFields.validityUnitSelect.value = String(reward.validityUnit ?? @((int)RewardValidityUnit.Day));
                    }
                    formFields.isPublishSwitch.checked = Boolean(reward.isPublish);
                    if (formFields.voucherIsForNewUsersOnlySwitch) {
                        formFields.voucherIsForNewUsersOnlySwitch.checked = Boolean(reward.voucherIsForNewUsersOnly);
                    }
                    if (formFields.voucherDiscountTypeSelect) {
                        formFields.voucherDiscountTypeSelect.value = String(reward.voucherDiscountType ?? @((int)VoucherDiscountType.Money));
                    }
                    if (formFields.voucherDiscountInput) {
                        formFields.voucherDiscountInput.value = Number(reward.voucherDiscount || 0);
                    }
                    if (formFields.voucherMinimumRequirementsInput) {
                        formFields.voucherMinimumRequirementsInput.value = Number(reward.voucherMinimumRequirements || 0);
                    }
                    if (formFields.voucherQuantityInput) {
                        formFields.voucherQuantityInput.value = Number(reward.voucherQuantity || 1);
                    }
                    if (formFields.voucherUnlimitedPercentageSwitch) {
                        formFields.voucherUnlimitedPercentageSwitch.checked = Boolean(reward.voucherUnlimitedPercentageDiscount);
                    }
                    if (formFields.voucherMaximumPercentageInput) {
                        formFields.voucherMaximumPercentageInput.value = reward.voucherMaximumPercentageReduction != null
                            ? Number(reward.voucherMaximumPercentageReduction)
                            : '';
                    }
                    if (formFields.voucherHasCombinedLimitSwitch) {
                        formFields.voucherHasCombinedLimitSwitch.checked = Boolean(reward.voucherHasCombinedUsageLimit);
                    }
                    if (formFields.voucherMaxCombinedInput) {
                        formFields.voucherMaxCombinedInput.value = reward.voucherMaxCombinedUsageCount != null
                            ? Number(reward.voucherMaxCombinedUsageCount)
                            : '';
                    }
                    const productScopeValue = reward.voucherProductScope ?? @((int)VoucherProductScope.AllProducts);
                    const comboScopeValue = reward.voucherComboScope ?? @((int)VoucherComboScope.AllCombos);
                    if (formFields.voucherProductScopeSelect) {
                        formFields.voucherProductScopeSelect.value = String(productScopeValue);
                    }
                    if (formFields.voucherComboScopeSelect) {
                        formFields.voucherComboScopeSelect.value = String(comboScopeValue);
                    }

                    const selectedProducts = Array.isArray(reward.selectedProducts)
                        ? reward.selectedProducts.map(product => ({
                            id: Number(product?.id ?? product?.Id),
                            name: product?.name ?? product?.Name ?? `Sản phẩm #${product?.id ?? product?.Id ?? ''}`
                        })).filter(product => Number.isFinite(product.id) && product.id > 0)
                        : [];
                    const selectedCombos = Array.isArray(reward.selectedCombos)
                        ? reward.selectedCombos.map(combo => ({
                            id: Number(combo?.id ?? combo?.Id),
                            name: combo?.name ?? combo?.Name ?? `Combo #${combo?.id ?? combo?.Id ?? ''}`
                        })).filter(combo => Number.isFinite(combo.id) && combo.id > 0)
                        : [];

                    mergeProductOptions(selectedProducts);
                    mergeComboOptions(selectedCombos);
                    setRewardProductRows(selectedProducts);
                    setRewardComboRows(selectedCombos);

                    updateQuantityControls();
                    updateValidityControls();
                    updatePercentageControls();
                    updateCombinedLimitControls();
                    updateScopeControls();

                    rewardModal.show();
                } catch (error) {
                    showAlert(error.message || 'Không thể tải thông tin vật phẩm.', 'danger');
                }
            }

            function openDetailModal(id) {
                detailModalBody.innerHTML = '<div class="text-center text-muted py-4">Đang tải thông tin...</div>';
                detailModal.show();

                fetch(`${API_BASE_URL}/${id}`, {
                    headers: { 'Accept': 'application/json' }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Không thể tải thông tin vật phẩm.');
                        }
                        return response.json();
                    })
                    .then(reward => {
                        const rankKey = reward.minimumRank === null || reward.minimumRank === undefined ? 'none' : String(reward.minimumRank);
                        const rankText = rankLabels[rankKey] ?? rankLabels.none;
                        const redeemedDetail = Number(reward.redeemed).toLocaleString('vi-VN');
                        const hasLimitedQuantityDetail = !reward.isQuantityUnlimited && Number(reward.quantity) > 0;
                        const quantityText = hasLimitedQuantityDetail
                            ? `${redeemedDetail} / ${Number(reward.quantity).toLocaleString('vi-VN')}`
                            : `${redeemedDetail} / Không giới hạn`;
                        const validityText = formatValidity(reward);
                        const statusText = reward.isPublish ? 'Cho phép sử dụng' : 'Tạm khóa';
                        const discountText = formatDiscount(reward);
                        const scopeText = formatScope(reward);
                        const minimumRequirementsText = `${formatCurrency(reward.voucherMinimumRequirements)} đ`;
                        const newUserText = reward.voucherIsForNewUsersOnly ? 'Có' : 'Không';
                        const combinedLimitText = reward.voucherHasCombinedUsageLimit
                            ? `${Number(reward.voucherMaxCombinedUsageCount || 0).toLocaleString('vi-VN')} voucher`
                            : 'Không';
                        const voucherQuantityText = Number(reward.voucherQuantity || 1).toLocaleString('vi-VN');
                        const productListHtml = Array.isArray(reward.selectedProducts) && reward.selectedProducts.length
                            ? `<div class="mt-2"><strong>Sản phẩm cụ thể:</strong><ul class="mb-0 ps-3">${reward.selectedProducts.map(product => `<li>${product.name || `Sản phẩm #${product.id}`}</li>`).join('')}</ul></div>`
                            : '';
                        const comboListHtml = Array.isArray(reward.selectedCombos) && reward.selectedCombos.length
                            ? `<div class="mt-2"><strong>Combo cụ thể:</strong><ul class="mb-0 ps-3">${reward.selectedCombos.map(combo => `<li>${combo.name || `Combo #${combo.id}`}</li>`).join('')}</ul></div>`
                            : '';

                        detailModalBody.innerHTML = `
                            <h5 class="text-primary mb-3">${reward.name}</h5>
                            <dl class="row mb-0">
                                <dt class="col-sm-4">Điểm đổi thưởng</dt>
                                <dd class="col-sm-8">${formatCurrency(reward.pointCost)} điểm</dd>
                                <dt class="col-sm-4">Giảm giá</dt>
                                <dd class="col-sm-8">${discountText}</dd>
                                <dt class="col-sm-4">Đơn tối thiểu</dt>
                                <dd class="col-sm-8">${minimumRequirementsText}</dd>
                                <dt class="col-sm-4">Yêu cầu cấp bậc</dt>
                                <dd class="col-sm-8">${rankText}</dd>
                                <dt class="col-sm-4">Số lượng</dt>
                                <dd class="col-sm-8">${quantityText}</dd>
                                <dt class="col-sm-4">Số lượt sử dụng / mã</dt>
                                <dd class="col-sm-8">${voucherQuantityText}</dd>
                                <dt class="col-sm-4">Thời hạn hiệu lực</dt>
                                <dd class="col-sm-8">${validityText}</dd>
                                <dt class="col-sm-4">Phạm vi áp dụng</dt>
                                <dd class="col-sm-8">${scopeText}${productListHtml}${comboListHtml}</dd>
                                <dt class="col-sm-4">Giới hạn áp dụng chung</dt>
                                <dd class="col-sm-8">${combinedLimitText}</dd>
                                <dt class="col-sm-4">Chỉ áp dụng cho khách hàng mới</dt>
                                <dd class="col-sm-8">${newUserText}</dd>
                                <dt class="col-sm-4">Trạng thái</dt>
                                <dd class="col-sm-8">${statusText}</dd>
                                <dt class="col-sm-4">Mô tả</dt>
                                <dd class="col-sm-8">${reward.description}</dd>
                            </dl>`;
                    })
                    .catch(error => {
                        detailModalBody.innerHTML = `<div class="alert alert-danger">${error.message || 'Không thể tải thông tin vật phẩm.'}</div>`;
                    });
            }

            function openDeleteModal(id, name) {
                state.deletingId = id;
                deleteRewardName.textContent = name || `#${id}`;
                deleteModal.show();
            }

            async function deleteReward(id) {
                if (!canDelete) {
                    return;
                }

                try {
                    const response = await fetch(`${API_BASE_URL}/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Accept': 'application/json',
                            'RequestVerificationToken': antiForgeryToken
                        }
                    });

                    if (!response.ok && response.status !== 204) {
                        throw new Error('Không thể xóa vật phẩm.');
                    }

                    deleteModal.hide();
                    showAlert('Đã xóa vật phẩm đổi thưởng.', 'success');
                    state.selectedIds.delete(id);
                    await loadRewards();
                } catch (error) {
                    showAlert(error.message || 'Không thể xóa vật phẩm.', 'danger');
                }
            }

            async function bulkDeleteRewards() {
                if (!canDelete || state.selectedIds.size === 0) {
                    return;
                }

                try {
                    const response = await fetch(`${API_BASE_URL}/bulk-delete`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'RequestVerificationToken': antiForgeryToken
                        },
                        body: JSON.stringify({ ids: Array.from(state.selectedIds) })
                    });

                    if (!response.ok) {
                        const errorData = await response.json().catch(() => null);
                        throw new Error(errorData?.message || 'Không thể xóa các vật phẩm đã chọn.');
                    }

                    bulkDeleteModal.hide();
                    showAlert('Đã xóa các vật phẩm đã chọn.', 'success');
                    state.selectedIds.clear();
                    await loadRewards();
                } catch (error) {
                    showAlert(error.message || 'Không thể xóa các vật phẩm đã chọn.', 'danger');
                }
            }

            function changePage(delta) {
                const newPage = state.page + delta;
                if (newPage < 1 || (state.totalPages > 0 && newPage > state.totalPages)) {
                    return;
                }
                state.page = newPage;
                loadRewards();
            }

            function resetFilters() {
                state.filters.search = '';
                state.filters.isPublish = '';
                if (searchInput) searchInput.value = '';
                if (statusFilterSelect) statusFilterSelect.value = '';
                state.page = 1;
                loadRewards();
            }

            if (createBtn && canCreate) {
                createBtn.addEventListener('click', openCreateModal);
            }

            if (formFields.validityUnlimitedSwitch) {
                formFields.validityUnlimitedSwitch.addEventListener('change', updateValidityControls);
            }

            if (formFields.quantityUnlimitedSwitch) {
                formFields.quantityUnlimitedSwitch.addEventListener('change', updateQuantityControls);
            }

            if (formFields.voucherDiscountTypeSelect) {
                formFields.voucherDiscountTypeSelect.addEventListener('change', updatePercentageControls);
            }

            if (formFields.voucherUnlimitedPercentageSwitch) {
                formFields.voucherUnlimitedPercentageSwitch.addEventListener('change', updatePercentageControls);
            }

            if (formFields.voucherHasCombinedLimitSwitch) {
                formFields.voucherHasCombinedLimitSwitch.addEventListener('change', updateCombinedLimitControls);
            }

            if (formFields.voucherProductScopeSelect) {
                formFields.voucherProductScopeSelect.addEventListener('change', async () => {
                    if (Number(formFields.voucherProductScopeSelect.value) === PRODUCT_SCOPE_SELECTED) {
                        await ensureFormOptionsLoaded();
                    }
                    updateScopeControls();
                });
            }

            if (formFields.voucherComboScopeSelect) {
                formFields.voucherComboScopeSelect.addEventListener('change', async () => {
                    if (Number(formFields.voucherComboScopeSelect.value) === COMBO_SCOPE_SELECTED) {
                        await ensureFormOptionsLoaded();
                    }
                    updateScopeControls();
                });
            }

            if (formFields.addProductBtn) {
                formFields.addProductBtn.addEventListener('click', async () => {
                    await ensureFormOptionsLoaded();
                    addRewardProductRow();
                });
            }

            if (formFields.clearProductsBtn) {
                formFields.clearProductsBtn.addEventListener('click', () => {
                    clearRewardProductRows();
                });
            }

            if (formFields.addComboBtn) {
                formFields.addComboBtn.addEventListener('click', async () => {
                    await ensureFormOptionsLoaded();
                    addRewardComboRow();
                });
            }

            if (formFields.clearCombosBtn) {
                formFields.clearCombosBtn.addEventListener('click', () => {
                    clearRewardComboRows();
                });
            }

            if (formFields.importProductsBtn && formFields.productImportInput) {
                formFields.importProductsBtn.addEventListener('click', () => {
                    formFields.productImportInput.click();
                });

                formFields.productImportInput.addEventListener('change', async event => {
                    const file = event.target?.files?.[0];
                    if (!file) {
                        return;
                    }

                    try {
                        await ensureFormOptionsLoaded();
                        const formData = new FormData();
                        formData.append('file', file);

                        const response = await fetch(`${API_BASE_URL}/import-products`, {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': antiForgeryToken
                            },
                            body: formData
                        });

                        if (!response.ok) {
                            const errorPayload = await response.json().catch(() => null);
                            const message = errorPayload?.message || errorPayload?.Message || 'Không thể nhập danh sách sản phẩm.';
                            throw new Error(message);
                        }

                        const result = await response.json();
                        const importedProducts = Array.isArray(result.products)
                            ? result.products
                            : (Array.isArray(result.Products) ? result.Products : []);
                        const invalidEntries = Array.isArray(result.invalidEntries)
                            ? result.invalidEntries
                            : (Array.isArray(result.InvalidEntries) ? result.InvalidEntries : []);

                        if (!importedProducts.length) {
                            const message = result.message || result.Message || 'Không tìm thấy sản phẩm hợp lệ trong file.';
                            showAlert(message, 'warning');
                            return;
                        }

                        mergeProductOptions(importedProducts);
                        setRewardProductRows(importedProducts);

                        let message = `Đã nhập ${importedProducts.length} sản phẩm hợp lệ.`;
                        if (invalidEntries.length) {
                            message += ` ${invalidEntries.length} dòng không hợp lệ đã được bỏ qua.`;
                            showAlert(message, 'warning');
                        } else {
                            showAlert(message, 'success');
                        }
                    } catch (error) {
                        showAlert(error?.message || 'Không thể nhập danh sách sản phẩm.', 'danger');
                    } finally {
                        event.target.value = '';
                    }
                });
            }

            if (formFields.importCombosBtn && formFields.comboImportInput) {
                formFields.importCombosBtn.addEventListener('click', () => {
                    formFields.comboImportInput.click();
                });

                formFields.comboImportInput.addEventListener('change', async event => {
                    const file = event.target?.files?.[0];
                    if (!file) {
                        return;
                    }

                    try {
                        await ensureFormOptionsLoaded();
                        const formData = new FormData();
                        formData.append('file', file);

                        const response = await fetch(`${API_BASE_URL}/import-combos`, {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': antiForgeryToken
                            },
                            body: formData
                        });

                        if (!response.ok) {
                            const errorPayload = await response.json().catch(() => null);
                            const message = errorPayload?.message || errorPayload?.Message || 'Không thể nhập danh sách combo.';
                            throw new Error(message);
                        }

                        const result = await response.json();
                        const importedCombos = Array.isArray(result.combos)
                            ? result.combos
                            : (Array.isArray(result.Combos) ? result.Combos : []);
                        const invalidEntries = Array.isArray(result.invalidEntries)
                            ? result.invalidEntries
                            : (Array.isArray(result.InvalidEntries) ? result.InvalidEntries : []);

                        if (!importedCombos.length) {
                            const message = result.message || result.Message || 'Không tìm thấy combo hợp lệ trong file.';
                            showAlert(message, 'warning');
                            return;
                        }

                        mergeComboOptions(importedCombos);
                        setRewardComboRows(importedCombos);

                        let message = `Đã nhập ${importedCombos.length} combo hợp lệ.`;
                        if (invalidEntries.length) {
                            message += ` ${invalidEntries.length} dòng không hợp lệ đã được bỏ qua.`;
                            showAlert(message, 'warning');
                        } else {
                            showAlert(message, 'success');
                        }
                    } catch (error) {
                        showAlert(error?.message || 'Không thể nhập danh sách combo.', 'danger');
                    } finally {
                        event.target.value = '';
                    }
                });
            }

            if (rewardForm) {
                rewardForm.addEventListener('submit', submitForm);
            }

            if (refreshBtn) {
                refreshBtn.addEventListener('click', () => {
                    loadRewards();
                });
            }

            if (pageSizeSelect) {
                pageSizeSelect.addEventListener('change', () => {
                    state.pageSize = Number(pageSizeSelect.value || state.pageSize);
                    state.page = 1;
                    loadRewards();
                });
            }

            if (prevPageBtn) {
                prevPageBtn.addEventListener('click', () => changePage(-1));
            }

            if (nextPageBtn) {
                nextPageBtn.addEventListener('click', () => changePage(1));
            }

            if (searchInput) {
                const debouncedSearch = debounce(() => {
                    state.filters.search = searchInput.value?.trim() ?? '';
                    state.page = 1;
                    loadRewards();
                }, 400);
                searchInput.addEventListener('input', debouncedSearch);
            }

            if (statusFilterSelect) {
                statusFilterSelect.addEventListener('change', () => {
                    state.filters.isPublish = statusFilterSelect.value;
                    state.page = 1;
                    loadRewards();
                });
            }

            if (resetFiltersBtn) {
                resetFiltersBtn.addEventListener('click', resetFilters);
            }

            if (selectAllCheckbox && canDelete) {
                selectAllCheckbox.addEventListener('change', event => {
                    const checkboxes = tableBody.querySelectorAll('.reward-select');
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = event.target.checked;
                        const id = Number(checkbox.dataset.id);
                        if (event.target.checked) {
                            state.selectedIds.add(id);
                        } else {
                            state.selectedIds.delete(id);
                        }
                    });
                    updateBulkActionsVisibility();
                });
            }

            if (bulkDeleteBtn && canDelete) {
                bulkDeleteBtn.addEventListener('click', () => {
                    if (state.selectedIds.size === 0) {
                        showAlert('Vui lòng chọn ít nhất một vật phẩm để xóa.', 'warning');
                        return;
                    }
                    bulkDeleteModal.show();
                });
            }

            if (confirmDeleteRewardBtn) {
                confirmDeleteRewardBtn.addEventListener('click', () => {
                    if (state.deletingId) {
                        deleteReward(state.deletingId);
                    }
                });
            }

            if (confirmBulkDeleteRewardBtn) {
                confirmBulkDeleteRewardBtn.addEventListener('click', () => {
                    bulkDeleteRewards();
                });
            }

            function debounce(fn, delay = 300) {
                let timeoutId;
                return (...args) => {
                    if (timeoutId) {
                        clearTimeout(timeoutId);
                    }
                    timeoutId = window.setTimeout(() => {
                        fn(...args);
                    }, delay);
                };
            }

            loadRewards();
        })();
    </script>
}
