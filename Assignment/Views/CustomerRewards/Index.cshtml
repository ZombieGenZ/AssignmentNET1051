@model Assignment.ViewModels.Rewards.CustomerRewardIndexViewModel
@using Assignment.Enums
@using Assignment.Extensions
@using System.Globalization
@using System.Linq
@using System.Collections.Generic
@using System.Text.Json

@{
    ViewData["Title"] = ViewData["Title"] ?? "Đổi thưởng";
    var rewards = Model?.Rewards?.Items ?? Enumerable.Empty<Assignment.ViewModels.Rewards.CustomerRewardItemViewModel>();
    var hasRewards = rewards.Any();
    var successMessage = TempData["RewardSuccess"] as string;
    var errorMessage = TempData["RewardError"] as string;
    var rewardCodesJson = TempData["RewardCodes"] as string;
    List<string>? rewardCodes = null;
    if (!string.IsNullOrWhiteSpace(rewardCodesJson))
    {
        try
        {
            rewardCodes = JsonSerializer.Deserialize<List<string>>(rewardCodesJson) ?? new List<string>();
        }
        catch (JsonException)
        {
            rewardCodes = null;
        }
    }

    var rewardCode = TempData["RewardCode"] as string;
    if (rewardCodes != null && rewardCodes.Any() && string.IsNullOrEmpty(rewardCode))
    {
        rewardCode = rewardCodes.First();
    }
    var validFromString = TempData["RewardValidFrom"] as string;
    var validToString = TempData["RewardValidTo"] as string;

    DateTime? rewardValidFrom = null;
    if (!string.IsNullOrEmpty(validFromString) && DateTime.TryParse(validFromString, CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind, out var parsedFrom))
    {
        rewardValidFrom = parsedFrom;
    }

    DateTime? rewardValidTo = null;
    if (!string.IsNullOrEmpty(validToString) && DateTime.TryParse(validToString, CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind, out var parsedTo))
    {
        rewardValidTo = parsedTo;
    }

    var currentRankName = Model?.Rank.GetDisplayName() ?? CustomerRank.Potential.GetDisplayName();
    var nextRankName = Model?.NextRank?.GetDisplayName();
    long? expToNextRank = null;
    if (Model?.NextRankExp.HasValue == true)
    {
        expToNextRank = Math.Max(0, Model.NextRankExp.Value - Model.Exp);
    }

    var pageSizeOptions = Model?.Rewards?.PageSizeOptions ?? Array.Empty<int>();
    var boosterValue = Model?.Booster ?? 1m;
    var boosterCulture = CultureInfo.GetCultureInfo("vi-VN");
    var boosterDisplay = boosterValue % 1m == 0
        ? $"x{boosterValue.ToString("N0", boosterCulture)}"
        : $"x{boosterValue.ToString("N2", boosterCulture).TrimEnd('0').TrimEnd(',', '.')}";
    var isAtMaxRank = string.IsNullOrEmpty(nextRankName);
    double progressPercent = 100d;
    if (!isAtMaxRank && Model?.NextRankExp.HasValue == true && Model.NextRankExp.Value > 0)
    {
        var cappedExp = Math.Min(Model.Exp, Model.NextRankExp.Value);
        progressPercent = (double)cappedExp / Model.NextRankExp.Value * 100d;
    }
    progressPercent = Math.Max(0d, Math.Min(100d, progressPercent));
}

<div class="container my-4">
    <div class="row g-4 align-items-stretch">
        <div class="col-12 col-lg-4">
            <div class="card shadow-sm h-100 border-0">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="rounded-circle bg-primary bg-opacity-10 text-primary d-inline-flex align-items-center justify-content-center" style="width: 48px; height: 48px;">
                            <i class="fas fa-crown"></i>
                        </div>
                        <div class="ms-3">
                            <h5 class="mb-0 text-primary">Thứ hạng của bạn</h5>
                            <p class="mb-0 text-muted">@currentRankName</p>
                        </div>
                    </div>
                    <dl class="row mb-0">
                        <dt class="col-6 text-muted">EXP hiện tại</dt>
                        <dd class="col-6 text-end fw-semibold">@Model?.Exp.ToString("N0")</dd>
                        <dt class="col-6 text-muted">Điểm hiện có</dt>
                        <dd class="col-6 text-end fw-semibold text-success">@Model?.CurrentPoint.ToString("N0")</dd>
                        <dt class="col-6 text-muted">Tổng điểm tích lũy</dt>
                        <dd class="col-6 text-end fw-semibold">@Model?.TotalPoint.ToString("N0")</dd>
                        <dt class="col-6 text-muted">Booster</dt>
                        <dd class="col-6 text-end fw-semibold text-primary">@boosterDisplay</dd>
                    </dl>
                    <div class="mt-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="text-muted small">Tiến độ lên cấp</span>
                            <span class="fw-semibold">@progressPercent.ToString("N1", boosterCulture)%</span>
                        </div>
                        <div class="progress" style="height: 10px;">
                            <div class="progress-bar" role="progressbar" style="width: @progressPercent.ToString("F1", CultureInfo.InvariantCulture)%" aria-valuenow="@progressPercent.ToString("F1", CultureInfo.InvariantCulture)" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <div class="text-muted small mt-2">
                            @if (!string.IsNullOrEmpty(nextRankName) && expToNextRank.HasValue && expToNextRank.Value > 0)
                            {
                                <span>Còn <strong>@expToNextRank.Value.ToString("N0")</strong> EXP để đạt <strong>@nextRankName</strong>.</span>
                            }
                            else
                            {
                                <span>Bạn đã đạt cấp cao nhất! Booster hiện tại <strong>@boosterDisplay</strong> (Tối đa).</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-lg-8">
            <div class="card shadow-sm h-100 border-0">
                <div class="card-body p-4">
                    <h4 class="mb-3 text-primary"><i class="fas fa-gift me-2"></i>Đổi quà với điểm thưởng</h4>
                    <p class="text-muted mb-0">Chọn những phần quà phù hợp với cấp bậc và số điểm hiện có của bạn. Điểm sẽ được trừ ngay khi đổi thưởng.</p>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
            <strong>@successMessage</strong>
            @if (rewardCodes != null && rewardCodes.Count > 1)
            {
                <div class="mt-2">
                    <div>Danh sách mã đổi thưởng:</div>
                    <ul class="list-unstyled mb-0 mt-1 d-flex flex-wrap gap-2">
                        @foreach (var code in rewardCodes)
                        {
                            <li><span class="badge bg-dark text-uppercase">@code</span></li>
                        }
                    </ul>
                </div>
            }
            else if (!string.IsNullOrEmpty(rewardCode))
            {
                <div class="mt-2">
                    Mã đổi thưởng: <span class="badge bg-dark text-uppercase">@rewardCode</span>
                </div>
            }
            @if (rewardValidFrom.HasValue)
            {
                var endText = rewardValidTo.HasValue
                    ? rewardValidTo.Value.ToString("dd/MM/yyyy HH:mm")
                    : "Vĩnh viễn";
                <div class="text-muted small mt-1">
                    Hiệu lực từ @rewardValidFrom.Value.ToString("dd/MM/yyyy HH:mm") đến @endText.
                </div>
            }
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show mt-4" role="alert">
            @errorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 mt-4 mb-3">
        <h5 class="mb-0 text-secondary">Vật phẩm phù hợp với cấp bậc của bạn</h5>
        @if (pageSizeOptions.Any())
        {
            <form class="d-flex align-items-center gap-2" method="get">
                <input type="hidden" name="page" value="1" />
                <label class="form-label mb-0" for="pageSizeSelect">Hiển thị</label>
                <select id="pageSizeSelect" name="pageSize" class="form-select form-select-sm" onchange="this.form.submit()">
                    @foreach (var option in pageSizeOptions)
                    {
                        <option value="@option" selected="@(option == Model?.Rewards?.PageSize)">@option</option>
                    }
                </select>
                <span class="text-muted small">vật phẩm / trang</span>
            </form>
        }
    </div>

    @if (!hasRewards)
    {
        <div class="text-center py-5 bg-light rounded-3 border border-dashed">
            <i class="fas fa-gift fa-3x text-muted mb-3"></i>
            <h5>Hiện chưa có vật phẩm đổi thưởng nào phù hợp.</h5>
            <p class="text-muted mb-0">Hãy quay lại sau khi chúng tôi cập nhật thêm ưu đãi mới cho bạn.</p>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var reward in rewards)
            {
                var remaining = reward.Quantity > 0 ? Math.Max(0, reward.Quantity - reward.Redeemed) : (long?)null;
                var rankRequirement = reward.MinimumRank?.GetDisplayName() ?? "Không yêu cầu";
                var canRedeem = reward.IsAvailable && reward.PointCost <= (Model?.CurrentPoint ?? 0);
                var validityText = reward.IsValidityUnlimited
                    ? "Vĩnh viễn"
                    : reward.ValidityUnit switch
                    {
                        RewardValidityUnit.Minute => $"{reward.ValidityValue:N0} phút",
                        RewardValidityUnit.Day => $"{reward.ValidityValue:N0} ngày",
                        RewardValidityUnit.Week => $"{reward.ValidityValue:N0} tuần",
                        RewardValidityUnit.Month => $"{reward.ValidityValue:N0} tháng",
                        RewardValidityUnit.Year => $"{reward.ValidityValue:N0} năm",
                        _ => $"{reward.ValidityValue:N0} ngày"
                    };
                long? maxByStock = remaining;
                long? maxByPoints = reward.PointCost > 0 ? Math.Max(0, (Model?.CurrentPoint ?? 0) / reward.PointCost) : (long?)null;
                long? maxRedeemable = maxByStock;
                if (maxByPoints.HasValue)
                {
                    maxRedeemable = maxRedeemable.HasValue ? Math.Min(maxRedeemable.Value, maxByPoints.Value) : maxByPoints.Value;
                }
                <div class="col-12 col-md-6 col-xl-4">
                    <div class="card h-100 shadow-sm border-0">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex align-items-center justify-content-between mb-2">
                                <span class="badge bg-primary bg-opacity-10 text-primary">@rankRequirement</span>
                                <span class="badge @(reward.IsAvailable ? "bg-success" : "bg-secondary")">@(reward.IsAvailable ? "Còn hàng" : "Hết hàng")</span>
                            </div>
                            <h5 class="card-title">@reward.Name</h5>
                            <p class="card-text text-muted flex-grow-1">@reward.Description</p>
                            <ul class="list-unstyled small text-muted mb-3">
                                <li><i class="fas fa-coins me-2"></i>Giá đổi: <strong class="text-success">@reward.PointCost.ToString("N0") điểm</strong></li>
                                <li><i class="fas fa-ticket-alt me-2"></i>Mỗi mã giảm giá: <strong>@reward.VoucherQuantity.ToString("N0") lượt sử dụng</strong></li>
                                <li><i class="fas fa-clock me-2"></i>Hiệu lực: @validityText kể từ khi đổi</li>
                                <li><i class="fas fa-box me-2"></i>@(remaining.HasValue ? $"Còn {remaining.Value:N0}/{reward.Quantity:N0}" : "Không giới hạn")</li>
                            </ul>
                            <form method="post" asp-action="Redeem" class="mt-auto">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@reward.Id" />
                                <input type="hidden" name="page" value="@Model?.Rewards?.CurrentPage" />
                                <input type="hidden" name="pageSize" value="@Model?.Rewards?.PageSize" />
                                <input type="hidden" name="quantity" value="1" class="redeem-quantity-input" />
                                <button type="button"
                                        class="btn btn-primary w-100 redeem-btn"
                                        data-reward-id="@reward.Id"
                                        data-reward-name="@reward.Name"
                                        data-point-cost="@reward.PointCost.ToString(CultureInfo.InvariantCulture)"
                                        data-remaining="@(remaining?.ToString(CultureInfo.InvariantCulture) ?? string.Empty)"
                                        data-max-quantity="@(maxRedeemable?.ToString(CultureInfo.InvariantCulture) ?? string.Empty)"
                                        data-is-quantity-unlimited="@(reward.IsQuantityUnlimited ? "true" : "false")"
                                        data-voucher-quantity="@reward.VoucherQuantity.ToString(CultureInfo.InvariantCulture)"
                                        @(canRedeem ? null : "disabled")>
                                    <i class="fas fa-gift me-2"></i>Đổi thưởng
                                </button>
                                @if (!canRedeem)
                                {
                                    if (!reward.IsAvailable)
                                    {
                                        <div class="text-muted small mt-2">Vật phẩm đã hết số lượng đổi thưởng.</div>
                                    }
                                    else
                                    {
                                        <div class="text-muted small mt-2">@("Bạn cần thêm " + Math.Max(0, reward.PointCost - (Model?.CurrentPoint ?? 0)).ToString("N0") + " điểm để đổi vật phẩm này.")</div>
                                    }
                                }
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (Model?.Rewards?.TotalPages > 1)
        {
            <nav class="mt-4" aria-label="Danh sách vật phẩm đổi thưởng">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(Model.Rewards.CurrentPage <= 1 ? "disabled" : string.Empty)">
                        <a class="page-link" asp-action="Index" asp-route-page="@(Model.Rewards.CurrentPage - 1)" asp-route-pageSize="@Model.Rewards.PageSize">Trước</a>
                    </li>
                    @for (var i = 1; i <= Model.Rewards.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.Rewards.CurrentPage ? "active" : string.Empty)">
                            <a class="page-link" asp-action="Index" asp-route-page="@i" asp-route-pageSize="@Model.Rewards.PageSize">@i</a>
                        </li>
                    }
                    <li class="page-item @(Model.Rewards.CurrentPage >= Model.Rewards.TotalPages ? "disabled" : string.Empty)">
                        <a class="page-link" asp-action="Index" asp-route-page="@(Model.Rewards.CurrentPage + 1)" asp-route-pageSize="@Model.Rewards.PageSize">Sau</a>
                    </li>
                </ul>
            </nav>
        }
    }
</div>

<div class="modal fade" id="redeemQuantityModal" tabindex="-1" aria-labelledby="redeemQuantityModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="redeemQuantityModalLabel">Xác nhận đổi thưởng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <div class="modal-body">
                <p class="mb-3">Nhập số lượng bạn muốn đổi cho <strong id="redeemRewardName"></strong>.</p>
                <div class="mb-3">
                    <label for="redeemQuantityInput" class="form-label">Số lượng</label>
                    <input type="number" min="1" step="1" class="form-control" id="redeemQuantityInput" value="1" />
                    <div class="form-text" id="redeemQuantityHelp">Chọn số lượng vật phẩm cần đổi.</div>
                </div>
                <ul class="list-unstyled small mb-0">
                    <li><i class="fas fa-coins me-2"></i>Điểm mỗi vật phẩm: <strong><span id="redeemPointCost">0</span> điểm</strong></li>
                    <li><i class="fas fa-equals me-2"></i>Tổng điểm cần: <strong><span id="redeemTotalPoints">0</span> điểm</strong></li>
                    <li><i class="fas fa-wallet me-2"></i>Điểm bạn đang có: <strong><span id="redeemCurrentPoints">@Model?.CurrentPoint.ToString("N0")</span> điểm</strong></li>
                </ul>
                <div class="text-muted small mt-3 d-none" id="redeemVoucherQuantityInfo"></div>
                <div class="alert alert-danger d-none mt-3" id="redeemQuantityError"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="confirmRedeemQuantityBtn">Xác nhận đổi</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const modalElement = document.getElementById('redeemQuantityModal');
            if (!modalElement) {
                return;
            }

            const bootstrapModal = typeof bootstrap !== 'undefined' ? new bootstrap.Modal(modalElement) : null;
            if (!bootstrapModal) {
                return;
            }

            const quantityInput = document.getElementById('redeemQuantityInput');
            const quantityHelp = document.getElementById('redeemQuantityHelp');
            const quantityError = document.getElementById('redeemQuantityError');
            const rewardNameText = document.getElementById('redeemRewardName');
            const pointCostText = document.getElementById('redeemPointCost');
            const totalPointsText = document.getElementById('redeemTotalPoints');
            const currentPointsText = document.getElementById('redeemCurrentPoints');
            const voucherQuantityInfo = document.getElementById('redeemVoucherQuantityInfo');
            const confirmButton = document.getElementById('confirmRedeemQuantityBtn');
            const currentPoints = Number('@((Model?.CurrentPoint ?? 0).ToString(CultureInfo.InvariantCulture))');

            let activeForm = null;
            let pointCostPerItem = 0;
            let maxQuantity = null;
            let voucherPerItem = 1;

            const formatNumber = (value) => Number(value || 0).toLocaleString('vi-VN');

            const resetError = () => {
                if (!quantityError) {
                    return;
                }

                quantityError.textContent = '';
                quantityError.classList.add('d-none');
            };

            const updateVoucherInfo = (quantity) => {
                if (!voucherQuantityInfo) {
                    return;
                }

                if (!Number.isFinite(voucherPerItem) || voucherPerItem <= 0) {
                    voucherQuantityInfo.textContent = '';
                    voucherQuantityInfo.classList.add('d-none');
                    return;
                }

                const totalVoucherCount = voucherPerItem * quantity;
                voucherQuantityInfo.textContent = `Mỗi lượt đổi thưởng nhận ${formatNumber(voucherPerItem)} mã giảm giá (tổng ${formatNumber(totalVoucherCount)} mã trong lượt này).`;
                voucherQuantityInfo.classList.remove('d-none');
            };

            const updateTotals = () => {
                if (!quantityInput || !totalPointsText) {
                    return;
                }

                let quantity = Number(quantityInput.value);
                if (!Number.isFinite(quantity) || quantity < 1) {
                    quantity = 1;
                }

                if (maxQuantity !== null && Number.isFinite(maxQuantity) && quantity > maxQuantity) {
                    quantity = maxQuantity;
                    quantityInput.value = String(quantity);
                }

                const totalPoints = pointCostPerItem * quantity;
                totalPointsText.textContent = formatNumber(totalPoints);
                updateVoucherInfo(quantity);
            };

            const showModalForButton = (button) => {
                if (!quantityInput) {
                    return;
                }

                const form = button.closest('form');
                if (!form) {
                    return;
                }

                activeForm = form;
                pointCostPerItem = Number(button.dataset.pointCost || '0');
                const rewardName = button.dataset.rewardName || '';
                const remainingRaw = button.dataset.remaining || '';
                const maxQuantityRaw = button.dataset.maxQuantity || '';
                const isUnlimited = button.dataset.isQuantityUnlimited === 'true';
                const voucherQuantityRaw = button.dataset.voucherQuantity || '';

                maxQuantity = null;
                if (maxQuantityRaw) {
                    const parsedMax = Math.floor(Number(maxQuantityRaw));
                    if (Number.isFinite(parsedMax) && parsedMax > 0) {
                        maxQuantity = parsedMax;
                    }
                }

                quantityInput.value = '1';
                quantityInput.min = '1';
                if (maxQuantity !== null) {
                    quantityInput.max = String(maxQuantity);
                } else {
                    quantityInput.removeAttribute('max');
                }

                if (rewardNameText) {
                    rewardNameText.textContent = rewardName;
                }

                if (pointCostText) {
                    pointCostText.textContent = formatNumber(pointCostPerItem);
                }

                if (currentPointsText) {
                    currentPointsText.textContent = formatNumber(currentPoints);
                }

                if (totalPointsText) {
                    totalPointsText.textContent = formatNumber(pointCostPerItem);
                }

                const parsedVoucherPerItem = Math.floor(Number(voucherQuantityRaw));
                voucherPerItem = Number.isFinite(parsedVoucherPerItem) && parsedVoucherPerItem > 0 ? parsedVoucherPerItem : 1;
                updateVoucherInfo(1);

                if (quantityHelp) {
                    let availabilityText = 'Số lượng còn lại không xác định.';
                    if (isUnlimited) {
                        availabilityText = 'Không giới hạn số lượng.';
                    } else if (remainingRaw) {
                        const remainingValue = Math.floor(Number(remainingRaw));
                        if (Number.isFinite(remainingValue) && remainingValue >= 0) {
                            availabilityText = `Còn lại ${formatNumber(remainingValue)} vật phẩm.`;
                        }
                    }

                    if (maxQuantity !== null) {
                        availabilityText += ` Bạn có thể đổi tối đa ${formatNumber(maxQuantity)} vật phẩm trong lượt này.`;
                    }

                    quantityHelp.textContent = availabilityText;
                }

                resetError();
                bootstrapModal.show();
                updateTotals();
                quantityInput.focus();
                quantityInput.select();
            };

            document.querySelectorAll('.redeem-btn').forEach(button => {
                button.addEventListener('click', (event) => {
                    event.preventDefault();
                    if (button.disabled) {
                        return;
                    }

                    showModalForButton(button);
                });
            });

            quantityInput?.addEventListener('input', () => {
                resetError();
                updateTotals();
            });

            confirmButton?.addEventListener('click', () => {
                if (!activeForm || !quantityInput) {
                    return;
                }

                let quantity = Math.floor(Number(quantityInput.value));
                if (!Number.isFinite(quantity) || quantity < 1) {
                    quantity = 1;
                }

                if (maxQuantity !== null && quantity > maxQuantity) {
                    if (quantityError) {
                        quantityError.textContent = `Bạn chỉ có thể đổi tối đa ${formatNumber(maxQuantity)} vật phẩm trong lượt này.`;
                        quantityError.classList.remove('d-none');
                    }
                    return;
                }

                const hiddenQuantityInput = activeForm.querySelector('input[name="quantity"]');
                if (hiddenQuantityInput) {
                    hiddenQuantityInput.value = String(quantity);
                } else {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'quantity';
                    input.value = String(quantity);
                    activeForm.appendChild(input);
                }

                bootstrapModal.hide();
                activeForm.submit();
            });

            modalElement.addEventListener('hidden.bs.modal', () => {
                activeForm = null;
                maxQuantity = null;
                pointCostPerItem = 0;
                resetError();
            });
        })();
    </script>
}
