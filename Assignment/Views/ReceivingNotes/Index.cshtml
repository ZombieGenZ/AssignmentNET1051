@{
    ViewData["Title"] = "Quản lý phiếu nhập kho";
    Layout = "_AdminLayout";
    var canView = ViewData["CanView"] as bool? ?? false;
    var canCreate = ViewData["CanCreate"] as bool? ?? false;
}

<div class="container-fluid pt-4 px-4" id="receiving-app" data-can-view="@(canView ? "true" : "false")" data-can-create="@(canCreate ? "true" : "false")">
    <div class="card shadow-sm">
        <div class="card-header bg-light d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
            <div>
                <h4 class="mb-0 text-primary">
                    <i class="fas fa-truck-loading me-2"></i>@ViewData["Title"]
                </h4>
            </div>
            <div class="d-flex flex-column flex-md-row align-items-md-center gap-2 ms-md-auto">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="search" class="form-control" id="receivingSearch" placeholder="Tìm kiếm theo mã phiếu hoặc nhà cung cấp" />
                </div>
                @if (canCreate)
                {
                    <button type="button" class="btn btn-primary" id="receivingCreateBtn">
                        <i class="fas fa-plus me-1"></i>Tạo phiếu nhập
                    </button>
                }
            </div>
        </div>
        <div class="card-body">
            <div id="receivingAlert"></div>
            <div class="table-responsive">
                <table class="table table-hover align-middle" id="receivingTable">
                    <thead class="table-light">
                        <tr>
                            <th>Mã phiếu</th>
                            <th>Ngày lập</th>
                            <th>Nhà cung cấp</th>
                            <th>Kho</th>
                            <th>Trạng thái</th>
                            <th>Áp dụng tồn</th>
                            <th class="text-center" style="width: 120px;">Chi tiết</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="7" class="text-center py-4 text-muted">@(canView ? "Đang tải danh sách phiếu nhập..." : "Bạn không có quyền xem danh sách phiếu nhập.")</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="receivingDetailModal" tabindex="-1" aria-labelledby="receivingDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="receivingDetailModalLabel">Chi tiết phiếu nhập</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <div class="modal-body">
                <div id="receivingDetailBody" class="d-flex justify-content-center py-4 text-muted">
                    <div class="spinner-border text-primary" role="status"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<form id="receivingAntiForgeryForm" class="d-none">
    @Html.AntiForgeryToken()
</form>

<div class="modal fade" id="receivingCreateModal" tabindex="-1" aria-labelledby="receivingCreateModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="receivingCreateModalLabel">Tạo phiếu nhập</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <form id="receivingCreateForm" novalidate>
                <div class="modal-body">
                    <div id="receivingFormErrors" class="alert alert-danger d-none" role="alert"></div>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="receivingNoteNumber" class="form-label">Số phiếu</label>
                            <input type="text" class="form-control" id="receivingNoteNumber" maxlength="100" placeholder="Tự động nếu để trống" />
                        </div>
                        <div class="col-md-6">
                            <label for="receivingDate" class="form-label">Ngày lập<span class="text-danger">*</span></label>
                            <input type="date" class="form-control" id="receivingDate" required />
                        </div>
                        <div class="col-md-6">
                            <label for="receivingSupplierId" class="form-label">Mã nhà cung cấp</label>
                            <input type="text" class="form-control" id="receivingSupplierId" maxlength="100" placeholder="Không bắt buộc" />
                        </div>
                        <div class="col-md-6">
                            <label for="receivingSupplierName" class="form-label">Tên nhà cung cấp</label>
                            <input type="text" class="form-control" id="receivingSupplierName" maxlength="255" placeholder="Không bắt buộc" />
                        </div>
                        <div class="col-md-6">
                            <label for="receivingWarehouseId" class="form-label">Kho</label>
                            <input type="number" class="form-control" id="receivingWarehouseId" min="0" step="1" placeholder="Nhập mã kho" />
                        </div>
                        <div class="col-md-6">
                            <label for="receivingStatus" class="form-label">Trạng thái<span class="text-danger">*</span></label>
                            <select id="receivingStatus" class="form-select" required>
                                <option value="0">Bản nháp</option>
                                <option value="1">Hoàn thành</option>
                                <option value="2">Đã hủy</option>
                            </select>
                        </div>
                    </div>

                    <div class="mt-4">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="mb-0">Chi tiết phiếu nhập</h6>
                            <button type="button" class="btn btn-outline-primary btn-sm" id="receivingAddDetailBtn">
                                <i class="fas fa-plus me-1"></i>Thêm dòng
                            </button>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-sm align-middle" id="receivingDetailsTable">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width: 35%;">Nguyên vật liệu</th>
                                        <th style="width: 15%;" class="text-end">Số lượng</th>
                                        <th style="width: 20%;">Đơn vị</th>
                                        <th style="width: 20%;" class="text-end">Đơn giá</th>
                                        <th style="width: 10%;" class="text-center">Xóa</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr data-placeholder="true">
                                        <td colspan="5" class="text-center text-muted py-3">Chưa có nguyên vật liệu.</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary" id="receivingSubmitBtn">
                        <span class="spinner-border spinner-border-sm d-none" id="receivingSubmitSpinner" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Lưu phiếu nhập</span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const app = document.getElementById('receiving-app');
            if (!app) {
                return;
            }

            const tableBody = document.querySelector('#receivingTable tbody');
            const searchInput = document.getElementById('receivingSearch');
            const alertPlaceholder = document.getElementById('receivingAlert');
            const detailModalEl = document.getElementById('receivingDetailModal');
            const detailModal = detailModalEl ? new bootstrap.Modal(detailModalEl) : null;
            const detailBody = document.getElementById('receivingDetailBody');
            const canView = app.dataset.canView === 'true';
            const canCreate = app.dataset.canCreate === 'true';
            const createBtn = document.getElementById('receivingCreateBtn');
            const createModalEl = document.getElementById('receivingCreateModal');
            const createModal = createModalEl ? new bootstrap.Modal(createModalEl) : null;
            const createForm = document.getElementById('receivingCreateForm');
            const formErrors = document.getElementById('receivingFormErrors');
            const addDetailBtn = document.getElementById('receivingAddDetailBtn');
            const detailTableBody = document.querySelector('#receivingDetailsTable tbody');
            const noteNumberInput = document.getElementById('receivingNoteNumber');
            const dateInput = document.getElementById('receivingDate');
            const supplierIdInput = document.getElementById('receivingSupplierId');
            const supplierNameInput = document.getElementById('receivingSupplierName');
            const warehouseInput = document.getElementById('receivingWarehouseId');
            const statusSelect = document.getElementById('receivingStatus');
            const submitBtn = document.getElementById('receivingSubmitBtn');
            const submitSpinner = document.getElementById('receivingSubmitSpinner');
            const antiForgeryTokenInput = document.querySelector('#receivingAntiForgeryForm input[name="__RequestVerificationToken"]');

            let allNotes = [];
            let filteredNotes = [];
            let materials = [];
            let materialsLoadPromise = null;

            function showAlert(message, type = 'danger') {
                if (!alertPlaceholder) {
                    return;
                }

                const wrapper = document.createElement('div');
                wrapper.className = `alert alert-${type} alert-dismissible fade show`;
                wrapper.role = 'alert';
                wrapper.innerHTML = `
                    <div>${message}</div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Đóng"></button>`;

                alertPlaceholder.appendChild(wrapper);
            }

            function setLoading(message) {
                if (!tableBody) {
                    return;
                }

                tableBody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-4 text-muted">${message}</td>
                    </tr>`;
            }

            function formatDate(value) {
                if (!value) {
                    return '—';
                }
                const date = new Date(value);
                if (Number.isNaN(date.getTime())) {
                    return '—';
                }
                return date.toLocaleString('vi-VN');
            }

            const statusLabels = {
                Draft: '<span class="badge bg-secondary">Bản nháp</span>',
                Completed: '<span class="badge bg-success">Hoàn thành</span>',
                Cancelled: '<span class="badge bg-danger">Đã hủy</span>'
            };

            function formatStatus(status) {
                return statusLabels[status] ?? '<span class="badge bg-secondary">Không xác định</span>';
            }

            function renderTable(items) {
                if (!tableBody) {
                    return;
                }

                if (!canView) {
                    setLoading('Bạn không có quyền xem danh sách phiếu nhập.');
                    return;
                }

                if (!Array.isArray(items) || items.length === 0) {
                    setLoading('Không tìm thấy phiếu nhập phù hợp.');
                    return;
                }

                const rows = items.map(note => `
                    <tr>
                        <td class="fw-semibold">${note.noteNumber}</td>
                        <td>${formatDate(note.date)}</td>
                        <td>${note.supplierName ?? note.supplierId ?? '—'}</td>
                        <td>${note.warehouseId ?? '—'}</td>
                        <td>${formatStatus(note.status)}</td>
                        <td>${note.isStockApplied ? '<span class="badge bg-success">Đã cập nhật</span>' : '<span class="badge bg-warning text-dark">Chưa áp dụng</span>'}</td>
                        <td class="text-center">
                            <button type="button" class="btn btn-outline-primary btn-sm" data-id="${note.id}" data-action="detail">
                                <i class="fas fa-eye"></i>
                            </button>
                        </td>
                    </tr>`);

                tableBody.innerHTML = rows.join('');
            }

            function applyFilters() {
                if (!Array.isArray(allNotes)) {
                    filteredNotes = [];
                    renderTable(filteredNotes);
                    return;
                }

                const query = searchInput?.value?.trim().toLowerCase() ?? '';
                filteredNotes = allNotes.filter(note => {
                    if (!query) {
                        return true;
                    }

                    const numberMatch = note.noteNumber?.toLowerCase().includes(query);
                    const supplierMatch = note.supplierName?.toLowerCase().includes(query) || note.supplierId?.toLowerCase().includes(query);
                    return numberMatch || supplierMatch;
                });

                renderTable(filteredNotes);
            }

            async function loadReceivingNotes() {
                if (!canView) {
                    return;
                }

                setLoading('Đang tải danh sách phiếu nhập...');

                try {
                    const response = await fetch('/api/receiving-notes');
                    if (!response.ok) {
                        if (response.status === 403) {
                            setLoading('Bạn không có quyền xem danh sách phiếu nhập.');
                            return;
                        }
                        throw new Error('Failed to load receiving notes');
                    }

                    const data = await response.json();
                    allNotes = Array.isArray(data) ? data : [];
                    applyFilters();
                } catch (error) {
                    setLoading('Không thể tải danh sách phiếu nhập.');
                    showAlert('Có lỗi xảy ra khi tải danh sách phiếu nhập. Vui lòng thử lại sau.');
                }
            }

            async function openDetailModal(id) {
                if (!detailModal || !detailBody) {
                    return;
                }

                detailBody.innerHTML = `
                    <div class="py-4 text-center text-muted">
                        <div class="spinner-border text-primary" role="status"></div>
                    </div>`;
                detailModal.show();

                try {
                    const response = await fetch(`/api/receiving-notes/${id}`);
                    if (!response.ok) {
                        if (response.status === 404) {
                            detailBody.innerHTML = '<div class="alert alert-warning mb-0">Phiếu nhập không tồn tại hoặc đã bị xóa.</div>';
                        } else if (response.status === 403) {
                            detailBody.innerHTML = '<div class="alert alert-warning mb-0">Bạn không có quyền xem phiếu nhập này.</div>';
                        } else {
                            throw new Error('Failed to load receiving note detail');
                        }
                        return;
                    }

                    const note = await response.json();
                    const details = Array.isArray(note.details) && note.details.length > 0
                        ? note.details.map(detail => `
                            <tr>
                                <td>${detail.materialName ?? '—'}</td>
                                <td class="text-end">${Number(detail.quantity ?? 0).toLocaleString('vi-VN')}</td>
                                <td>${detail.unitName ?? '—'}</td>
                                <td class="text-end">${Number(detail.unitPrice ?? 0).toLocaleString('vi-VN')}</td>
                                <td class="text-end">${Number(detail.baseQuantity ?? 0).toLocaleString('vi-VN')}</td>
                            </tr>`).join('')
                        : '<tr><td colspan="5" class="text-center text-muted py-3">Không có chi tiết phiếu nhập.</td></tr>';

                    detailBody.innerHTML = `
                        <div class="mb-3">
                            <div class="d-flex flex-wrap justify-content-between align-items-center gap-2">
                                <div>
                                    <h5 class="mb-1 text-primary">Phiếu nhập #${note.noteNumber}</h5>
                                    <div class="text-muted small">Ngày lập: ${formatDate(note.date)}</div>
                                </div>
                                <div class="d-flex flex-wrap gap-2">
                                    ${formatStatus(note.status)}
                                    ${note.isStockApplied ? '<span class="badge bg-success">Đã cập nhật tồn</span>' : '<span class="badge bg-warning text-dark">Chưa áp dụng tồn</span>'}
                                </div>
                            </div>
                            <div class="mt-2 row g-2">
                                <div class="col-md-4">
                                    <div class="text-muted small">Nhà cung cấp</div>
                                    <div class="fw-semibold">${note.supplierName ?? note.supplierId ?? '—'}</div>
                                </div>
                                <div class="col-md-4">
                                    <div class="text-muted small">Kho</div>
                                    <div class="fw-semibold">${note.warehouseId ?? '—'}</div>
                                </div>
                                <div class="col-md-4">
                                    <div class="text-muted small">Hoàn tất lúc</div>
                                    <div class="fw-semibold">${formatDate(note.completedAt)}</div>
                                </div>
                            </div>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-sm table-striped">
                                <thead>
                                    <tr>
                                        <th>Nguyên vật liệu</th>
                                        <th class="text-end">Số lượng nhập</th>
                                        <th>Đơn vị</th>
                                        <th class="text-end">Đơn giá</th>
                                        <th class="text-end">Quy đổi</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${details}
                                </tbody>
                            </table>
                        </div>`;
                } catch (error) {
                    detailBody.innerHTML = '<div class="alert alert-danger mb-0">Không thể tải chi tiết phiếu nhập.</div>';
                }
            }

            function formatInputDate(date) {
                if (!(date instanceof Date) || Number.isNaN(date.getTime())) {
                    return '';
                }

                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }

            function clearFormErrors() {
                if (!formErrors) {
                    return;
                }

                formErrors.classList.add('d-none');
                formErrors.innerHTML = '';
            }

            function showFormErrors(messages) {
                if (!formErrors) {
                    return;
                }

                const content = Array.isArray(messages) ? messages : [messages];
                formErrors.innerHTML = content
                    .filter(Boolean)
                    .map(message => `<div>${message}</div>`)
                    .join('');
                formErrors.classList.toggle('d-none', formErrors.innerHTML.trim().length === 0);
            }

            function setSubmitting(isSubmitting) {
                if (submitBtn) {
                    submitBtn.disabled = isSubmitting;
                }

                if (submitSpinner) {
                    submitSpinner.classList.toggle('d-none', !isSubmitting);
                }
            }

            function showDetailPlaceholder(message = 'Chưa có nguyên vật liệu.') {
                if (!detailTableBody) {
                    return;
                }

                detailTableBody.innerHTML = `
                    <tr data-placeholder="true">
                        <td colspan="5" class="text-center text-muted py-3">${message}</td>
                    </tr>`;
            }

            function resetCreateForm() {
                createForm?.reset();

                if (dateInput) {
                    dateInput.value = formatInputDate(new Date());
                    dateInput.classList.remove('is-invalid');
                }

                if (statusSelect) {
                    statusSelect.value = '0';
                }

                warehouseInput?.classList.remove('is-invalid');

                clearFormErrors();
                showDetailPlaceholder();

                if (addDetailBtn) {
                    addDetailBtn.disabled = true;
                }

                setSubmitting(false);
            }

            function updateDetailRowUnit(row, materialId) {
                const unitSelect = row.querySelector('.receiving-detail-unit');
                if (!unitSelect) {
                    return;
                }

                unitSelect.innerHTML = '';

                if (!materialId) {
                    const option = document.createElement('option');
                    option.value = '';
                    option.textContent = 'Chọn đơn vị';
                    unitSelect.appendChild(option);
                    return;
                }

                const material = materials.find(item => Number(item.id) === Number(materialId));
                if (!material) {
                    const option = document.createElement('option');
                    option.value = '';
                    option.textContent = 'Chọn đơn vị';
                    unitSelect.appendChild(option);
                    return;
                }

                const option = document.createElement('option');
                option.value = material.unitId != null ? String(material.unitId) : '';
                option.textContent = material.unitName ?? '—';
                unitSelect.appendChild(option);
                unitSelect.value = option.value;
            }

            function addDetailRow(initial = {}) {
                if (!detailTableBody) {
                    return;
                }

                if (!Array.isArray(materials) || materials.length === 0) {
                    showFormErrors('Không tìm thấy nguyên vật liệu. Vui lòng tạo nguyên vật liệu trước khi lập phiếu nhập.');
                    return;
                }

                const placeholder = detailTableBody.querySelector('[data-placeholder]');
                if (placeholder) {
                    detailTableBody.innerHTML = '';
                }

                const row = document.createElement('tr');
                row.dataset.detailRow = 'true';

                const materialCell = document.createElement('td');
                const materialSelect = document.createElement('select');
                materialSelect.className = 'form-select form-select-sm receiving-detail-material';
                materialSelect.innerHTML = '<option value="">Chọn nguyên vật liệu</option>';

                materials.forEach(material => {
                    const option = document.createElement('option');
                    option.value = material.id != null ? String(material.id) : '';
                    const code = material.code ? `[${material.code}] ` : '';
                    option.textContent = `${code}${material.name ?? ''}`.trim();
                    materialSelect.appendChild(option);
                });

                if (initial.materialId) {
                    materialSelect.value = String(initial.materialId);
                }

                materialCell.appendChild(materialSelect);
                row.appendChild(materialCell);

                const quantityCell = document.createElement('td');
                quantityCell.className = 'text-end';
                const quantityInput = document.createElement('input');
                quantityInput.type = 'number';
                quantityInput.min = '0.0001';
                quantityInput.step = '0.0001';
                quantityInput.placeholder = '0';
                quantityInput.className = 'form-control form-control-sm receiving-detail-quantity text-end';
                if (initial.quantity != null) {
                    quantityInput.value = String(initial.quantity);
                }
                quantityCell.appendChild(quantityInput);
                row.appendChild(quantityCell);

                const unitCell = document.createElement('td');
                const unitSelect = document.createElement('select');
                unitSelect.className = 'form-select form-select-sm receiving-detail-unit';
                unitCell.appendChild(unitSelect);
                row.appendChild(unitCell);

                const priceCell = document.createElement('td');
                priceCell.className = 'text-end';
                const priceInput = document.createElement('input');
                priceInput.type = 'number';
                priceInput.min = '0';
                priceInput.step = '0.01';
                priceInput.placeholder = '0';
                priceInput.className = 'form-control form-control-sm receiving-detail-unit-price text-end';
                if (initial.unitPrice != null) {
                    priceInput.value = String(initial.unitPrice);
                }
                priceCell.appendChild(priceInput);
                row.appendChild(priceCell);

                const actionCell = document.createElement('td');
                actionCell.className = 'text-center';
                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'btn btn-link text-danger btn-sm';
                removeBtn.dataset.action = 'remove-detail';
                removeBtn.innerHTML = '<i class="fas fa-times"></i>';
                actionCell.appendChild(removeBtn);
                row.appendChild(actionCell);

                detailTableBody.appendChild(row);

                updateDetailRowUnit(row, materialSelect.value ? Number(materialSelect.value) : null);

                materialSelect.addEventListener('change', () => {
                    materialSelect.classList.remove('is-invalid');
                    updateDetailRowUnit(row, materialSelect.value ? Number(materialSelect.value) : null);
                });

                [quantityInput, unitSelect, priceInput].forEach(input => {
                    input.addEventListener('input', () => input.classList.remove('is-invalid'));
                    input.addEventListener('change', () => input.classList.remove('is-invalid'));
                });
            }

            async function ensureMaterialsLoaded() {
                if (Array.isArray(materials) && materials.length > 0) {
                    return true;
                }

                if (!materialsLoadPromise) {
                    materialsLoadPromise = (async () => {
                        try {
                            const response = await fetch('/api/materials');
                            if (!response.ok) {
                                if (response.status === 403) {
                                    throw new Error('Bạn không có quyền xem danh sách nguyên vật liệu.');
                                }

                                throw new Error('Không thể tải danh sách nguyên vật liệu.');
                            }

                            const data = await response.json();
                            materials = Array.isArray(data) ? data : [];
                            materials.sort((a, b) => {
                                const nameA = (a?.name ?? '').toLowerCase();
                                const nameB = (b?.name ?? '').toLowerCase();
                                if (nameA === nameB) {
                                    return (a?.code ?? '').localeCompare(b?.code ?? '');
                                }
                                return nameA.localeCompare(nameB);
                            });

                            return materials.length > 0;
                        } catch (error) {
                            materials = [];
                            throw error;
                        }
                    })();
                }

                try {
                    const hasMaterials = await materialsLoadPromise;
                    if (!hasMaterials) {
                        showFormErrors('Không tìm thấy nguyên vật liệu. Vui lòng tạo nguyên vật liệu trước khi lập phiếu nhập.');
                    }
                    return hasMaterials;
                } catch (error) {
                    showFormErrors(error.message ?? 'Không thể tải danh sách nguyên vật liệu.');
                    return false;
                } finally {
                    materialsLoadPromise = null;
                }
            }

            tableBody?.addEventListener('click', event => {
                const button = event.target.closest('button[data-action="detail"]');
                if (!button) {
                    return;
                }

                const id = Number(button.dataset.id);
                if (Number.isFinite(id)) {
                    openDetailModal(id);
                }
            });

            detailTableBody?.addEventListener('click', event => {
                const button = event.target.closest('button[data-action="remove-detail"]');
                if (!button) {
                    return;
                }

                const row = button.closest('tr');
                row?.remove();

                if (!detailTableBody.querySelector('tr[data-detail-row="true"]')) {
                    showDetailPlaceholder();
                }
            });

            addDetailBtn?.addEventListener('click', async () => {
                if (addDetailBtn.disabled) {
                    return;
                }

                const loaded = await ensureMaterialsLoaded();
                if (!loaded) {
                    return;
                }

                addDetailRow();
            });

            createBtn?.addEventListener('click', async () => {
                if (!createModal || !canCreate) {
                    return;
                }

                resetCreateForm();
                createModal.show();
                showDetailPlaceholder('Đang tải danh sách nguyên vật liệu...');

                const loaded = await ensureMaterialsLoaded();
                if (loaded) {
                    if (addDetailBtn) {
                        addDetailBtn.disabled = false;
                    }
                    if (detailTableBody) {
                        detailTableBody.innerHTML = '';
                    }
                    addDetailRow();
                } else {
                    if (addDetailBtn) {
                        addDetailBtn.disabled = true;
                    }
                    showDetailPlaceholder('Không thể tải danh sách nguyên vật liệu.');
                }

                if (dateInput && !dateInput.value) {
                    dateInput.value = formatInputDate(new Date());
                }
            });

            createModalEl?.addEventListener('hidden.bs.modal', () => {
                resetCreateForm();
            });

            dateInput?.addEventListener('change', () => dateInput.classList.remove('is-invalid'));
            warehouseInput?.addEventListener('input', () => warehouseInput.classList.remove('is-invalid'));

            createForm?.addEventListener('submit', async event => {
                event.preventDefault();

                if (!canCreate) {
                    showFormErrors('Bạn không có quyền tạo phiếu nhập.');
                    return;
                }

                if (!detailTableBody) {
                    return;
                }

                clearFormErrors();

                const detailRows = Array.from(detailTableBody.querySelectorAll('tr[data-detail-row="true"]'));
                if (detailRows.length === 0) {
                    showFormErrors('Phiếu nhập phải có ít nhất một nguyên vật liệu.');
                    return;
                }

                const details = [];
                const errors = [];

                detailRows.forEach((row, index) => {
                    const materialSelect = row.querySelector('.receiving-detail-material');
                    const quantityInput = row.querySelector('.receiving-detail-quantity');
                    const unitSelect = row.querySelector('.receiving-detail-unit');
                    const priceInput = row.querySelector('.receiving-detail-unit-price');

                    const materialIdValue = materialSelect?.value ? Number(materialSelect.value) : NaN;
                    if (!Number.isFinite(materialIdValue) || materialIdValue <= 0) {
                        errors.push(`Dòng ${index + 1}: Vui lòng chọn nguyên vật liệu.`);
                        materialSelect?.classList.add('is-invalid');
                    }

                    const quantityRaw = quantityInput?.value ?? '';
                    const quantityValue = quantityRaw === '' ? NaN : Number(quantityRaw);
                    if (!Number.isFinite(quantityValue) || quantityValue <= 0) {
                        errors.push(`Dòng ${index + 1}: Số lượng phải lớn hơn 0.`);
                        quantityInput?.classList.add('is-invalid');
                    }

                    const unitIdValue = unitSelect?.value ? Number(unitSelect.value) : NaN;
                    if (!Number.isFinite(unitIdValue) || unitIdValue <= 0) {
                        errors.push(`Dòng ${index + 1}: Không tìm thấy đơn vị hợp lệ.`);
                        unitSelect?.classList.add('is-invalid');
                    }

                    const priceRaw = priceInput?.value ?? '';
                    const priceValue = priceRaw === '' ? 0 : Number(priceRaw);
                    if (!Number.isFinite(priceValue) || priceValue < 0) {
                        errors.push(`Dòng ${index + 1}: Đơn giá không hợp lệ.`);
                        priceInput?.classList.add('is-invalid');
                    }

                    if (
                        Number.isFinite(materialIdValue) && materialIdValue > 0 &&
                        Number.isFinite(quantityValue) && quantityValue > 0 &&
                        Number.isFinite(unitIdValue) && unitIdValue > 0 &&
                        Number.isFinite(priceValue) && priceValue >= 0
                    ) {
                        details.push({
                            materialId: materialIdValue,
                            quantity: quantityValue,
                            unitId: unitIdValue,
                            unitPrice: priceValue
                        });
                    }
                });

                if (details.length === 0 || errors.length > 0) {
                    const uniqueErrors = errors.length > 0 ? [...new Set(errors)] : ['Phiếu nhập phải có ít nhất một nguyên vật liệu hợp lệ.'];
                    showFormErrors(uniqueErrors);
                    return;
                }

                if (!dateInput || !dateInput.value) {
                    showFormErrors('Vui lòng chọn ngày lập phiếu.');
                    dateInput?.classList.add('is-invalid');
                    return;
                }

                const warehouseValue = warehouseInput?.value?.trim();
                const warehouseId = warehouseValue ? Number(warehouseValue) : null;
                if (warehouseId != null && !Number.isFinite(warehouseId)) {
                    showFormErrors('Kho không hợp lệ.');
                    warehouseInput?.classList.add('is-invalid');
                    return;
                }

                const payload = {
                    noteNumber: noteNumberInput?.value?.trim() || null,
                    date: dateInput.value,
                    supplierId: supplierIdInput?.value?.trim() || null,
                    supplierName: supplierNameInput?.value?.trim() || null,
                    warehouseId,
                    status: Number(statusSelect?.value ?? 0),
                    details
                };

                setSubmitting(true);

                try {
                    const response = await fetch('/api/receiving-notes', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            ...(antiForgeryTokenInput?.value ? { 'RequestVerificationToken': antiForgeryTokenInput.value } : {})
                        },
                        body: JSON.stringify(payload)
                    });

                    if (response.ok) {
                        const note = await response.json();
                        createModal?.hide();
                        showAlert('Tạo phiếu nhập thành công.', 'success');
                        allNotes = Array.isArray(allNotes) ? [note, ...allNotes] : [note];
                        applyFilters();
                        return;
                    }

                    if (response.status === 403) {
                        showFormErrors('Bạn không có quyền tạo phiếu nhập.');
                        return;
                    }

                    if (response.status === 400 || response.status === 422) {
                        const problem = await response.json().catch(() => null);
                        if (problem) {
                            const problemErrors = problem.errors ? Object.values(problem.errors).flat() : [];
                            if (problemErrors.length > 0) {
                                showFormErrors(problemErrors);
                                return;
                            }

                            if (problem.title) {
                                showFormErrors(problem.title);
                                return;
                            }
                        }

                        showFormErrors('Dữ liệu không hợp lệ. Vui lòng kiểm tra lại.');
                        return;
                    }

                    showFormErrors('Không thể tạo phiếu nhập. Vui lòng thử lại sau.');
                } catch (error) {
                    showFormErrors('Có lỗi xảy ra khi tạo phiếu nhập. Vui lòng thử lại sau.');
                } finally {
                    setSubmitting(false);
                }
            });

            if (createModalEl) {
                resetCreateForm();
            }

            searchInput?.addEventListener('input', () => applyFilters());

            loadReceivingNotes();
        })();
    </script>
}
