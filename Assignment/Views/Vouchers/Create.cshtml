@using Assignment.Enums
@using Assignment.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Collections.Generic
@using System.Linq
@using System.Text.Json
@model Assignment.Models.Voucher
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Tạo Voucher";
    Layout = "_AdminLayout";

    var selectedUserIds = ViewData["SelectedUserIds"] as List<string> ?? new List<string>();
    var users = (IEnumerable<SelectListItem>?)ViewBag.Users ?? Enumerable.Empty<SelectListItem>();

    var selectedProductIds = (ViewData["SelectedProductIds"] as IEnumerable<long>)?.Select(id => id.ToString()).ToList()
        ?? (ViewData["SelectedProductIds"] as IEnumerable<string>)?.ToList()
        ?? new List<string>();
    var products = (IEnumerable<SelectListItem>?)ViewBag.Products ?? Enumerable.Empty<SelectListItem>();

    if (!selectedUserIds.Any())
    {
        selectedUserIds.Add(string.Empty);
    }

    if (!selectedProductIds.Any())
    {
        selectedProductIds.Add(string.Empty);
    }

    var userOptionsJson = JsonSerializer.Serialize(users.Select(u => new { value = u.Value, text = u.Text }));
    var productOptionsJson = JsonSerializer.Serialize(products.Select(p => new { value = p.Value, text = p.Text }));
}

<!-- Thêm link Font Awesome để sử dụng icons -->
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>

<div class="container-fluid pt-4 px-4">
    <div class="row g-4 justify-content-center">
        <div class="col-sm-12 col-xl-8">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h4 class="mb-0 text-primary">
                        <i class="fas fa-plus-circle me-2"></i>@ViewData["Title"]
                    </h4>
                </div>
                <div class="card-body">
                    <form asp-action="Create">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="Code" class="form-label"></label>
                                <input asp-for="Code" class="form-control" placeholder="Nhập mã voucher">
                                <span asp-validation-for="Code" class="text-danger"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="Name" class="form-label"></label>
                                <input asp-for="Name" class="form-control" placeholder="Nhập tên voucher">
                                <span asp-validation-for="Name" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Description" class="form-label"></label>
                            <textarea asp-for="Description" class="form-control" rows="3" placeholder="Nhập mô tả chi tiết"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="Type" class="form-label"></label>
                                <select asp-for="Type" class="form-select" id="VoucherType" asp-items="Html.GetEnumSelectList<VoucherType>()"></select>
                                <span asp-validation-for="Type" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="ProductScope" class="form-label"></label>
                                <select asp-for="ProductScope" class="form-select" id="ProductScope" asp-items="Html.GetEnumSelectList<VoucherProductScope>()"></select>
                                <span asp-validation-for="ProductScope" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="mb-3" id="ProductSelectionSection" style="display: none;">
                            <div class="d-flex flex-wrap align-items-center justify-content-between gap-2">
                                <h5 class="mb-0">Sản phẩm áp dụng</h5>
                                <div class="btn-group" role="group" aria-label="Voucher product helpers">
                                    <a class="btn btn-outline-primary btn-sm" asp-action="DownloadVoucherProductTemplate">
                                        <i class="fas fa-file-download me-1"></i>Tải file mẫu
                                    </a>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="triggerVoucherProductImport()">
                                        <i class="fas fa-file-import me-1"></i>Nhập từ file
                                    </button>
                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="clearAllVoucherProducts()">
                                        <i class="fas fa-trash me-1"></i>Xóa toàn bộ
                                    </button>
                                </div>
                            </div>
                            <input type="file" id="voucherProductImportInput" class="d-none" accept=".xlsx,.xls,.csv" />
                            <div id="voucherProductsContainer" class="mt-2">
                                @for (var index = 0; index < selectedProductIds.Count; index++)
                                {
                                    var productId = selectedProductIds[index];
                                    <div class="voucher-product-row row g-2 mb-2 align-items-end">
                                        <div class="col-md-10">
                                            <label class="form-label">Sản phẩm</label>
                                            <select name="ProductIds" class="form-select voucher-product-select" required>
                                                <option value="">-- Chọn sản phẩm --</option>
                                                @foreach (var product in products)
                                                {
                                                    var isSelected = string.Equals(product.Value, productId, StringComparison.Ordinal);
                                                    <option value="@product.Value" selected="@(isSelected ? "selected" : null)">@product.Text</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="col-md-2">
                                            <button type="button" class="btn btn-danger w-100" onclick="removeVoucherProduct(this)"><i class="fas fa-trash-alt"></i> Xóa</button>
                                        </div>
                                    </div>
                                }
                            </div>
                            <button type="button" class="btn btn-success btn-sm mt-2" onclick="addVoucherProduct()"><i class="fas fa-plus"></i> Thêm sản phẩm</button>
                        </div>

                        <div class="mb-3" id="PrivateUserSection" style="display: none;">
                            <div class="d-flex flex-wrap align-items-center justify-content-between gap-2">
                                <h5 class="mb-0">Người dùng áp dụng</h5>
                                <div class="btn-group" role="group" aria-label="Voucher user helpers">
                                    <a class="btn btn-outline-primary btn-sm" asp-action="DownloadVoucherTemplate">
                                        <i class="fas fa-file-download me-1"></i>Tải file mẫu
                                    </a>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="triggerVoucherImport()">
                                        <i class="fas fa-file-import me-1"></i>Nhập từ file
                                    </button>
                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="clearAllVoucherUsers()">
                                        <i class="fas fa-trash me-1"></i>Xóa toàn bộ
                                    </button>
                                </div>
                            </div>
                            <input type="file" id="voucherImportInput" class="d-none" accept=".xlsx,.xls,.csv" />
                            <div id="voucherUsersContainer" class="mt-2">
                                @for (var index = 0; index < selectedUserIds.Count; index++)
                                {
                                    var userId = selectedUserIds[index];
                                    <div class="voucher-user-row row g-2 mb-2 align-items-end">
                                        <div class="col-md-10">
                                            <label class="form-label">Người dùng</label>
                                            <select name="UserIds" class="form-select voucher-user-select" required>
                                                <option value="">-- Chọn người dùng --</option>
                                                @foreach (var user in users)
                                                {
                                                    var isSelected = string.Equals(user.Value, userId, StringComparison.Ordinal);
                                                    <option value="@user.Value" selected="@(isSelected ? "selected" : null)">@user.Text</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="col-md-2">
                                            <button type="button" class="btn btn-danger w-100" onclick="removeVoucherUser(this)"><i class="fas fa-trash-alt"></i> Xóa</button>
                                        </div>
                                    </div>
                                }
                            </div>
                            <button type="button" class="btn btn-success btn-sm mt-2" onclick="addVoucherUser()"><i class="fas fa-plus"></i> Thêm người dùng</button>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="DiscountType" class="form-label"></label>
                                <select asp-for="DiscountType" class="form-select" id="DiscountType" asp-items="Html.GetEnumSelectList<VoucherDiscountType>()"></select>
                                <span asp-validation-for="DiscountType" class="text-danger"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="Discount" class="form-label"></label>
                                <input asp-for="Discount" class="form-control" type="number" step="0.01" id="DiscountInput">
                                <span asp-validation-for="Discount" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="Quantity" class="form-label"></label>
                                <input asp-for="Quantity" class="form-control" type="number">
                                <span asp-validation-for="Quantity" class="text-danger"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="MinimumRequirements" class="form-label"></label>
                                <input asp-for="MinimumRequirements" class="form-control" type="number" step="0.01">
                                <span asp-validation-for="MinimumRequirements" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="row align-items-end">
                            <div class="col-md-6 mb-3">
                                <label asp-for="StartTime" class="form-label"></label>
                                <input asp-for="StartTime" class="form-control" type="datetime-local">
                                <span asp-validation-for="StartTime" class="text-danger"></span>
                            </div>
                            <div class="col-md-6 mb-3" id="EndTimeField">
                                <label asp-for="EndTime" class="form-label"></label>
                                <input asp-for="EndTime" class="form-control" type="datetime-local" id="EndTimeInput">
                                <span asp-validation-for="EndTime" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-check mb-3">
                            <input asp-for="IsLifeTime" class="form-check-input" type="checkbox" id="IsLifeTime">
                            <label asp-for="IsLifeTime" class="form-check-label"></label>
                            <span asp-validation-for="IsLifeTime" class="text-danger"></span>
                        </div>

                        <div id="percent-options" style="display: none;">
                            <div class="form-check mb-3">
                                <input asp-for="UnlimitedPercentageDiscount" class="form-check-input" type="checkbox" id="UnlimitedPercentageDiscount">
                                <label asp-for="UnlimitedPercentageDiscount" class="form-check-label"></label>
                                <span asp-validation-for="UnlimitedPercentageDiscount" class="text-danger"></span>
                            </div>
                            <div class="mb-3" id="MaxPercentReductionField" style="display: none;">
                                <label asp-for="MaximumPercentageReduction" class="form-label"></label>
                                <input asp-for="MaximumPercentageReduction" class="form-control" type="number" step="0.01" id="MaxPercentReductionInput">
                                <span asp-validation-for="MaximumPercentageReduction" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="card-footer bg-transparent border-top d-flex justify-content-end gap-2">
                            @if (User.HasAnyPermission("GetVoucher", "GetVoucherAll"))
                            {
                                <a class="btn btn-secondary" asp-action="Index">
                                    <i class="fas fa-arrow-left me-2"></i>Trở về
                                </a>
                            }
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-2"></i>Tạo
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <partial name="_XlsxScriptPartial" />
    <script>
        const allUsers = @Html.Raw(userOptionsJson);
        const allProducts = @Html.Raw(productOptionsJson);

        function toggleProductScopeField() {
            const scope = document.getElementById('ProductScope').value;
            const productSection = document.getElementById('ProductSelectionSection');
            const selects = document.querySelectorAll('.voucher-product-select');

            if (scope === '1') {
                productSection.style.display = 'block';
                selects.forEach(select => select.setAttribute('required', 'required'));
            } else {
                productSection.style.display = 'none';
                selects.forEach(select => select.removeAttribute('required'));
            }
        }

        function toggleVoucherTypeField() {
            const voucherType = document.getElementById('VoucherType').value;
            const userSection = document.getElementById('PrivateUserSection');
            const selects = document.querySelectorAll('.voucher-user-select');

            if (voucherType === '1') {
                userSection.style.display = 'block';
                selects.forEach(select => select.setAttribute('required', 'required'));
            } else {
                userSection.style.display = 'none';
                selects.forEach(select => select.removeAttribute('required'));
            }
        }

        function toggleEndTimeField() {
            const isLifeTime = document.getElementById('IsLifeTime').checked;
            const endTimeField = document.getElementById('EndTimeField');
            const endTimeInput = document.getElementById('EndTimeInput');

            if (isLifeTime) {
                endTimeField.style.display = 'none';
                endTimeInput.removeAttribute('required');
                endTimeInput.value = '';
            } else {
                endTimeField.style.display = 'block';
                endTimeInput.setAttribute('required', 'required');
            }
        }

        function updatePercentDiscountVisibility() {
            const discountType = document.getElementById('DiscountType').value;
            const percentOptions = document.getElementById('percent-options');
            const unlimitedPercentCheckbox = document.getElementById('UnlimitedPercentageDiscount');
            const maxPercentField = document.getElementById('MaxPercentReductionField');
            const maxPercentInput = document.getElementById('MaxPercentReductionInput');

            if (discountType === '1') {
                percentOptions.style.display = 'block';
                if (!unlimitedPercentCheckbox.checked) {
                    maxPercentField.style.display = 'block';
                    maxPercentInput.setAttribute('required', 'required');
                } else {
                    maxPercentField.style.display = 'none';
                    maxPercentInput.removeAttribute('required');
                    maxPercentInput.value = '';
                }
            } else {
                percentOptions.style.display = 'none';
                unlimitedPercentCheckbox.checked = false;
                maxPercentField.style.display = 'none';
                maxPercentInput.removeAttribute('required');
                maxPercentInput.value = '';
            }
        }

        function getSelectedVoucherUserIds(excludeElement) {
            const ids = [];
            document.querySelectorAll('.voucher-user-select').forEach(select => {
                if (select !== excludeElement && select.value) {
                    ids.push(select.value);
                }
            });
            return ids;
        }

        function buildUserOptions(selectedValue, excludeElement) {
            const selectedIds = getSelectedVoucherUserIds(excludeElement);
            let optionsHtml = '<option value="">-- Chọn người dùng --</option>';

            allUsers.forEach(user => {
                if (user.value === selectedValue || !selectedIds.includes(user.value)) {
                    const selectedAttr = user.value === selectedValue ? ' selected' : '';
                    optionsHtml += `<option value="${user.value ?? ''}"${selectedAttr}>${user.text ?? ''}</option>`;
                }
            });

            return optionsHtml;
        }

        function updateVoucherUserDropdowns() {
            document.querySelectorAll('.voucher-user-select').forEach(select => {
                const currentValue = select.value;
                select.innerHTML = buildUserOptions(currentValue, select);
                select.value = currentValue;
            });
        }

        function addVoucherUser(userId = '') {
            const container = document.getElementById('voucherUsersContainer');
            const row = document.createElement('div');
            row.className = 'voucher-user-row row g-2 mb-2 align-items-end';

            row.innerHTML = `
                <div class="col-md-10">
                    <label class="form-label">Người dùng</label>
                    <select name="UserIds" class="form-select voucher-user-select" required>
                        ${buildUserOptions(userId)}
                    </select>
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-danger w-100" onclick="removeVoucherUser(this)"><i class="fas fa-trash-alt"></i> Xóa</button>
                </div>`;

            container.appendChild(row);
            const select = row.querySelector('select[name="UserIds"]');
            select.value = userId ?? '';
            updateVoucherUserDropdowns();
            toggleVoucherTypeField();
        }

        function removeVoucherUser(button) {
            const container = document.getElementById('voucherUsersContainer');
            if (!container) {
                return;
            }

            const rows = container.getElementsByClassName('voucher-user-row');
            const row = button.closest('.voucher-user-row');
            if (!row) {
                return;
            }

            if (rows.length > 1) {
                row.remove();
            } else {
                const select = row.querySelector('select[name="UserIds"]');
                if (select) {
                    select.value = '';
                }
            }

            updateVoucherUserDropdowns();
            toggleVoucherTypeField();
        }

        function clearAllVoucherUsers(addDefault = true) {
            const container = document.getElementById('voucherUsersContainer');
            container.innerHTML = '';
            if (addDefault) {
                addVoucherUser();
            } else {
                updateVoucherUserDropdowns();
            }
        }

        function getSelectedVoucherProductIds(excludeElement) {
            const ids = new Set();
            document.querySelectorAll('.voucher-product-select').forEach(select => {
                if (select !== excludeElement && select.value) {
                    ids.add(select.value);
                }
            });
            return ids;
        }

        function updateVoucherProductDropdowns() {
            document.querySelectorAll('.voucher-product-select').forEach(select => {
                const currentValue = select.value;
                const selectedIds = getSelectedVoucherProductIds(select);
                select.innerHTML = '<option value="">-- Chọn sản phẩm --</option>';

                allProducts.forEach(product => {
                    const option = document.createElement('option');
                    option.value = product.value ?? '';
                    option.textContent = product.text ?? '';
                    if (currentValue === product.value) {
                        option.selected = true;
                    } else if (selectedIds.has(product.value)) {
                        option.disabled = true;
                    }
                    select.appendChild(option);
                });
            });
        }

        function addVoucherProduct(productId = '') {
            const container = document.getElementById('voucherProductsContainer');
            const row = document.createElement('div');
            row.className = 'voucher-product-row row g-2 mb-2 align-items-end';

            row.innerHTML = `
                <div class="col-md-10">
                    <label class="form-label">Sản phẩm</label>
                    <select name="ProductIds" class="form-select voucher-product-select" required></select>
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-danger w-100" onclick="removeVoucherProduct(this)"><i class="fas fa-trash-alt"></i> Xóa</button>
                </div>`;

            container.appendChild(row);
            const select = row.querySelector('.voucher-product-select');
            updateVoucherProductDropdowns();
            if (productId) {
                select.value = productId;
            }
            updateVoucherProductDropdowns();
            toggleProductScopeField();
        }

        function removeVoucherProduct(button) {
            const container = document.getElementById('voucherProductsContainer');
            if (!container) {
                return;
            }

            const rows = container.getElementsByClassName('voucher-product-row');
            const row = button.closest('.voucher-product-row');
            if (!row) {
                return;
            }

            if (rows.length > 1) {
                row.remove();
            } else {
                const select = row.querySelector('.voucher-product-select');
                if (select) {
                    select.value = '';
                }
            }

            updateVoucherProductDropdowns();
            toggleProductScopeField();
        }

        function clearAllVoucherProducts(addDefault = true) {
            const container = document.getElementById('voucherProductsContainer');
            if (!container) {
                return;
            }

            container.innerHTML = '';
            if (addDefault) {
                addVoucherProduct();
            } else {
                updateVoucherProductDropdowns();
            }
            toggleProductScopeField();
        }

        function triggerVoucherImport() {
            const input = document.getElementById('voucherImportInput');
            if (input) {
                input.value = '';
                input.click();
            }
        }

        function triggerVoucherProductImport() {
            const input = document.getElementById('voucherProductImportInput');
            if (input) {
                input.value = '';
                input.click();
            }
        }

        function handleVoucherImport(event) {
            const file = event.target?.files?.[0];
            if (!file) {
                return;
            }

            const extension = (file.name.split('.').pop() ?? '').toLowerCase();

            const processRows = (rows) => {
                if (!Array.isArray(rows) || !rows.length) {
                    alert('Không tìm thấy dữ liệu hợp lệ trong file.');
                    return;
                }

                const usersToAdd = [];
                const seen = new Set();
                let headerSkipped = false;

                rows.forEach(row => {
                    if (!Array.isArray(row) || !row.length) {
                        return;
                    }

                    const rawUserId = row[0];
                    const userId = rawUserId == null ? '' : String(rawUserId).trim();
                    if (!userId) {
                        return;
                    }

                    if (!headerSkipped && userId.toLowerCase().includes('user')) {
                        headerSkipped = true;
                        return;
                    }

                    if (seen.has(userId)) {
                        return;
                    }

                    if (!allUsers.some(user => user.value === userId)) {
                        return;
                    }

                    usersToAdd.push(userId);
                    seen.add(userId);
                });

                if (!usersToAdd.length) {
                    alert('Không tìm thấy người dùng hợp lệ trong file.');
                    return;
                }

                clearAllVoucherUsers(false);
                usersToAdd.forEach(id => addVoucherUser(id));
                updateVoucherUserDropdowns();
                toggleVoucherTypeField();
            };

            if (extension === 'csv') {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const content = e.target?.result;
                    if (typeof content !== 'string') {
                        alert('Không thể đọc dữ liệu từ file.');
                        return;
                    }

                    const rows = content
                        .split(/\r?\n/)
                        .map(line => line.trim())
                        .filter(line => line.length > 0)
                        .map(line => line.split(/[;,\t]/).map(part => part.trim()));

                    processRows(rows);
                };

                reader.readAsText(file);
                return;
            }

            if (typeof XLSX === 'undefined') {
                alert('Không thể đọc file Excel trên trình duyệt này.');
                return;
            }

            const reader = new FileReader();
            reader.onload = (e) => {
                const data = e.target?.result;
                if (!data) {
                    alert('Không thể đọc dữ liệu từ file.');
                    return;
                }

                try {
                    const workbook = XLSX.read(data, { type: 'array' });
                    const firstSheetName = workbook.SheetNames[0];
                    if (!firstSheetName) {
                        alert('File không có dữ liệu.');
                        return;
                    }

                    const worksheet = workbook.Sheets[firstSheetName];
                    const rows = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '', blankrows: false });
                    processRows(rows);
                } catch (error) {
                    console.error(error);
                    alert('Không thể đọc dữ liệu từ file. Vui lòng kiểm tra lại định dạng.');
                }
            };

            reader.readAsArrayBuffer(file);
        }

        function handleVoucherProductImport(event) {
            const file = event.target?.files?.[0];
            if (!file) {
                return;
            }

            const extension = (file.name.split('.').pop() ?? '').toLowerCase();

            const processRows = (rows) => {
                if (!Array.isArray(rows) || !rows.length) {
                    alert('Không tìm thấy dữ liệu sản phẩm hợp lệ trong file.');
                    return;
                }

                const productsToAdd = [];
                const seen = new Set();
                let headerSkipped = false;

                rows.forEach(row => {
                    if (!Array.isArray(row) || !row.length) {
                        return;
                    }

                    const rawProductId = row[0];
                    const productId = rawProductId == null ? '' : String(rawProductId).trim();
                    if (!productId) {
                        return;
                    }

                    if (!headerSkipped && productId.toLowerCase().includes('product')) {
                        headerSkipped = true;
                        return;
                    }

                    if (seen.has(productId)) {
                        return;
                    }

                    if (!allProducts.some(product => product.value === productId)) {
                        return;
                    }

                    productsToAdd.push(productId);
                    seen.add(productId);
                });

                if (!productsToAdd.length) {
                    alert('Không tìm thấy sản phẩm hợp lệ trong file.');
                    return;
                }

                clearAllVoucherProducts(false);
                productsToAdd.forEach(id => addVoucherProduct(id));
                updateVoucherProductDropdowns();
                toggleProductScopeField();
            };

            if (extension === 'csv') {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const content = e.target?.result;
                    if (typeof content !== 'string') {
                        alert('Không thể đọc dữ liệu từ file.');
                        return;
                    }

                    const rows = content
                        .split(/\r?\n/)
                        .map(line => line.trim())
                        .filter(line => line.length > 0)
                        .map(line => line.split(/[;,\t]/).map(part => part.trim()));

                    processRows(rows);
                };

                reader.readAsText(file);
                return;
            }

            if (typeof XLSX === 'undefined') {
                alert('Không thể đọc file Excel trên trình duyệt này.');
                return;
            }

            const reader = new FileReader();
            reader.onload = (e) => {
                const data = e.target?.result;
                if (!data) {
                    alert('Không thể đọc dữ liệu từ file.');
                    return;
                }

                try {
                    const workbook = XLSX.read(data, { type: 'array' });
                    const firstSheetName = workbook.SheetNames[0];
                    if (!firstSheetName) {
                        alert('File không có dữ liệu.');
                        return;
                    }

                    const worksheet = workbook.Sheets[firstSheetName];
                    const rows = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '', blankrows: false });
                    processRows(rows);
                } catch (error) {
                    console.error(error);
                    alert('Không thể đọc dữ liệu từ file. Vui lòng kiểm tra lại định dạng.');
                }
            };

            reader.readAsArrayBuffer(file);
        }

        document.addEventListener('change', event => {
            if (event.target.classList.contains('voucher-user-select')) {
                updateVoucherUserDropdowns();
            }
            if (event.target.classList.contains('voucher-product-select')) {
                updateVoucherProductDropdowns();
            }
        });

        document.getElementById('VoucherType').addEventListener('change', toggleVoucherTypeField);
        document.getElementById('ProductScope').addEventListener('change', toggleProductScopeField);
        document.getElementById('IsLifeTime').addEventListener('change', toggleEndTimeField);
        document.getElementById('DiscountType').addEventListener('change', updatePercentDiscountVisibility);
        document.getElementById('UnlimitedPercentageDiscount').addEventListener('change', updatePercentDiscountVisibility);
        document.getElementById('voucherImportInput')?.addEventListener('change', handleVoucherImport);
        document.getElementById('voucherProductImportInput')?.addEventListener('change', handleVoucherProductImport);

        document.addEventListener('DOMContentLoaded', () => {
            toggleVoucherTypeField();
            toggleProductScopeField();
            toggleEndTimeField();
            updatePercentDiscountVisibility();
            updateVoucherUserDropdowns();
            updateVoucherProductDropdowns();
        });
    </script>
}
