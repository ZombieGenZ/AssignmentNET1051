@model Assignment.Models.Order
@using Assignment.Enums;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.Json;
@{
    ViewData["Title"] = "Thanh Toán";
    var cart = ViewBag.Cart as Assignment.Models.Cart;
    double totalPrice = 0;
    if (cart != null)
    {
        totalPrice = cart.CartItems.Sum(item =>
        {
            var unitPrice = item.Product != null
                ? PriceCalculator.GetProductFinalPrice(item.Product)
                : PriceCalculator.GetComboFinalPrice(item.Combo);
            return unitPrice * item.Quantity;
        });
    }
    int payNowValue = (int)PaymentType.PayNow;
    int paymentMethodBankValue = (int)PaymentMethodType.Bank;
    var paymentMethodChoices = Enum.GetValues(typeof(PaymentMethodType))
        .Cast<PaymentMethodType>()
        .Where(method => method != PaymentMethodType.Cash)
        .ToList();
    var paymentMethodLabels = new Dictionary<PaymentMethodType, string>
    {
        [PaymentMethodType.Bank] = "Chuyển khoản ngân hàng",
        [PaymentMethodType.Momo] = "Momo",
        [PaymentMethodType.ZaloPay] = "ZaloPay",
        [PaymentMethodType.VnPay] = "VNPay"
    };
    var selectedPaymentMethod = Model.PaymentMethod.HasValue && Model.PaymentMethod.Value != PaymentMethodType.Cash
        ? Model.PaymentMethod.Value
        : PaymentMethodType.Bank;
}

<div class="container my-5">
    <h2 class="mb-4 text-center">
        <i class="fas fa-credit-card"></i> Thông Tin Thanh Toán
    </h2>

    <form asp-action="Checkout" method="post">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
        @Html.HiddenFor(m => m.SelectedCartItemIds, new { id = "SelectedCartItemIds" })
        <div id="appliedVoucherInputs"></div>

        <div class="row">
            <!-- Left Column: Customer Info & Payment Method -->
            <div class="col-lg-7">
                <div class="card shadow-sm mb-4">
                    <div class="card-body">
                        <h4 class="card-title mb-3">Thông tin khách hàng</h4>
                        <div class="mb-3">
                            <label asp-for="Name" class="form-label">Họ và Tên</label>
                            <input asp-for="Name" class="form-control" />
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="Email" class="form-label">Email (Tùy chọn)</label>
                                <input asp-for="Email" class="form-control" />
                                <span asp-validation-for="Email" class="text-danger"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="Phone" class="form-label">Số Điện Thoại</label>
                                <input asp-for="Phone" class="form-control" />
                                <span asp-validation-for="Phone" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Note" class="form-label">Ghi Chú (Tùy chọn)</label>
                            <textarea asp-for="Note" class="form-control" rows="3"></textarea>
                        </div>
                    </div>
                </div>

                <div class="card shadow-sm">
                    <div class="card-body">
                        <h4 class="card-title mb-3">Phương thức thanh toán</h4>
                        <div class="mb-3">
                            <label asp-for="PaymentType" class="form-label">Hình thức thanh toán</label>
                            <!-- ID 'PaymentType' is important for JavaScript targeting -->
                            <select asp-for="PaymentType" asp-items="Html.GetEnumSelectList<PaymentType>()" class="form-select"></select>
                            <span asp-validation-for="PaymentType" class="text-danger"></span>
                        </div>

                        <!-- Payment Method selection wrapped in a container to be toggled -->
                        <div id="paymentMethodContainer">
                            <div class="mb-3">
                                <label asp-for="PaymentMethod" class="form-label">Cổng thanh toán</label>
                                <select asp-for="PaymentMethod" class="form-select">
                                    @foreach (var method in paymentMethodChoices)
                                    {
                                        var isBank = method == PaymentMethodType.Bank;
                                        var optionText = paymentMethodLabels.TryGetValue(method, out var label)
                                            ? label
                                            : method.ToString();
                                        if (!isBank)
                                        {
                                            optionText += " (Không khả dụng)";
                                        }
                                        var isSelected = selectedPaymentMethod == method;
                                        <option value="@((int)method)"
                                                selected="@(isSelected ? "selected" : null)"
                                                disabled="@(isBank ? null : "disabled")"
                                                data-available="@(isBank.ToString().ToLowerInvariant())">
                                            @optionText
                                        </option>
                                    }
                                </select>
                                <span asp-validation-for="PaymentMethod" class="text-danger"></span>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            <!-- Right Column: Order Summary -->
            <div class="col-lg-5">
                <div class="card shadow-sm sticky-top" style="top: 20px;">
                    <div class="card-body">
                        <h4 class="card-title mb-3">Tóm tắt đơn hàng</h4>
                        @if (cart != null && cart.CartItems.Any())
                        {
                            <ul class="list-group list-group-flush mb-3">
                                @foreach (var item in cart.CartItems)
                                {
                                    var itemPrice = item.Product != null
                                        ? PriceCalculator.GetProductFinalPrice(item.Product)
                                        : PriceCalculator.GetComboFinalPrice(item.Combo);
                                    var itemTotal = itemPrice * item.Quantity;
                                    string itemName = "Sản phẩm không xác định";
                                    string itemType = "";
                                    string itemImage = "/images/no-image.jpg";

                                    if (item.Product != null)
                                    {
                                        itemName = item.Product.Name;
                                        itemType = "Sản phẩm";
                                        if (!string.IsNullOrEmpty(item.Product.ProductImageUrl))
                                        {
                                            itemImage = item.Product.ProductImageUrl;
                                        }
                                    }
                                    else if (item.Combo != null)
                                    {
                                        itemName = item.Combo.Name;
                                        itemType = "Combo";
                                        if (!string.IsNullOrEmpty(item.Combo.ImageUrl))
                                        {
                                            itemImage = item.Combo.ImageUrl;
                                        }
                                    }

                                    <li class="list-group-item d-flex justify-content-between align-items-center px-0">
                                        <div class="d-flex align-items-center">
                                            <img src="@itemImage" alt="@itemName" class="img-thumbnail me-3" style="width: 60px; height: 60px; object-fit: cover;">
                                            <div>
                                                <h6 class="mb-0 small">@itemName</h6>
                                                <small class="text-muted">@itemType &times; @item.Quantity</small>
                                            </div>
                                        </div>
                                        <span class="fw-bold">@itemTotal.ToString("N0") đ</span>
                                    </li>
                                }
                            </ul>

                            <!-- Voucher Section -->
                            <div class="mb-3">
                                <div class="input-group">
                                    <input type="text" id="voucherCode" class="form-control" placeholder="Nhập mã giảm giá">
                                    <button class="btn btn-outline-secondary" type="button" id="applyVoucherBtn">Áp dụng</button>
                                </div>
                                <div id="voucher-result" class="mt-2"></div>
                            </div>

                            <div id="applied-vouchers-wrapper" class="mb-3" style="display: none;">
                                <h6 class="fw-semibold">Voucher đã áp dụng</h6>
                                <ul class="list-group" id="applied-vouchers-list"></ul>
                            </div>

                            <div class="d-flex justify-content-between mb-2">
                                <span>Tạm tính</span>
                                <strong id="subtotal">@totalPrice.ToString("N0") đ</strong>
                            </div>

                            <div id="discount-row" class="d-flex justify-content-between mb-2 text-success d-none">
                                <span>Giảm giá</span>
                                <strong id="discount-amount"></strong>
                            </div>

                            <div class="d-flex justify-content-between mb-2">
                                <span>VAT (15%)</span>
                                <strong id="vat-amount">@((totalPrice * 0.15).ToString("N0")) đ</strong>
                            </div>
                            <hr />
                            <div class="d-flex justify-content-between h5">
                                <span>Tổng cộng</span>
                                <strong class="text-danger" id="total-bill">@((totalPrice * 1.15).ToString("N0")) đ</strong>
                            </div>
                        }
                        <div class="d-grid mt-4">
                            <button type="submit" class="btn btn-primary btn-lg">
                                <i class="fas fa-lock"></i> Đặt Hàng
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        $(document).ready(function () {

            const PAYNOW_VALUE = '@payNowValue'.toString();
            const paymentTypeSelect = $('#PaymentType');
            const paymentMethodContainer = $('#paymentMethodContainer');
            const paymentMethodSelect = $('#PaymentMethod');
            const initialSubtotal = @totalPrice;

            function updatePaymentMethods(isPayNow) {
                if (isPayNow) {
                    paymentMethodSelect.val('@paymentMethodBankValue');
                }
                else {
                    paymentMethodSelect.val('');
                }
            }

            function togglePaymentMethodFields() {
                const isPayNow = paymentTypeSelect.val() === PAYNOW_VALUE;
                updatePaymentMethods(isPayNow);

                if (isPayNow) {
                    paymentMethodContainer.slideDown();
                } else {
                    paymentMethodContainer.slideUp();
                }
            }

            togglePaymentMethodFields();

            paymentTypeSelect.on('change', togglePaymentMethodFields);



            const voucherResultDiv = $('#voucher-result');
            const applyBtn = $('#applyVoucherBtn');
            const voucherCodeInput = $('#voucherCode');
            const appliedVoucherInputs = $('#appliedVoucherInputs');
            const appliedVouchersList = $('#applied-vouchers-list');
            const appliedVouchersWrapper = $('#applied-vouchers-wrapper');
            const selectedCartItemsInput = $('#SelectedCartItemIds');
            const discountRow = $('#discount-row');
            const discountAmountEl = $('#discount-amount');
            const vatAmountEl = $('#vat-amount');
            const totalBillEl = $('#total-bill');
            const initialAppliedVouchers = @Html.Raw(JsonSerializer.Serialize(ViewBag.InitialAppliedVouchers ?? new List<object>()));
            const initialTotalsData = @Html.Raw(JsonSerializer.Serialize(ViewBag.InitialVoucherTotals ?? new { totalDiscount = 0.0, vatAmount = initialSubtotal * 0.15, totalBill = initialSubtotal + (initialSubtotal * 0.15) }));

            let appliedVouchers = [];

            const initialTotals = {
                totalDiscount: Number((initialTotalsData?.totalDiscount) || 0),
                vatAmount: Number((initialTotalsData?.vatAmount) || (initialSubtotal * 0.15)),
                totalBill: Number((initialTotalsData?.totalBill) || (initialSubtotal + (initialSubtotal * 0.15)))
            };

            function formatCurrency(value) {
                return Number(value || 0).toLocaleString('vi-VN') + ' đ';
            }

            function updateTotals(totalDiscount, vatAmount, totalBill) {
                const discountValue = Number(totalDiscount || 0);
                if (discountValue > 0) {
                    discountRow.removeClass('d-none').css('display', 'flex');
                    discountAmountEl.text('-' + discountValue.toLocaleString('vi-VN') + ' đ');
                } else {
                    discountRow.addClass('d-none');
                    discountAmountEl.text('');
                }

                vatAmountEl.text(formatCurrency(vatAmount));
                totalBillEl.text(formatCurrency(totalBill));
            }

            function resetVoucherFeedback(message, type) {
                if (!message) {
                    voucherResultDiv.empty();
                    return;
                }

                voucherResultDiv.html(`<div class="alert alert-${type} p-2">${message}</div>`);
            }

            function renderAppliedVouchers() {
                appliedVoucherInputs.empty();
                appliedVouchersList.empty();

                if (!appliedVouchers.length) {
                    appliedVouchersWrapper.hide();
                    return;
                }

                appliedVouchersWrapper.show();

                appliedVouchers.forEach(voucher => {
                    appliedVoucherInputs.append(`<input type="hidden" name="AppliedVoucherIds" value="${voucher.id}" />`);

                    const listItem = $(`
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <div class="fw-semibold">${voucher.code}</div>
                                <small class="text-muted">${voucher.name}</small>
                            </div>
                            <div class="d-flex align-items-center gap-2">
                                <span class="text-success">-${Number(voucher.discountAmount).toLocaleString('vi-VN')} đ</span>
                                <button type="button" class="btn btn-sm btn-outline-danger remove-voucher-btn" data-id="${voucher.id}">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </li>
                    `);

                    listItem.find('.remove-voucher-btn').on('click', function () {
                        removeVoucher(voucher.id);
                    });

                    appliedVouchersList.append(listItem);
                });
            }

            function handleVoucherResponse(response) {
                if (!response || !response.success) {
                    return false;
                }

                appliedVouchers = (response.vouchers || []).map(voucher => ({
                    id: Number(voucher.id),
                    code: voucher.code,
                    name: voucher.name,
                    discountAmount: Number(voucher.discountAmount || 0)
                }));

                updateTotals(response.totalDiscount || 0, response.vatAmount || 0, response.totalBill || 0);
                renderAppliedVouchers();
                return true;
            }

            function applyVoucher() {
                const voucherCode = voucherCodeInput.val()?.trim();
                if (!voucherCode) {
                    resetVoucherFeedback('Vui lòng nhập mã giảm giá.', 'warning');
                    return;
                }

                applyBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang xử lý...');
                resetVoucherFeedback('', '');

                $.ajax({
                    url: '@Url.Action("ApplyVoucher", "Order")',
                    type: 'POST',
                    data: {
                        voucherCode: voucherCode,
                        selectedCartItemIds: selectedCartItemsInput.val(),
                        appliedVoucherIds: appliedVouchers.map(voucher => voucher.id)
                    },
                    headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                    traditional: true,
                    success: function (response) {
                        if (handleVoucherResponse(response)) {
                            resetVoucherFeedback('Áp dụng voucher thành công!', 'success');
                            voucherCodeInput.val('').focus();
                        } else {
                            resetVoucherFeedback(response?.error || 'Voucher không hợp lệ.', 'danger');
                        }
                    },
                    error: function () {
                        resetVoucherFeedback('Có lỗi xảy ra. Vui lòng thử lại.', 'danger');
                    },
                    complete: function () {
                        applyBtn.prop('disabled', false).removeClass('btn-danger').addClass('btn-outline-secondary').html('Áp dụng');
                    }
                });
            }

            function removeVoucher(voucherId) {
                const updated = appliedVouchers.filter(voucher => voucher.id !== voucherId);
                if (updated.length === appliedVouchers.length) {
                    return;
                }

                applyBtn.prop('disabled', true);
                resetVoucherFeedback('', '');

                $.ajax({
                    url: '@Url.Action("RecalculateVouchers", "Order")',
                    type: 'POST',
                    data: {
                        appliedVoucherIds: updated.map(voucher => voucher.id),
                        selectedCartItemIds: selectedCartItemsInput.val()
                    },
                    headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                    traditional: true,
                    success: function (response) {
                        if (handleVoucherResponse(response)) {
                            resetVoucherFeedback('Đã cập nhật danh sách voucher.', 'success');
                        } else {
                            resetVoucherFeedback(response?.error || 'Không thể cập nhật voucher.', 'danger');
                        }
                    },
                    error: function () {
                        resetVoucherFeedback('Có lỗi xảy ra khi cập nhật voucher.', 'danger');
                    },
                    complete: function () {
                        applyBtn.prop('disabled', false).addClass('btn-outline-secondary').removeClass('btn-danger').html('Áp dụng');
                    }
                });
            }

            function initializeFromServer() {
                if (Array.isArray(initialAppliedVouchers) && initialAppliedVouchers.length) {
                    appliedVouchers = initialAppliedVouchers.map(voucher => ({
                        id: Number(voucher.id),
                        code: voucher.code,
                        name: voucher.name,
                        discountAmount: Number(voucher.discountAmount || 0)
                    }));
                    updateTotals(initialTotals.totalDiscount, initialTotals.vatAmount, initialTotals.totalBill);
                } else {
                    appliedVouchers = [];
                    updateTotals(0, initialTotals.vatAmount, initialTotals.totalBill);
                }

                renderAppliedVouchers();
            }

            initializeFromServer();

            applyBtn.on('click', applyVoucher);
            voucherCodeInput.on('keypress', function (event) {
                if (event.which === 13) {
                    event.preventDefault();
                    applyVoucher();
                }
            });
        });
    </script>
}
