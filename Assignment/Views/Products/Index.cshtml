@using System.Collections.Generic
@using Assignment.Enums
@{
    ViewData["Title"] = "Quản lý sản phẩm";
    Layout = "_AdminLayout";

    var canCreate = ViewData["CanCreate"] as bool? ?? false;
    var canUpdate = ViewData["CanUpdate"] as bool? ?? false;
    var canDelete = ViewData["CanDelete"] as bool? ?? false;
    var canView = ViewData["CanView"] as bool? ?? false;

    var discountLabels = new Dictionary<DiscountType, string>
    {
        [DiscountType.None] = "Không áp dụng",
        [DiscountType.Percent] = "Giảm theo %",
        [DiscountType.FixedAmount] = "Giảm giá cố định",
        [DiscountType.Amount] = "Giảm theo tiền"
    };
}

@section Styles {
    <style>
        #productModal .modal-content {
            display: flex;
            flex-direction: column;
            max-height: calc(100vh - var(--bs-modal-margin) * 2);
        }

        #productModal form {
            display: flex;
            flex-direction: column;
            flex: 1 1 auto;
            min-height: 0;
        }

        #productModal .modal-body {
            flex: 1 1 auto;
            overflow-y: auto;
        }

        #productModal .modal-footer {
            flex-shrink: 0;
        }

        .image-upload-preview {
            position: relative;
            border: 1px dashed var(--bs-border-color);
            border-radius: 0.5rem;
            min-height: 180px;
            background-color: var(--bs-light);
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .image-upload-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .image-upload-preview.uploading {
            border-color: var(--bs-primary);
        }

        .image-upload-placeholder {
            text-align: center;
            color: var(--bs-secondary-color);
            padding: 1.5rem 1rem;
        }

        .image-upload-placeholder i {
            display: block;
            margin-bottom: 0.5rem;
        }

        .image-upload-spinner {
            position: absolute;
            inset: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgba(255, 255, 255, 0.7);
        }
    </style>
}

<div class="container-fluid pt-4 px-4">
    <div class="card shadow-sm" id="product-app"
         data-can-create="@(canCreate ? "true" : "false")"
         data-can-update="@(canUpdate ? "true" : "false")"
         data-can-delete="@(canDelete ? "true" : "false")"
         data-can-view="@(canView ? "true" : "false")"
         data-detail-url-template="@Url.Action("ProductDetail", "Home", new { id = "__ID__" })">
        <div class="card-header bg-light">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                <div>
                    <h4 class="mb-1 text-primary">
                        <i class="fas fa-box-open me-2"></i>@ViewData["Title"]
                    </h4>
                </div>
                @if (canCreate)
                {
                    <button type="button" class="btn btn-primary" id="createProductBtn">
                        <i class="fas fa-plus me-2"></i>Thêm mới sản phẩm
                    </button>
                }
            </div>
        </div>
        <div class="card-body">
            <div id="alertPlaceholder"></div>
            <div class="d-flex justify-content-between align-items-center flex-column flex-md-row gap-3 mb-3">
                <div class="text-muted small" id="tableStatus">@(canView ? "Đang tải dữ liệu sản phẩm..." : "Bạn không có quyền xem danh sách sản phẩm.")</div>
                <div>
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="refreshProductsBtn">
                        <i class="fas fa-rotate-right me-1"></i>Tải lại
                    </button>
                </div>
            </div>
            <div class="filter-toolbar mb-4" id="productFilters">
                <div class="row g-3 align-items-end">
                    <div class="col-12 col-xl-4">
                        <label class="form-label filter-label" for="productSearchInput">Tìm kiếm</label>
                        <div class="filter-input-icon">
                            <i class="fas fa-search filter-icon"></i>
                            <input type="search" class="form-control" id="productSearchInput" placeholder="Tên, mô tả hoặc danh mục" />
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-xl-3">
                        <label class="form-label filter-label" for="productCategoryFilter">Danh mục</label>
                        <select id="productCategoryFilter" class="form-select">
                            <option value="">Tất cả danh mục</option>
                        </select>
                    </div>
                    <div class="col-12 col-sm-6 col-xl-3">
                        <label class="form-label filter-label" for="productStatusFilter">Trạng thái</label>
                        <select id="productStatusFilter" class="form-select">
                            <option value="">Tất cả</option>
                            <option value="published">Đã xuất bản</option>
                            <option value="draft">Bản nháp</option>
                        </select>
                    </div>
                    <div class="col-12 col-sm-6 col-xl-2 ms-xl-auto d-flex align-items-end">
                        <button type="button" class="btn btn-outline-secondary w-100" id="productResetFilters">
                            <i class="fas fa-eraser me-1"></i>Xóa lọc
                        </button>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 80px;" class="text-center">Ảnh</th>
                            <th>Tên sản phẩm</th>
                            <th>Giá bán</th>
                            <th>Tồn kho</th>
                            <th>Danh mục</th>
                            <th>Trạng thái</th>
                            <th style="width: 120px;" class="text-center">Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="productsTableBody">
                        <tr>
                            <td colspan="7" class="text-center py-4 text-muted">@(canView ? "Đang tải dữ liệu..." : "Không có dữ liệu để hiển thị.")</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<form id="antiForgeryForm" class="d-none">
    @Html.AntiForgeryToken()
</form>

<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">Thêm mới sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="productForm" novalidate>
                <div class="modal-body">
                    <div id="productFormErrors" class="alert alert-danger d-none" role="alert"></div>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="productName" class="form-label">Tên sản phẩm<span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="productName" maxlength="500" required />
                        </div>
                        <div class="col-md-6">
                            <label for="productCategory" class="form-label">Danh mục<span class="text-danger">*</span></label>
                            <select id="productCategory" class="form-select" required>
                                <option value="">-- Chọn danh mục --</option>
                            </select>
                        </div>
                        <div class="col-12">
                            <label for="productDescription" class="form-label">Mô tả<span class="text-danger">*</span></label>
                            <textarea id="productDescription" class="form-control" rows="3" maxlength="10000" required></textarea>
                        </div>
                        <div class="col-md-4">
                            <label for="productPrice" class="form-label">Giá bán (VND)<span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="productPrice" min="0" step="0.01" required />
                        </div>
                        <div class="col-md-4">
                            <label for="productStock" class="form-label">Tồn kho<span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="productStock" min="0" step="1" required />
                        </div>
                        <div class="col-md-4">
                            <label for="productDiscountType" class="form-label">Loại giảm giá</label>
                            <select id="productDiscountType" class="form-select">
                                @foreach (var discount in discountLabels)
                                {
                                    <option value="@((int)discount.Key)">@discount.Value</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="productDiscount" class="form-label" id="productDiscountLabel">Giá trị giảm</label>
                            <input type="number" class="form-control" id="productDiscount" min="0" step="1" />
                            <small class="text-muted">Bỏ trống nếu không áp dụng.</small>
                        </div>
                        <div class="col-md-4">
                            <label for="productImageFile" class="form-label">Ảnh đại diện (URL)<span class="text-danger">*</span></label>
                            <input type="file" class="form-control" id="productImageFile" accept="image/*" />
                            <input type="hidden" id="productImageUrl" required />
                            <div class="image-upload-preview mt-2" id="productImagePreviewWrapper">
                                <img src="" alt="Xem trước ảnh sản phẩm" id="productImagePreview" class="d-none" />
                                <div class="image-upload-placeholder" id="productImagePlaceholder">
                                    <i class="fas fa-image fa-2x"></i>
                                    <div>Chưa chọn ảnh</div>
                                </div>
                                <div class="image-upload-spinner d-none" id="productImageUploading">
                                    <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
                                </div>
                            </div>
                            <div class="form-text text-muted" id="productImageUploadFeedback">Chọn ảnh định dạng JPG, PNG, GIF hoặc WEBP (tối đa 5MB).</div>
                        </div>
                        <div class="col-md-4">
                            <label for="productPreparationTime" class="form-label">Thời gian chuẩn bị (phút)</label>
                            <input type="number" class="form-control" id="productPreparationTime" min="0" step="1" />
                        </div>
                        <div class="col-md-4">
                            <label for="productCalories" class="form-label">Calories</label>
                            <input type="number" class="form-control" id="productCalories" min="0" step="1" />
                        </div>
                        <div class="col-12">
                            <label for="productIngredients" class="form-label">Thành phần<span class="text-danger">*</span></label>
                            <textarea id="productIngredients" class="form-control" rows="2" maxlength="1000" required></textarea>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="productIsPublish" />
                                <label class="form-check-label" for="productIsPublish">Xuất bản ngay</label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="productIsSpicy" />
                                <label class="form-check-label" for="productIsSpicy">Món cay</label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="productIsVegetarian" />
                                <label class="form-check-label" for="productIsVegetarian">Đồ chay</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary" id="productSubmitBtn">Thêm mới</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Xóa sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Bạn có chắc chắn muốn xóa sản phẩm <strong id="deleteProductName"></strong>? Hành động này không thể hoàn tác.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="productDetailModal" tabindex="-1" aria-labelledby="productDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productDetailModalLabel">Chi tiết sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="productDetailBody" class="d-flex flex-column gap-3"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const app = document.getElementById('product-app');
            if (!app) {
                return;
            }

            const canView = app.dataset.canView === 'true';
            const canUpdate = app.dataset.canUpdate === 'true';
            const canDelete = app.dataset.canDelete === 'true';
            const API_BASE_URL = '/api/products';

            const tableBody = document.getElementById('productsTableBody');
            const tableStatus = document.getElementById('tableStatus');
            const alertPlaceholder = document.getElementById('alertPlaceholder');
            const refreshBtn = document.getElementById('refreshProductsBtn');
            const createBtn = document.getElementById('createProductBtn');
            const searchInput = document.getElementById('productSearchInput');
            const categoryFilterSelect = document.getElementById('productCategoryFilter');
            const statusFilterSelect = document.getElementById('productStatusFilter');
            const resetFiltersBtn = document.getElementById('productResetFilters');
            const antiForgeryTokenInput = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]');
            const antiForgeryToken = antiForgeryTokenInput ? antiForgeryTokenInput.value : '';

            const productModalEl = document.getElementById('productModal');
            const productModal = new bootstrap.Modal(productModalEl);
            const productModalBody = productModalEl ? productModalEl.querySelector('.modal-body') : null;
            const productForm = document.getElementById('productForm');
            const productModalTitle = document.getElementById('productModalLabel');
            const productFormErrors = document.getElementById('productFormErrors');
            const deleteModalEl = document.getElementById('deleteModal');
            const deleteModal = new bootstrap.Modal(deleteModalEl);
            const deleteConfirmBtn = document.getElementById('confirmDeleteBtn');
            const deleteProductName = document.getElementById('deleteProductName');

            const detailModalEl = document.getElementById('productDetailModal');
            const detailModal = new bootstrap.Modal(detailModalEl);
            const detailBody = document.getElementById('productDetailBody');
            const detailUrlTemplate = app.dataset.detailUrlTemplate || '';

            const nameInput = document.getElementById('productName');
            const descriptionInput = document.getElementById('productDescription');
            const priceInput = document.getElementById('productPrice');
            const stockInput = document.getElementById('productStock');
            const discountTypeSelect = document.getElementById('productDiscountType');
            const discountInput = document.getElementById('productDiscount');
            const discountLabel = document.getElementById('productDiscountLabel');
            const publishCheckbox = document.getElementById('productIsPublish');
            const imageInput = document.getElementById('productImageUrl');
            const imageFileInput = document.getElementById('productImageFile');
            const imagePreviewWrapper = document.getElementById('productImagePreviewWrapper');
            const imagePreview = document.getElementById('productImagePreview');
            const imagePlaceholder = document.getElementById('productImagePlaceholder');
            const imageUploadingIndicator = document.getElementById('productImageUploading');
            const imageFeedback = document.getElementById('productImageUploadFeedback');
            const defaultImageFeedback = imageFeedback ? imageFeedback.textContent.trim() : '';
            const IMAGE_UPLOAD_URL = '/api/uploads/images';
            const MAX_IMAGE_SIZE = 5 * 1024 * 1024;
            let isUploadingImage = false;
            let temporaryImageObjectUrl = null;
            const prepInput = document.getElementById('productPreparationTime');
            const caloriesInput = document.getElementById('productCalories');
            const ingredientsInput = document.getElementById('productIngredients');
            const spicyCheckbox = document.getElementById('productIsSpicy');
            const vegetarianCheckbox = document.getElementById('productIsVegetarian');
            const categorySelect = document.getElementById('productCategory');
            const submitButton = document.getElementById('productSubmitBtn');

            let editingProductId = null;
            let deleteProductId = null;
            let cachedCategories = [];
            let allProducts = [];
            let filteredProducts = [];

            const currencyFormatter = new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' });
            const DISCOUNT_NONE = @( (int)DiscountType.None );
            const DISCOUNT_PERCENT = @( (int)DiscountType.Percent );
            const DISCOUNT_FIXED = @( (int)DiscountType.FixedAmount );
            const DISCOUNT_AMOUNT = @( (int)DiscountType.Amount );

            const discountLabelMap = {
                [DISCOUNT_NONE]: 'Không áp dụng',
                [DISCOUNT_PERCENT]: 'Giảm theo %',
                [DISCOUNT_FIXED]: 'Giảm giá cố định',
                [DISCOUNT_AMOUNT]: 'Giảm theo tiền'
            };

            const debounce = (fn, delay = 300) => {
                let timeoutId;
                return (...args) => {
                    if (timeoutId) {
                        clearTimeout(timeoutId);
                    }

                    timeoutId = window.setTimeout(() => {
                        fn(...args);
                    }, delay);
                };
            };

            function updateProductTableStatus(count) {
                if (!tableStatus || !canView) {
                    return;
                }

                const total = allProducts.length;
                if (total === 0) {
                    tableStatus.textContent = 'Không có sản phẩm nào để hiển thị.';
                    return;
                }

                if (count === total) {
                    tableStatus.textContent = `Đang hiển thị ${count} sản phẩm.`;
                } else {
                    tableStatus.textContent = `Tìm thấy ${count}/${total} sản phẩm.`;
                }
            }

            function applyProductFilters() {
                if (!Array.isArray(allProducts)) {
                    filteredProducts = [];
                } else {
                    const searchTerm = (searchInput?.value || '').trim().toLowerCase();
                    const categoryFilterValue = categoryFilterSelect?.value || '';
                    const statusFilterValue = statusFilterSelect?.value || '';

                    filteredProducts = allProducts.filter(product => {
                        const name = (product.name || '').toString().toLowerCase();
                        const description = (product.description || '').toString().toLowerCase();
                        const categoryName = (product.categoryName || '').toString().toLowerCase();

                        const matchesSearch = !searchTerm
                            || name.includes(searchTerm)
                            || description.includes(searchTerm)
                            || categoryName.includes(searchTerm);

                        const matchesCategory = !categoryFilterValue
                            || String(product.categoryId ?? '') === categoryFilterValue;

                        const matchesStatus = !statusFilterValue
                            || (statusFilterValue === 'published' && product.isPublish)
                            || (statusFilterValue === 'draft' && !product.isPublish);

                        return matchesSearch && matchesCategory && matchesStatus;
                    });
                }

                renderProducts(filteredProducts);
            }

            function showAlert(message, type = 'success') {
                if (!alertPlaceholder) {
                    return;
                }

                const wrapper = document.createElement('div');
                wrapper.className = `alert alert-${type} alert-dismissible fade show`;
                wrapper.role = 'alert';
                wrapper.innerHTML = `
                    <div>${message}</div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`;
                alertPlaceholder.appendChild(wrapper);

                setTimeout(() => {
                    wrapper.classList.remove('show');
                    wrapper.classList.add('fade');
                    setTimeout(() => wrapper.remove(), 150);
                }, 5000);
            }

            function setTableLoading(message = 'Đang tải dữ liệu...') {
                const safeMessage = escapeHtml(message);
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-4 text-muted">${safeMessage}</td>
                    </tr>`;
            }

            function setTableStatus(message) {
                if (tableStatus) {
                    tableStatus.textContent = message;
                }
            }

            function escapeHtml(value) {
                if (value === null || value === undefined) {
                    return '';
                }
                return value
                    .toString()
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;');
            }

            function formatDateTime(value) {
                if (!value) {
                    return '—';
                }

                const date = new Date(value);
                if (Number.isNaN(date.getTime())) {
                    return value;
                }

                return date.toLocaleString('vi-VN');
            }

            function formatBoolean(value) {
                return value ? 'Có' : 'Không';
            }

            function toggleDiscountField() {
                if (!discountInput) {
                    return;
                }

                const discountType = Number(discountTypeSelect.value || DISCOUNT_NONE);
                const isNone = discountType === DISCOUNT_NONE;
                discountInput.disabled = isNone;

                if (isNone) {
                    discountInput.value = '';
                }

                discountInput.min = '0';
                discountInput.step = '1';

                if (discountType === DISCOUNT_PERCENT) {
                    if (discountLabel) {
                        discountLabel.textContent = 'Giá trị giảm (%)';
                    }
                    discountInput.setAttribute('max', '100');
                } else if (discountType === DISCOUNT_AMOUNT) {
                    if (discountLabel) {
                        discountLabel.textContent = 'Giá trị giảm (VND)';
                    }
                    discountInput.removeAttribute('max');
                } else if (discountType === DISCOUNT_FIXED) {
                    if (discountLabel) {
                        discountLabel.textContent = 'Giá bán ưu đãi (VND)';
                    }
                    discountInput.removeAttribute('max');
                } else {
                    if (discountLabel) {
                        discountLabel.textContent = 'Giá trị giảm';
                    }
                    discountInput.removeAttribute('max');
                }
            }

            function setProductImageFeedback(message, state = 'muted') {
                if (!imageFeedback) {
                    return;
                }

                imageFeedback.textContent = message;
                imageFeedback.classList.remove('text-danger', 'text-success', 'text-muted');

                if (state === 'error') {
                    imageFeedback.classList.add('text-danger');
                } else if (state === 'success') {
                    imageFeedback.classList.add('text-success');
                } else {
                    imageFeedback.classList.add('text-muted');
                }
            }

            function showProductImagePlaceholder() {
                if (imagePreview) {
                    imagePreview.src = '';
                    imagePreview.classList.add('d-none');
                }

                if (imagePlaceholder) {
                    imagePlaceholder.classList.remove('d-none');
                }
            }

            function showProductImage(url) {
                if (!imagePreview) {
                    return;
                }

                imagePreview.src = url;
                imagePreview.classList.remove('d-none');

                if (imagePlaceholder) {
                    imagePlaceholder.classList.add('d-none');
                }
            }

            function setProductImageLoading(isLoading) {
                isUploadingImage = isLoading;

                if (imageUploadingIndicator) {
                    imageUploadingIndicator.classList.toggle('d-none', !isLoading);
                }

                if (imagePreviewWrapper) {
                    imagePreviewWrapper.classList.toggle('uploading', isLoading);
                }
            }

            function revokeTemporaryImageUrl() {
                if (temporaryImageObjectUrl) {
                    URL.revokeObjectURL(temporaryImageObjectUrl);
                    temporaryImageObjectUrl = null;
                }
            }

            function resetProductImageState() {
                revokeTemporaryImageUrl();

                if (imageFileInput) {
                    imageFileInput.value = '';
                }

                if (imageInput) {
                    imageInput.value = '';
                }

                showProductImagePlaceholder();
                setProductImageLoading(false);

                const message = defaultImageFeedback || 'Chọn ảnh định dạng JPG, PNG, GIF hoặc WEBP (tối đa 5MB).';
                setProductImageFeedback(message, 'muted');
            }

            function setProductImageFromUrl(url) {
                revokeTemporaryImageUrl();

                if (imageFileInput) {
                    imageFileInput.value = '';
                }

                if (url) {
                    showProductImage(url);
                    setProductImageFeedback('Ảnh hiện tại sẽ được giữ nguyên nếu bạn không tải ảnh mới.', 'muted');
                } else {
                    showProductImagePlaceholder();
                    const message = defaultImageFeedback || 'Chọn ảnh định dạng JPG, PNG, GIF hoặc WEBP (tối đa 5MB).';
                    setProductImageFeedback(message, 'muted');
                }
            }

            function validateProductImageFile(file) {
                if (!file) {
                    return 'Vui lòng chọn một file ảnh hợp lệ.';
                }

                if (file.size > MAX_IMAGE_SIZE) {
                    return 'Ảnh vượt quá dung lượng cho phép (tối đa 5MB).';
                }

                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
                const allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
                const fileType = (file.type || '').toLowerCase();
                const dotIndex = file.name.lastIndexOf('.');
                const extension = dotIndex >= 0 ? file.name.substring(dotIndex).toLowerCase() : '';
                const isTypeValid = allowedTypes.includes(fileType);
                const isExtensionValid = allowedExtensions.includes(extension);

                if (!isTypeValid && !isExtensionValid) {
                    return 'Vui lòng chọn file ảnh định dạng JPG, PNG, GIF hoặc WEBP.';
                }

                return '';
            }

            async function handleProductImageFileChange(event) {
                const file = event?.target?.files ? event.target.files[0] : null;

                if (!file) {
                    if (imageInput && imageInput.value) {
                        setProductImageFromUrl(imageInput.value);
                    } else {
                        resetProductImageState();
                    }

                    return;
                }

                const validationMessage = validateProductImageFile(file);
                if (validationMessage) {
                    setProductImageFeedback(validationMessage, 'error');

                    if (imageFileInput) {
                        imageFileInput.value = '';
                    }

                    if (imageInput && imageInput.value) {
                        setProductImageFromUrl(imageInput.value);
                    } else {
                        showProductImagePlaceholder();
                    }

                    return;
                }

                revokeTemporaryImageUrl();
                temporaryImageObjectUrl = URL.createObjectURL(file);
                showProductImage(temporaryImageObjectUrl);
                setProductImageFeedback('Đang tải ảnh lên...', 'muted');
                setProductImageLoading(true);

                const previousUrl = imageInput ? imageInput.value : '';

                const formData = new FormData();
                formData.append('file', file);

                try {
                    const response = await fetch(IMAGE_UPLOAD_URL, {
                        method: 'POST',
                        headers: {
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: formData
                    });

                    if (!response.ok) {
                        const errorResponse = await response.json().catch(() => null);
                        const message = errorResponse?.message || 'Không thể tải ảnh lên. Vui lòng thử lại sau.';
                        throw new Error(message);
                    }

                    const result = await response.json();
                    if (!result || !result.url) {
                        throw new Error('Máy chủ không trả về đường dẫn ảnh.');
                    }

                    if (imageInput) {
                        imageInput.value = result.url;
                    }

                    revokeTemporaryImageUrl();
                    showProductImage(result.url);
                    setProductImageFeedback('Ảnh đã được tải lên thành công.', 'success');
                } catch (error) {
                    revokeTemporaryImageUrl();

                    if (imageInput) {
                        imageInput.value = previousUrl;
                    }

                    if (previousUrl) {
                        showProductImage(previousUrl);
                    } else {
                        showProductImagePlaceholder();
                    }

                    const message = error instanceof Error
                        ? error.message
                        : 'Không thể tải ảnh lên. Vui lòng thử lại sau.';
                    setProductImageFeedback(message, 'error');
                } finally {
                    setProductImageLoading(false);

                    if (imageFileInput) {
                        imageFileInput.value = '';
                    }
                }
            }

            function populateCategories() {
                if (!categorySelect) {
                    return;
                }

                const previousValue = categorySelect.value;
                const previousFilterValue = categoryFilterSelect ? categoryFilterSelect.value : '';
                categorySelect.innerHTML = '<option value="">-- Chọn danh mục --</option>';
                if (categoryFilterSelect) {
                    categoryFilterSelect.innerHTML = '<option value="">Tất cả danh mục</option>';
                }
                cachedCategories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.textContent = category.name;
                    categorySelect.appendChild(option);
                    if (categoryFilterSelect) {
                        const filterOption = option.cloneNode(true);
                        categoryFilterSelect.appendChild(filterOption);
                    }
                });

                if (previousValue) {
                    categorySelect.value = previousValue;
                }
                if (categoryFilterSelect && previousFilterValue) {
                    categoryFilterSelect.value = previousFilterValue;
                }
            }

            function ensureCategoryOption(categoryId, categoryName) {
                if (!categoryId || !categorySelect) {
                    return;
                }

                const exists = cachedCategories.some(cat => Number(cat.id) === Number(categoryId));
                if (!exists && categoryName) {
                    cachedCategories.push({ id: categoryId, name: categoryName });
                    cachedCategories.sort((a, b) => a.name.localeCompare(b.name));
                    populateCategories();
                }
            }

            function renderProducts(products) {
                tableBody.innerHTML = '';

                const list = Array.isArray(products) ? products : [];

                if (list.length === 0) {
                    const message = allProducts.length === 0
                        ? 'Chưa có sản phẩm nào.'
                        : 'Không tìm thấy sản phẩm phù hợp.';
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="7" class="text-center py-4 text-muted">${message}</td>
                        </tr>`;
                    updateProductTableStatus(0);
                    return;
                }

                updateProductTableStatus(list.length);

                list.forEach(product => {
                    const tr = document.createElement('tr');

                    const imageCell = document.createElement('td');
                    imageCell.className = 'text-center';
                    if (product.productImageUrl) {
                        const img = document.createElement('img');
                        img.src = product.productImageUrl;
                        img.alt = product.name ?? '';
                        img.className = 'rounded';
                        img.style.width = '48px';
                        img.style.height = '48px';
                        img.style.objectFit = 'cover';
                        imageCell.appendChild(img);
                    } else {
                        const placeholder = document.createElement('div');
                        placeholder.className = 'bg-light border rounded d-inline-flex align-items-center justify-content-center text-muted';
                        placeholder.style.width = '48px';
                        placeholder.style.height = '48px';
                        placeholder.innerHTML = '<i class="fas fa-image"></i>';
                        imageCell.appendChild(placeholder);
                    }
                    tr.appendChild(imageCell);

                    const nameCell = document.createElement('td');
                    const nameWrapper = document.createElement('div');
                    nameWrapper.className = 'fw-semibold';
                    if (product.isPublish && detailUrlTemplate) {
                        const detailUrl = detailUrlTemplate.replace('__ID__', encodeURIComponent(product.id));
                        const link = document.createElement('a');
                        link.href = detailUrl;
                        link.target = '_blank';
                        link.rel = 'noopener noreferrer';
                        link.textContent = product.name ?? '';
                        link.className = 'text-decoration-none link-primary';
                        nameWrapper.appendChild(link);
                    } else {
                        nameWrapper.textContent = product.name ?? '';
                    }
                    nameCell.appendChild(nameWrapper);
                    const descriptionWrapper = document.createElement('div');
                    descriptionWrapper.className = 'text-muted small';
                    descriptionWrapper.textContent = product.description ?? '';
                    nameCell.appendChild(descriptionWrapper);
                    tr.appendChild(nameCell);

                    const priceCell = document.createElement('td');
                    const discountType = Number(product.discountType ?? 0);
                    const basePrice = Number(product.price ?? 0);
                    const discountValue = product.discount;

                    if (discountType === DISCOUNT_PERCENT && discountValue !== null && discountValue !== undefined) {
                        const discountedPrice = Math.max(basePrice - (basePrice * discountValue / 100), 0);
                        priceCell.innerHTML = `
                            <div class="d-flex flex-column">
                                <del class="text-muted small">${currencyFormatter.format(basePrice)}</del>
                                <span class="fw-semibold text-danger">${currencyFormatter.format(discountedPrice)}</span>
                                <span class="small text-muted">Giảm ${discountValue}%</span>
                            </div>`;
                    } else if (discountType === DISCOUNT_FIXED && discountValue !== null && discountValue !== undefined) {
                        priceCell.innerHTML = `
                            <div class="d-flex flex-column">
                                <del class="text-muted small">${currencyFormatter.format(basePrice)}</del>
                                <span class="fw-semibold text-danger">${currencyFormatter.format(discountValue)}</span>
                                <span class="small text-muted">Giá ưu đãi</span>
                            </div>`;
                    } else if (discountType === DISCOUNT_AMOUNT && discountValue !== null && discountValue !== undefined) {
                        const discountedPrice = Math.max(basePrice - discountValue, 0);
                        priceCell.innerHTML = `
                            <div class="d-flex flex-column">
                                <del class="text-muted small">${currencyFormatter.format(basePrice)}</del>
                                <span class="fw-semibold text-danger">${currencyFormatter.format(discountedPrice)}</span>
                                <span class="small text-muted">Giảm ${currencyFormatter.format(discountValue)}</span>
                            </div>`;
                    } else {
                        priceCell.innerHTML = `<span class="fw-semibold">${currencyFormatter.format(basePrice)}</span>`;
                    }
                    tr.appendChild(priceCell);

                    const stockCell = document.createElement('td');
                    stockCell.textContent = Number(product.stock ?? 0).toLocaleString('vi-VN');
                    tr.appendChild(stockCell);

                    const categoryCell = document.createElement('td');
                    categoryCell.textContent = product.categoryName ? product.categoryName : '—';
                    tr.appendChild(categoryCell);

                    const statusCell = document.createElement('td');
                    statusCell.innerHTML = product.isPublish
                        ? '<span class="badge bg-success-subtle border border-success text-success px-3 py-2">Đã xuất bản</span>'
                        : '<span class="badge bg-secondary-subtle border border-secondary text-secondary px-3 py-2">Bản nháp</span>';
                    tr.appendChild(statusCell);

                    const actionsCell = document.createElement('td');
                    actionsCell.classList.add('text-center');
                    const actionsWrapper = document.createElement('div');
                    actionsWrapper.className = 'd-flex justify-content-center gap-2';

                    if (canView) {
                        const viewButton = document.createElement('button');
                        viewButton.type = 'button';
                        viewButton.className = 'btn btn-sm btn-outline-info';
                        viewButton.dataset.action = 'detail';
                        viewButton.dataset.id = product.id;
                        viewButton.innerHTML = '<i class="fas fa-eye"></i>';
                        actionsWrapper.appendChild(viewButton);
                    }

                    if (canUpdate) {
                        const editButton = document.createElement('button');
                        editButton.type = 'button';
                        editButton.className = 'btn btn-sm btn-outline-primary';
                        editButton.dataset.action = 'edit';
                        editButton.dataset.id = product.id;
                        editButton.innerHTML = '<i class="fas fa-edit"></i>';
                        actionsWrapper.appendChild(editButton);
                    }

                    if (canDelete) {
                        const deleteButton = document.createElement('button');
                        deleteButton.type = 'button';
                        deleteButton.className = 'btn btn-sm btn-outline-danger';
                        deleteButton.dataset.action = 'delete';
                        deleteButton.dataset.id = product.id;
                        deleteButton.dataset.name = product.name ?? '';
                        deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
                        actionsWrapper.appendChild(deleteButton);
                    }

                    if (actionsWrapper.children.length === 0) {
                        actionsWrapper.innerHTML = '<span class="text-muted small">—</span>';
                    }

                    actionsCell.appendChild(actionsWrapper);
                    tr.appendChild(actionsCell);

                    tableBody.appendChild(tr);
                });
            }

            async function loadCategories(showError = true) {
                try {
                    const response = await fetch(`${API_BASE_URL}/categories`);
                    if (!response.ok) {
                        if (response.status === 403) {
                            if (showError) {
                                showAlert('Bạn không có quyền truy cập danh mục sản phẩm.', 'warning');
                            }
                            cachedCategories = [];
                        } else {
                            throw new Error('Failed to load categories');
                        }
                    } else {
                        cachedCategories = await response.json();
                    }
                } catch (error) {
                    if (showError) {
                        showAlert('Không thể tải danh mục sản phẩm. Vui lòng thử lại sau.', 'danger');
                    }
                    cachedCategories = [];
                }

                populateCategories();
            }

            async function loadProducts() {
                if (!canView) {
                    setTableStatus('Bạn không có quyền xem danh sách sản phẩm.');
                    setTableLoading('Bạn không có quyền xem danh sách sản phẩm.');
                    allProducts = [];
                    filteredProducts = [];
                    return;
                }

                setTableLoading();
                try {
                    const response = await fetch(API_BASE_URL);
                    if (!response.ok) {
                        if (response.status === 403) {
                            setTableStatus('Bạn không có quyền xem danh sách sản phẩm.');
                            setTableLoading('Bạn không có quyền xem danh sách sản phẩm.');
                            allProducts = [];
                            filteredProducts = [];
                            return;
                        }
                        throw new Error('Failed to load products');
                    }

                    const products = await response.json();
                    allProducts = Array.isArray(products) ? products : [];
                    applyProductFilters();
                } catch (error) {
                    setTableStatus('Không thể tải danh sách sản phẩm.');
                    setTableLoading('Có lỗi xảy ra khi tải dữ liệu.');
                    allProducts = [];
                    filteredProducts = [];
                    showAlert('Không thể tải danh sách sản phẩm. Vui lòng thử lại sau.', 'danger');
                }
            }

            async function openDetailModal(productId) {
                if (!detailBody) {
                    return;
                }

                detailBody.innerHTML = `
                    <div class="py-4 text-center text-muted">
                        <div class="spinner-border text-primary" role="status"></div>
                    </div>`;
                detailModal.show();

                try {
                    const response = await fetch(`${API_BASE_URL}/${productId}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        if (response.status === 404) {
                            detailBody.innerHTML = '<div class="alert alert-warning mb-0">Sản phẩm không tồn tại hoặc đã bị xóa.</div>';
                        } else if (response.status === 403) {
                            detailBody.innerHTML = '<div class="alert alert-warning mb-0">Bạn không có quyền xem sản phẩm này.</div>';
                        } else {
                            throw new Error('Failed to load product detail');
                        }
                        return;
                    }

                    const product = await response.json();
                    const discountType = Number(product.discountType ?? 0);
                    let discountText = discountLabelMap[discountType] ?? 'Không xác định';
                    if (discountType === DISCOUNT_PERCENT && product.discount) {
                        discountText += ` (${Number(product.discount).toLocaleString('vi-VN')}%)`;
                    } else if ((discountType === DISCOUNT_FIXED || discountType === DISCOUNT_AMOUNT) && product.discount) {
                        discountText += ` (${currencyFormatter.format(Number(product.discount))})`;
                    }

                    const imageUrl = escapeHtml(product.productImageUrl || '/images/no-image.jpg');
                    const productName = escapeHtml(product.name ?? 'Sản phẩm');
                    const categoryName = escapeHtml(product.categoryName ?? 'Không có danh mục');
                    const statusBadge = product.isPublish
                        ? '<span class="badge bg-success">Đã xuất bản</span>'
                        : '<span class="badge bg-secondary">Bản nháp</span>';

                    detailBody.innerHTML = `
                        <div class="d-flex align-items-start gap-3">
                            <img src="${imageUrl}" alt="${productName}" class="rounded" style="width: 96px; height: 96px; object-fit: cover;" />
                            <div>
                                <h5 class="mb-1">${productName}</h5>
                                <div class="text-muted mb-2">${categoryName}</div>
                                ${statusBadge}
                            </div>
                        </div>
                        <div class="row g-3 mt-2">
                            <div class="col-md-4">
                                <div class="small text-muted">Giá bán</div>
                                <div class="fw-semibold">${currencyFormatter.format(Number(product.price ?? 0))}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Tồn kho</div>
                                <div>${Number(product.stock ?? 0).toLocaleString('vi-VN')}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Đã bán</div>
                                <div>${Number(product.sold ?? 0).toLocaleString('vi-VN')}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Giảm giá</div>
                                <div>${escapeHtml(discountText)}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Thời gian chuẩn bị</div>
                                <div>${Number(product.preparationTime ?? 0).toLocaleString('vi-VN')} phút</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Calories</div>
                                <div>${Number(product.calories ?? 0).toLocaleString('vi-VN')}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Món cay</div>
                                <div>${formatBoolean(product.isSpicy)}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Đồ chay</div>
                                <div>${formatBoolean(product.isVegetarian)}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Xuất bản</div>
                                <div>${formatBoolean(product.isPublish)}</div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <h6 class="mb-2">Mô tả</h6>
                            <p class="mb-0">${escapeHtml(product.description ?? '—')}</p>
                        </div>
                        <div class="mt-3">
                            <h6 class="mb-2">Thành phần</h6>
                            <p class="mb-0">${escapeHtml(product.ingredients ?? '—')}</p>
                        </div>
                        <div class="mt-3 row g-3">
                            <div class="col-md-6">
                                <div class="small text-muted">Ngày tạo</div>
                                <div>${formatDateTime(product.createdAt)}</div>
                            </div>
                            <div class="col-md-6">
                                <div class="small text-muted">Cập nhật lần cuối</div>
                                <div>${product.updatedAt ? formatDateTime(product.updatedAt) : '—'}</div>
                            </div>
                        </div>`;
                } catch (error) {
                    detailBody.innerHTML = '<div class="alert alert-danger mb-0">Không thể tải chi tiết sản phẩm.</div>';
                }
            }

            function resetModalScroll() {
                if (productModalBody) {
                    productModalBody.scrollTop = 0;
                }
            }

            function resetForm() {
                productForm.reset();
                productFormErrors.classList.add('d-none');
                productFormErrors.innerHTML = '';
                editingProductId = null;
                submitButton.disabled = false;
                submitButton.innerHTML = 'Thêm mới';
                toggleDiscountField();
                resetProductImageState();
                resetModalScroll();
            }

            function fillForm(product) {
                nameInput.value = product.name ?? '';
                descriptionInput.value = product.description ?? '';
                priceInput.value = product.price ?? 0;
                stockInput.value = product.stock ?? 0;
                discountTypeSelect.value = product.discountType ?? 0;
                discountInput.value = product.discount ?? '';
                publishCheckbox.checked = Boolean(product.isPublish);
                imageInput.value = product.productImageUrl ?? '';
                setProductImageFromUrl(imageInput.value);
                prepInput.value = product.preparationTime ?? 0;
                caloriesInput.value = product.calories ?? 0;
                ingredientsInput.value = product.ingredients ?? '';
                spicyCheckbox.checked = Boolean(product.isSpicy);
                vegetarianCheckbox.checked = Boolean(product.isVegetarian);
                categorySelect.value = product.categoryId ?? '';
                toggleDiscountField();
            }

            function handleValidationErrors(problemDetails) {
                if (!productFormErrors) {
                    return;
                }

                const errors = [];
                if (problemDetails && problemDetails.errors) {
                    Object.values(problemDetails.errors).forEach(messages => {
                        if (Array.isArray(messages)) {
                            messages.forEach(message => errors.push(message));
                        }
                    });
                } else if (problemDetails && problemDetails.title) {
                    errors.push(problemDetails.title);
                }

                if (errors.length === 0) {
                    errors.push('Vui lòng kiểm tra lại thông tin đã nhập.');
                }

                productFormErrors.innerHTML = `<ul class="mb-0">${errors.map(message => `<li>${escapeHtml(message)}</li>`).join('')}</ul>`;
                productFormErrors.classList.remove('d-none');
            }

            async function openCreateModal() {
                await loadCategories(false);
                resetForm();
                productModalTitle.textContent = 'Thêm mới sản phẩm';
                submitButton.innerHTML = 'Thêm mới';
                resetModalScroll();
                productModal.show();
            }

            async function openEditModal(productId) {
                productFormErrors.classList.add('d-none');
                productFormErrors.innerHTML = '';
                submitButton.disabled = false;
                submitButton.innerHTML = 'Lưu thay đổi';
                resetModalScroll();

                try {
                    const response = await fetch(`${API_BASE_URL}/${productId}`);
                    if (!response.ok) {
                        if (response.status === 404) {
                            showAlert('Không tìm thấy sản phẩm.', 'warning');
                        } else if (response.status === 403) {
                            showAlert('Bạn không có quyền chỉnh sửa sản phẩm này.', 'warning');
                        } else {
                            throw new Error('Failed to load product');
                        }
                        return;
                    }

                    const product = await response.json();
                    await loadCategories(false);
                    ensureCategoryOption(product.categoryId, product.categoryName);
                    editingProductId = product.id;
                    productModalTitle.textContent = 'Chỉnh sửa sản phẩm';
                    submitButton.innerHTML = 'Lưu thay đổi';
                    fillForm(product);
                    resetModalScroll();
                    productModal.show();
                } catch (error) {
                    showAlert('Không thể tải thông tin sản phẩm. Vui lòng thử lại sau.', 'danger');
                }
            }

            function openDeleteModal(productId, productNameValue) {
                deleteProductId = productId;
                deleteProductName.textContent = productNameValue || '';
                deleteConfirmBtn.disabled = false;
                deleteConfirmBtn.innerHTML = 'Xóa';
                deleteModal.show();
            }

            async function submitProduct(event) {
                event.preventDefault();
                productFormErrors.classList.add('d-none');
                productFormErrors.innerHTML = '';

                const payload = {
                    name: nameInput.value.trim(),
                    description: descriptionInput.value.trim(),
                    price: Number(priceInput.value || 0),
                    stock: Number(stockInput.value || 0),
                    discountType: Number(discountTypeSelect.value || 0),
                    discount: discountInput.value ? Number(discountInput.value) : null,
                    isPublish: publishCheckbox.checked,
                    productImageUrl: imageInput.value.trim(),
                    preparationTime: Number(prepInput.value || 0),
                    calories: Number(caloriesInput.value || 0),
                    ingredients: ingredientsInput.value.trim(),
                    isSpicy: spicyCheckbox.checked,
                    isVegetarian: vegetarianCheckbox.checked,
                    categoryId: Number(categorySelect.value || 0)
                };

                if (isUploadingImage) {
                    productFormErrors.innerHTML = '<ul class="mb-0"><li>Ảnh đại diện đang được tải lên. Vui lòng chờ hoàn tất trước khi lưu.</li></ul>';
                    productFormErrors.classList.remove('d-none');
                    return;
                }

                if (!payload.productImageUrl) {
                    productFormErrors.innerHTML = '<ul class="mb-0"><li>Vui lòng tải lên ảnh đại diện cho sản phẩm.</li></ul>';
                    productFormErrors.classList.remove('d-none');
                    setProductImageFeedback('Vui lòng tải lên ảnh đại diện cho sản phẩm.', 'error');
                    return;
                }

                if (payload.discountType === 0) {
                    payload.discount = null;
                }

                const isEdit = Boolean(editingProductId);
                const url = isEdit ? `${API_BASE_URL}/${editingProductId}` : API_BASE_URL;
                const method = isEdit ? 'PUT' : 'POST';

                submitButton.disabled = true;
                submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Đang xử lý...';

                try {
                    const response = await fetch(url, {
                        method,
                        headers: {
                            'Content-Type': 'application/json',
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        if (response.status === 400) {
                            const problemDetails = await response.json();
                            handleValidationErrors(problemDetails);
                        } else if (response.status === 403) {
                            showAlert('Bạn không có quyền thực hiện thao tác này.', 'warning');
                        } else {
                            const problemDetails = await response.json().catch(() => null);
                            handleValidationErrors(problemDetails);
                        }
                        return;
                    }

                    await loadProducts();
                    productModal.hide();
                    showAlert(isEdit ? 'Đã cập nhật sản phẩm thành công.' : 'Đã thêm sản phẩm mới thành công.');
                } catch (error) {
                    showAlert('Không thể lưu sản phẩm. Vui lòng thử lại sau.', 'danger');
                } finally {
                    submitButton.disabled = false;
                    submitButton.innerHTML = isEdit ? 'Lưu thay đổi' : 'Thêm mới';
                }
            }

            async function confirmDelete() {
                if (!deleteProductId) {
                    return;
                }

                deleteConfirmBtn.disabled = true;
                deleteConfirmBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Đang xóa...';

                try {
                    const response = await fetch(`${API_BASE_URL}/${deleteProductId}`, {
                        method: 'DELETE',
                        headers: {
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        }
                    });

                    if (!response.ok) {
                        if (response.status === 403) {
                            showAlert('Bạn không có quyền xóa sản phẩm này.', 'warning');
                        } else if (response.status === 404) {
                            showAlert('Sản phẩm đã bị xóa hoặc không tồn tại.', 'warning');
                        } else {
                            throw new Error('Failed to delete product');
                        }
                        return;
                    }

                    deleteModal.hide();
                    await loadProducts();
                    showAlert('Đã xóa sản phẩm thành công.');
                } catch (error) {
                    showAlert('Không thể xóa sản phẩm. Vui lòng thử lại sau.', 'danger');
                } finally {
                    deleteConfirmBtn.disabled = false;
                    deleteConfirmBtn.innerHTML = 'Xóa';
                }
            }

            tableBody.addEventListener('click', (event) => {
                const target = event.target.closest('button[data-action]');
                if (!target) {
                    return;
                }

                const action = target.dataset.action;
                const productId = Number(target.dataset.id);
                const productName = target.dataset.name || '';

                if (action === 'detail' && canView) {
                    openDetailModal(productId);
                } else if (action === 'edit' && canUpdate) {
                    openEditModal(productId);
                } else if (action === 'delete' && canDelete) {
                    openDeleteModal(productId, productName);
                }
            });

            const debouncedProductFilter = debounce(() => {
                applyProductFilters();
            }, 300);

            if (searchInput) {
                searchInput.addEventListener('input', () => {
                    debouncedProductFilter();
                });
            }

            if (categoryFilterSelect) {
                categoryFilterSelect.addEventListener('change', () => applyProductFilters());
            }

            if (statusFilterSelect) {
                statusFilterSelect.addEventListener('change', () => applyProductFilters());
            }

            if (resetFiltersBtn) {
                resetFiltersBtn.addEventListener('click', () => {
                    if (searchInput) {
                        searchInput.value = '';
                    }
                    if (categoryFilterSelect) {
                        categoryFilterSelect.value = '';
                    }
                    if (statusFilterSelect) {
                        statusFilterSelect.value = '';
                    }
                    applyProductFilters();
                });
            }

            if (discountTypeSelect) {
                discountTypeSelect.addEventListener('change', toggleDiscountField);
                toggleDiscountField();
            }

            if (productForm) {
                productForm.addEventListener('submit', submitProduct);
            }

            if (imageFileInput) {
                imageFileInput.addEventListener('change', handleProductImageFileChange);
            }

            if (deleteConfirmBtn) {
                deleteConfirmBtn.addEventListener('click', confirmDelete);
            }

            if (createBtn) {
                createBtn.addEventListener('click', () => openCreateModal());
            }

            if (refreshBtn) {
                refreshBtn.addEventListener('click', () => loadProducts());
            }

            if (productModalEl) {
                productModalEl.addEventListener('hidden.bs.modal', () => {
                    resetForm();
                });
            }

            loadCategories(false);
            loadProducts();
        })();
    </script>
}
