@using System.Collections.Generic
@using Assignment.Enums
@{
    ViewData["Title"] = "Quản lý sản phẩm";
    Layout = "_AdminLayout";

    var canCreate = ViewData["CanCreate"] as bool? ?? false;
    var canUpdate = ViewData["CanUpdate"] as bool? ?? false;
    var canDelete = ViewData["CanDelete"] as bool? ?? false;
    var canView = ViewData["CanView"] as bool? ?? false;
    var canBulkManage = canDelete || canUpdate;

    var discountLabels = new Dictionary<DiscountType, string>
    {
        [DiscountType.None] = "Không áp dụng",
        [DiscountType.Percent] = "Giảm theo %",
        [DiscountType.FixedAmount] = "Giảm giá cố định",
        [DiscountType.Amount] = "Giảm theo tiền"
    };
}

@section Styles {
    <style>
        #productModal .modal-content {
            display: flex;
            flex-direction: column;
            max-height: calc(100vh - var(--bs-modal-margin) * 2);
        }

        #productModal form {
            display: flex;
            flex-direction: column;
            flex: 1 1 auto;
            min-height: 0;
        }

        #productModal .modal-body {
            flex: 1 1 auto;
            overflow-y: auto;
        }

        #productModal .modal-footer {
            flex-shrink: 0;
        }

        .image-upload-preview {
            position: relative;
            border: 1px dashed var(--bs-border-color);
            border-radius: 0.5rem;
            min-height: 180px;
            background-color: var(--bs-light);
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .image-upload-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .image-upload-preview.uploading {
            border-color: var(--bs-primary);
        }

        .image-upload-placeholder {
            text-align: center;
            color: var(--bs-secondary-color);
            padding: 1.5rem 1rem;
        }

        .image-upload-placeholder i {
            display: block;
            margin-bottom: 0.5rem;
        }

        .image-upload-spinner {
            position: absolute;
            inset: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgba(255, 255, 255, 0.7);
        }

        .product-types-accordion .accordion-item + .accordion-item {
            margin-top: 1rem;
        }

        .product-type-item .accordion-button {
            padding-right: 3rem;
        }

        .product-type-item .btn-close {
            z-index: 5;
        }

        .product-type-image-preview-wrapper {
            min-height: 140px;
        }
    </style>
}

<div class="container-fluid pt-4 px-4">
    <div class="card shadow-sm" id="product-app"
         data-can-create="@(canCreate ? "true" : "false")"
         data-can-update="@(canUpdate ? "true" : "false")"
         data-can-delete="@(canDelete ? "true" : "false")"
         data-can-view="@(canView ? "true" : "false")"
         data-detail-url-template="@Url.Action("ProductDetail", "Home", new { id = "__ID__" })">
        <div class="card-header bg-light">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                <div>
                    <h4 class="mb-1 text-primary">
                        <i class="fas fa-box-open me-2"></i>@ViewData["Title"]
                    </h4>
                </div>
                @if (canCreate)
                {
                    <button type="button" class="btn btn-primary" id="createProductBtn">
                        <i class="fas fa-plus me-2"></i>Thêm mới sản phẩm
                    </button>
                }
            </div>
        </div>
        <div class="card-body">
            <div id="alertPlaceholder"></div>
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 mb-3">
                <div class="text-muted small" id="tableStatus">@(canView ? "Đang tải dữ liệu sản phẩm..." : "Bạn không có quyền xem danh sách sản phẩm.")</div>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="refreshProductsBtn">
                        <i class="fas fa-rotate-right me-1"></i>Tải lại
                    </button>
                    @if (canBulkManage)
                    {
                        <div class="d-none d-flex flex-wrap gap-2" id="bulkActions">
                            @if (canUpdate)
                            {
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline-primary btn-sm dropdown-toggle" id="bulkPublishDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-bullhorn me-1"></i>Trạng thái công khai
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="bulkPublishDropdown">
                                        <li>
                                            <button type="button" class="dropdown-item" data-bulk-publish="publish">
                                                <i class="fas fa-globe me-2"></i>Xuất bản đã chọn
                                            </button>
                                        </li>
                                        <li>
                                            <button type="button" class="dropdown-item" data-bulk-publish="unpublish">
                                                <i class="fas fa-eye-slash me-2"></i>Ẩn khỏi công khai
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            }
                            @if (canDelete)
                            {
                                <button type="button" class="btn btn-danger btn-sm" id="bulkDeleteBtn">
                                    <i class="fas fa-trash-alt me-1"></i>Xóa đã chọn
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>
            <div class="filter-toolbar mb-4" id="productFilters">
                <div class="row g-3 align-items-end">
                    <div class="col-12 col-xl-4">
                        <label class="form-label filter-label" for="productSearchInput">Tìm kiếm</label>
                        <div class="filter-input-icon">
                            <i class="fas fa-search filter-icon"></i>
                            <input type="search" class="form-control" id="productSearchInput" placeholder="Tên, mô tả hoặc danh mục" />
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-xl-3">
                        <label class="form-label filter-label" for="productCategoryFilter">Danh mục</label>
                        <select id="productCategoryFilter" class="form-select">
                            <option value="">Tất cả danh mục</option>
                        </select>
                    </div>
                    <div class="col-12 col-sm-6 col-xl-3">
                        <label class="form-label filter-label" for="productStatusFilter">Trạng thái</label>
                        <select id="productStatusFilter" class="form-select">
                            <option value="">Tất cả</option>
                            <option value="published">Đã xuất bản</option>
                            <option value="draft">Bản nháp</option>
                        </select>
                    </div>
                    <div class="col-12 col-sm-6 col-xl-2 ms-xl-auto d-flex align-items-end">
                        <button type="button" class="btn btn-outline-secondary w-100" id="productResetFilters">
                            <i class="fas fa-eraser me-1"></i>Xóa lọc
                        </button>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            @if (canBulkManage)
                            {
                                <th style="width: 50px;" class="text-center">
                                    <input type="checkbox" id="selectAllProducts" class="form-check-input" />
                                </th>
                            }
                            <th style="width: 80px;" class="text-center">Ảnh</th>
                            <th>Tên sản phẩm</th>
                            <th>Giá bán</th>
                            <th>Tồn kho</th>
                            <th>Danh mục</th>
                            <th>Trạng thái</th>
                            <th style="width: 120px;" class="text-center">Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="productsTableBody">
                        <tr>
                            <td colspan="@(canBulkManage ? 8 : 7)" class="text-center py-4 text-muted">@(canView ? "Đang tải dữ liệu..." : "Không có dữ liệu để hiển thị.")</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<form id="antiForgeryForm" class="d-none">
    @Html.AntiForgeryToken()
</form>

<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">Thêm mới sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="productForm" novalidate>
                <div class="modal-body">
                    <div id="productFormErrors" class="alert alert-danger d-none" role="alert"></div>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="productName" class="form-label">Tên sản phẩm<span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="productName" maxlength="500" required />
                        </div>
                        <div class="col-md-6">
                            <label for="productCategory" class="form-label">Danh mục<span class="text-danger">*</span></label>
                            <select id="productCategory" class="form-select" required>
                                <option value="">-- Chọn danh mục --</option>
                            </select>
                        </div>
                        <div class="col-12">
                            <label for="productDescription" class="form-label">Mô tả<span class="text-danger">*</span></label>
                            <textarea id="productDescription" class="form-control" rows="3" maxlength="10000" required></textarea>
                        </div>
                        <div class="col-md-4">
                            <label for="productImageFile" class="form-label">Ảnh đại diện (URL)<span class="text-danger">*</span></label>
                            <input type="file" class="form-control" id="productImageFile" accept="image/*" />
                            <input type="hidden" id="productImageUrl" required />
                            <div class="image-upload-preview mt-2" id="productImagePreviewWrapper">
                                <img src="" alt="Xem trước ảnh sản phẩm" id="productImagePreview" class="d-none" />
                                <div class="image-upload-placeholder" id="productImagePlaceholder">
                                    <i class="fas fa-image fa-2x"></i>
                                    <div>Chưa chọn ảnh</div>
                                </div>
                                <div class="image-upload-spinner d-none" id="productImageUploading">
                                    <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
                                </div>
                            </div>
                            <div class="form-text text-muted" id="productImageUploadFeedback">Chọn ảnh định dạng JPG, PNG, GIF hoặc WEBP (tối đa 5MB).</div>
                        </div>
                        <div class="col-md-4 align-self-end">
                            <div class="form-check form-switch mt-2">
                                <input class="form-check-input" type="checkbox" id="productIsPublish" disabled />
                                <label class="form-check-label" for="productIsPublish">Công khai sản phẩm</label>
                                <div class="form-text" id="productPublishHelp">Bật để công khai sản phẩm trên cửa hàng.</div>
                            </div>
                        </div>
                    </div>
                    <hr class="my-4" />
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 mb-3">
                        <h5 class="mb-0">Danh sách loại sản phẩm</h5>
                        <div class="d-flex flex-wrap gap-2">
                            <a class="btn btn-outline-secondary btn-sm" id="downloadProductTypesTemplateLink" href="/api/products/types/template">
                                <i class="fas fa-file-download me-1"></i>Tải file mẫu
                            </a>
                            <input type="file" accept=".xlsx" id="productTypesImportInput" class="d-none" />
                            <button type="button" class="btn btn-outline-primary btn-sm" id="importProductTypesBtn">
                                <i class="fas fa-file-import me-1"></i>Nhập từ file
                            </button>
                            <button type="button" class="btn btn-outline-danger btn-sm" id="clearProductTypesBtn">
                                <i class="fas fa-trash-can me-1"></i>Xóa tất cả
                            </button>
                            <button type="button" class="btn btn-outline-success btn-sm" id="addProductTypeBtn">
                                <i class="fas fa-plus me-1"></i>Thêm loại sản phẩm
                            </button>
                        </div>
                    </div>
                    <div id="productTypesContainer" class="accordion product-types-accordion"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary" id="productSubmitBtn">Thêm mới</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Xóa sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Bạn có chắc chắn muốn xóa sản phẩm <strong id="deleteProductName"></strong>? Hành động này không thể hoàn tác.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="bulkDeleteModal" tabindex="-1" aria-labelledby="bulkDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bulkDeleteModalLabel">Xóa nhiều sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Bạn có chắc chắn muốn xóa <strong id="bulkDeleteCount"></strong> sản phẩm đã chọn? Hành động này không thể hoàn tác.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmBulkDeleteBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="productDetailModal" tabindex="-1" aria-labelledby="productDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productDetailModalLabel">Chi tiết sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="productDetailBody" class="d-flex flex-column gap-3"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const app = document.getElementById('product-app');
            if (!app) {
                return;
            }

            const canView = app.dataset.canView === 'true';
            const canUpdate = app.dataset.canUpdate === 'true';
            const canDelete = app.dataset.canDelete === 'true';
            const canBulkManage = canDelete || canUpdate;
            const API_BASE_URL = '/api/products';
            const columnCount = @(canBulkManage ? 8 : 7);

            const tableBody = document.getElementById('productsTableBody');
            const tableStatus = document.getElementById('tableStatus');
            const alertPlaceholder = document.getElementById('alertPlaceholder');
            const refreshBtn = document.getElementById('refreshProductsBtn');
            const createBtn = document.getElementById('createProductBtn');
            const searchInput = document.getElementById('productSearchInput');
            const categoryFilterSelect = document.getElementById('productCategoryFilter');
            const statusFilterSelect = document.getElementById('productStatusFilter');
            const resetFiltersBtn = document.getElementById('productResetFilters');
            const bulkActions = document.getElementById('bulkActions');
            const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
            const bulkPublishButtons = document.querySelectorAll('[data-bulk-publish]');
            const selectAllCheckbox = document.getElementById('selectAllProducts');
            const antiForgeryTokenInput = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]');
            const antiForgeryToken = antiForgeryTokenInput ? antiForgeryTokenInput.value : '';

            const productModalEl = document.getElementById('productModal');
            const productModal = new bootstrap.Modal(productModalEl);
            const productModalBody = productModalEl ? productModalEl.querySelector('.modal-body') : null;
            const productForm = document.getElementById('productForm');
            const productModalTitle = document.getElementById('productModalLabel');
            const productFormErrors = document.getElementById('productFormErrors');
            const deleteModalEl = document.getElementById('deleteModal');
            const deleteModal = new bootstrap.Modal(deleteModalEl);
            const deleteConfirmBtn = document.getElementById('confirmDeleteBtn');
            const deleteProductName = document.getElementById('deleteProductName');

            const bulkDeleteModalEl = document.getElementById('bulkDeleteModal');
            const bulkDeleteModal = bulkDeleteModalEl ? new bootstrap.Modal(bulkDeleteModalEl) : null;
            const confirmBulkDeleteBtn = document.getElementById('confirmBulkDeleteBtn');
            const bulkDeleteCount = document.getElementById('bulkDeleteCount');

            const detailModalEl = document.getElementById('productDetailModal');
            const detailModal = new bootstrap.Modal(detailModalEl);
            const detailBody = document.getElementById('productDetailBody');
            const detailUrlTemplate = app.dataset.detailUrlTemplate || '';

            const nameInput = document.getElementById('productName');
            const descriptionInput = document.getElementById('productDescription');
            const imageInput = document.getElementById('productImageUrl');
            const imageFileInput = document.getElementById('productImageFile');
            const imagePreviewWrapper = document.getElementById('productImagePreviewWrapper');
            const imagePreview = document.getElementById('productImagePreview');
            const imagePlaceholder = document.getElementById('productImagePlaceholder');
            const imageUploadingIndicator = document.getElementById('productImageUploading');
            const imageFeedback = document.getElementById('productImageUploadFeedback');
            const defaultImageFeedback = imageFeedback ? imageFeedback.textContent.trim() : '';
            const IMAGE_UPLOAD_URL = '/api/uploads/images';
            const MAX_IMAGE_SIZE = 5 * 1024 * 1024;
            let isUploadingImage = false;
            let temporaryImageObjectUrl = null;
            const categorySelect = document.getElementById('productCategory');
            const submitButton = document.getElementById('productSubmitBtn');
            const productPublishCheckbox = document.getElementById('productIsPublish');
            const productPublishHelp = document.getElementById('productPublishHelp');
            const defaultProductPublishHelp = productPublishHelp ? productPublishHelp.textContent.trim() : '';
            const productTypesContainer = document.getElementById('productTypesContainer');
            const addProductTypeBtn = document.getElementById('addProductTypeBtn');
            const clearProductTypesBtn = document.getElementById('clearProductTypesBtn');
            const importProductTypesBtn = document.getElementById('importProductTypesBtn');
            const productTypesImportInput = document.getElementById('productTypesImportInput');
            const downloadProductTypesTemplateLink = document.getElementById('downloadProductTypesTemplateLink');
            const importProductTypesBtnInitialHtml = importProductTypesBtn ? importProductTypesBtn.innerHTML : '';

            let editingProductId = null;
            let deleteProductId = null;
            let cachedCategories = [];
            let allProducts = [];
            let filteredProducts = [];
            const selectedProductIds = new Set();

            const currencyFormatter = new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' });
            const DISCOUNT_NONE = @( (int)DiscountType.None );
            const DISCOUNT_PERCENT = @( (int)DiscountType.Percent );
            const DISCOUNT_FIXED = @( (int)DiscountType.FixedAmount );
            const DISCOUNT_AMOUNT = @( (int)DiscountType.Amount );

            const discountLabelMap = {
                [DISCOUNT_NONE]: 'Không áp dụng',
                [DISCOUNT_PERCENT]: 'Giảm theo %',
                [DISCOUNT_FIXED]: 'Giảm giá cố định',
                [DISCOUNT_AMOUNT]: 'Giảm theo tiền'
            };

            const debounce = (fn, delay = 300) => {
                let timeoutId;
                return (...args) => {
                    if (timeoutId) {
                        clearTimeout(timeoutId);
                    }

                    timeoutId = window.setTimeout(() => {
                        fn(...args);
                    }, delay);
                };
            };

            function updateProductTableStatus(count) {
                if (!tableStatus || !canView) {
                    return;
                }

                const total = allProducts.length;
                if (total === 0) {
                    tableStatus.textContent = 'Không có sản phẩm nào để hiển thị.';
                    return;
                }

                if (count === total) {
                    tableStatus.textContent = `Đang hiển thị ${count} sản phẩm.`;
                } else {
                    tableStatus.textContent = `Tìm thấy ${count}/${total} sản phẩm.`;
                }
            }

            function applyProductFilters() {
                if (!Array.isArray(allProducts)) {
                    filteredProducts = [];
                } else {
                    const searchTerm = (searchInput?.value || '').trim().toLowerCase();
                    const categoryFilterValue = categoryFilterSelect?.value || '';
                    const statusFilterValue = statusFilterSelect?.value || '';

                    filteredProducts = allProducts.filter(product => {
                        const name = (product.name || '').toString().toLowerCase();
                        const description = (product.description || '').toString().toLowerCase();
                        const categoryName = (product.categoryName || '').toString().toLowerCase();

                        const matchesSearch = !searchTerm
                            || name.includes(searchTerm)
                            || description.includes(searchTerm)
                            || categoryName.includes(searchTerm);

                        const matchesCategory = !categoryFilterValue
                            || String(product.categoryId ?? '') === categoryFilterValue;

                        const matchesStatus = !statusFilterValue
                            || (statusFilterValue === 'published' && product.isPublish)
                            || (statusFilterValue === 'draft' && !product.isPublish);

                        return matchesSearch && matchesCategory && matchesStatus;
                    });
                }

                renderProducts(filteredProducts);
            }

            function showAlert(message, type = 'success') {
                if (!alertPlaceholder) {
                    return;
                }

                const wrapper = document.createElement('div');
                wrapper.className = `alert alert-${type} alert-dismissible fade show`;
                wrapper.role = 'alert';
                wrapper.innerHTML = `
                    <div>${message}</div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`;
                alertPlaceholder.appendChild(wrapper);

                setTimeout(() => {
                    wrapper.classList.remove('show');
                    wrapper.classList.add('fade');
                    setTimeout(() => wrapper.remove(), 150);
                }, 5000);
            }

            function setTableLoading(message = 'Đang tải dữ liệu...') {
                const safeMessage = escapeHtml(message);
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="${columnCount}" class="text-center py-4 text-muted">${safeMessage}</td>
                    </tr>`;
            }

            function setTableStatus(message) {
                if (tableStatus) {
                    tableStatus.textContent = message;
                }
            }

            function escapeHtml(value) {
                if (value === null || value === undefined) {
                    return '';
                }
                return value
                    .toString()
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;');
            }

            function formatDateTime(value) {
                if (!value) {
                    return '—';
                }

                const date = new Date(value);
                if (Number.isNaN(date.getTime())) {
                    return value;
                }

                return date.toLocaleString('vi-VN');
            }

            function formatBoolean(value) {
                return value ? 'Có' : 'Không';
            }

            function calculateTypeFinalPrice(type) {
                if (!type) {
                    return 0;
                }

                const basePrice = Number(type.price ?? 0);
                const discountType = Number(type.discountType ?? DISCOUNT_NONE);
                const discountValue = type.discount !== null && type.discount !== undefined
                    ? Number(type.discount)
                    : null;

                let finalPrice = basePrice;
                if (discountType === DISCOUNT_PERCENT && discountValue !== null) {
                    finalPrice = basePrice - (basePrice * discountValue / 100);
                } else if (discountType === DISCOUNT_FIXED && discountValue !== null) {
                    finalPrice = discountValue;
                } else if (discountType === DISCOUNT_AMOUNT && discountValue !== null) {
                    finalPrice = basePrice - discountValue;
                }

                if (!Number.isFinite(finalPrice) || finalPrice < 0) {
                    return 0;
                }

                return Math.round(finalPrice * 100) / 100;
            }

            function getDisplayedProductTypes(product) {
                const types = Array.isArray(product?.productTypes) ? product.productTypes : [];
                const published = types.filter(type => type?.isPublish);
                return published.length > 0 ? published : types;
            }

            function formatPriceRangeFromTypes(types) {
                const finalPrices = types
                    .map(type => calculateTypeFinalPrice(type))
                    .filter(price => Number.isFinite(price) && price >= 0);

                if (finalPrices.length === 0) {
                    return '';
                }

                const minPrice = Math.min(...finalPrices);
                const maxPrice = Math.max(...finalPrices);

                if (Math.abs(minPrice - maxPrice) < 0.01) {
                    return currencyFormatter.format(minPrice);
                }

                return `${currencyFormatter.format(minPrice)} - ${currencyFormatter.format(maxPrice)}`;
            }

            function buildTypePriceHtml(type) {
                const basePrice = Number(type?.price ?? 0);
                const discountType = Number(type?.discountType ?? DISCOUNT_NONE);
                const discountValue = type?.discount !== null && type?.discount !== undefined
                    ? Number(type.discount)
                    : null;
                const finalPrice = calculateTypeFinalPrice(type);

                if (discountType === DISCOUNT_PERCENT && discountValue !== null) {
                    return `
                        <div class="d-flex flex-column">
                            <del class="text-muted small">${currencyFormatter.format(basePrice)}</del>
                            <span class="fw-semibold text-danger">${currencyFormatter.format(finalPrice)}</span>
                            <span class="small text-muted">Giảm ${Number(discountValue).toLocaleString('vi-VN')}%</span>
                        </div>`;
                }

                if (discountType === DISCOUNT_FIXED && discountValue !== null) {
                    return `
                        <div class="d-flex flex-column">
                            <del class="text-muted small">${currencyFormatter.format(basePrice)}</del>
                            <span class="fw-semibold text-danger">${currencyFormatter.format(finalPrice)}</span>
                            <span class="small text-muted">Giá ưu đãi</span>
                        </div>`;
                }

                if (discountType === DISCOUNT_AMOUNT && discountValue !== null) {
                    return `
                        <div class="d-flex flex-column">
                            <del class="text-muted small">${currencyFormatter.format(basePrice)}</del>
                            <span class="fw-semibold text-danger">${currencyFormatter.format(finalPrice)}</span>
                            <span class="small text-muted">Giảm ${currencyFormatter.format(discountValue)}</span>
                        </div>`;
                }

                return `<span class="fw-semibold">${currencyFormatter.format(finalPrice)}</span>`;
            }

            function normalizeDiscountType(value) {
                if (typeof value === 'number' && Number.isFinite(value)) {
                    return value;
                }

                if (typeof value === 'string') {
                    const trimmed = value.trim();
                    if (trimmed.length === 0) {
                        return DISCOUNT_NONE;
                    }

                    if (Number.isFinite(Number(trimmed))) {
                        return Number(trimmed);
                    }

                    switch (trimmed.toLowerCase()) {
                        case 'percent':
                            return DISCOUNT_PERCENT;
                        case 'fixed':
                        case 'fixedamount':
                        case 'fixed_amount':
                            return DISCOUNT_FIXED;
                        case 'amount':
                            return DISCOUNT_AMOUNT;
                        case 'none':
                            return DISCOUNT_NONE;
                    }
                }

                return DISCOUNT_NONE;
            }

            let productTypeCounter = 0;

            function updateProductTypeDiscountState(item) {
                if (!item) {
                    return;
                }

                const discountSelect = item.querySelector('.product-type-discount-type');
                const discountWrapper = item.querySelector('.product-type-discount-wrapper');
                const discountInput = item.querySelector('.product-type-discount');
                const discountLabelEl = item.querySelector('.product-type-discount-label');

                const discountType = Number(discountSelect?.value ?? DISCOUNT_NONE);
                const isNone = discountType === DISCOUNT_NONE;

                if (discountWrapper) {
                    discountWrapper.style.display = isNone ? 'none' : '';
                }

                if (discountInput) {
                    discountInput.disabled = isNone;
                    if (isNone) {
                        discountInput.value = '';
                    }
                    discountInput.setAttribute('min', '0');
                    discountInput.setAttribute('step', '1');
                    if (discountType === DISCOUNT_PERCENT) {
                        discountInput.setAttribute('max', '100');
                    } else {
                        discountInput.removeAttribute('max');
                    }
                }

                if (!discountLabelEl) {
                    return;
                }

                if (discountType === DISCOUNT_PERCENT) {
                    discountLabelEl.textContent = 'Giá trị giảm (%)';
                } else if (discountType === DISCOUNT_FIXED) {
                    discountLabelEl.textContent = 'Giá bán ưu đãi (VND)';
                } else if (discountType === DISCOUNT_AMOUNT) {
                    discountLabelEl.textContent = 'Giá trị giảm (VND)';
                } else {
                    discountLabelEl.textContent = 'Giá trị giảm';
                }
            }

            function updateProductTypesEmptyState() {
                if (!productTypesContainer) {
                    return;
                }

                let placeholder = productTypesContainer.querySelector('.product-types-empty');
                const hasItems = productTypesContainer.querySelectorAll('.product-type-item').length > 0;

                if (!hasItems) {
                    if (!placeholder) {
                        placeholder = document.createElement('div');
                        placeholder.className = 'product-types-empty border rounded py-4 px-3 text-center text-muted';
                        placeholder.innerHTML = '<div>Chưa có loại sản phẩm nào. Vui lòng thêm mới hoặc nhập từ file.</div>';
                        productTypesContainer.appendChild(placeholder);
                    }
                } else if (placeholder) {
                    placeholder.remove();
                }
                updateProductPublishAvailability();
            }

            function updateProductTypeHeaderState(item) {
                if (!item) {
                    return;
                }

                const index = Number(item.dataset.index ?? '');
                const defaultTitle = Number.isFinite(index) && index > 0
                    ? `Loại sản phẩm #${index}`
                    : 'Loại sản phẩm';

                const nameInputEl = item.querySelector('.product-type-name');
                const priceInputEl = item.querySelector('.product-type-price');
                const stockInputEl = item.querySelector('.product-type-stock');
                const discountSelectEl = item.querySelector('.product-type-discount-type');
                const discountInputEl = item.querySelector('.product-type-discount');
                const publishCheckboxEl = item.querySelector('.product-type-is-publish');
                const spicyCheckboxEl = item.querySelector('.product-type-is-spicy');
                const vegetarianCheckboxEl = item.querySelector('.product-type-is-vegetarian');

                const titleEl = item.querySelector('.product-type-title');
                const summaryEl = item.querySelector('.product-type-summary');
                const publishBadgeEl = item.querySelector('.product-type-publish-badge');
                const spicyFlagEl = item.querySelector('.product-type-flag-spicy');
                const vegetarianFlagEl = item.querySelector('.product-type-flag-vegetarian');

                const nameValue = nameInputEl?.value?.trim() || '';
                if (titleEl) {
                    titleEl.textContent = nameValue || defaultTitle;
                }

                const priceRaw = priceInputEl?.value;
                const priceValue = priceRaw === undefined || priceRaw === null || priceRaw === ''
                    ? null
                    : Number(priceRaw);
                const stockRaw = stockInputEl?.value;
                const stockValue = stockRaw === undefined || stockRaw === null || stockRaw === ''
                    ? null
                    : Number(stockRaw);

                const priceText = priceValue !== null && Number.isFinite(priceValue) && priceValue >= 0
                    ? currencyFormatter.format(priceValue)
                    : 'Chưa có giá';

                const stockText = stockValue !== null && Number.isFinite(stockValue) && stockValue >= 0
                    ? `${Math.round(stockValue).toLocaleString('vi-VN')} tồn kho`
                    : 'Tồn kho chưa rõ';

                const discountTypeValue = Number(discountSelectEl?.value ?? DISCOUNT_NONE);
                const discountRaw = discountInputEl?.value;
                const discountValue = discountRaw === undefined || discountRaw === null || discountRaw === ''
                    ? null
                    : Number(discountRaw);

                let discountText = '';
                if (discountTypeValue !== DISCOUNT_NONE
                    && discountValue !== null
                    && Number.isFinite(discountValue)
                    && discountValue >= 0) {
                    if (discountTypeValue === DISCOUNT_PERCENT) {
                        discountText = ` · Giảm ${discountValue.toLocaleString('vi-VN')}%`;
                    } else if (discountTypeValue === DISCOUNT_FIXED) {
                        discountText = ` · Giá ưu đãi ${currencyFormatter.format(discountValue)}`;
                    } else if (discountTypeValue === DISCOUNT_AMOUNT) {
                        discountText = ` · Giảm ${currencyFormatter.format(discountValue)}`;
                    }
                }

                if (summaryEl) {
                    summaryEl.textContent = `${priceText} · ${stockText}${discountText}`;
                }

                const isPublishChecked = publishCheckboxEl?.checked ?? true;
                if (publishBadgeEl) {
                    publishBadgeEl.textContent = isPublishChecked ? 'Xuất bản' : 'Đang ẩn';
                    publishBadgeEl.className = isPublishChecked
                        ? 'badge rounded-pill product-type-publish-badge bg-success-subtle border border-success text-success'
                        : 'badge rounded-pill product-type-publish-badge bg-secondary-subtle border border-secondary text-secondary';
                }

                const isSpicyChecked = spicyCheckboxEl?.checked ?? false;
                if (spicyFlagEl) {
                    spicyFlagEl.classList.toggle('d-none', !isSpicyChecked);
                }

                const isVegetarianChecked = vegetarianCheckboxEl?.checked ?? false;
                if (vegetarianFlagEl) {
                    vegetarianFlagEl.classList.toggle('d-none', !isVegetarianChecked);
                }
            }

            function setupProductTypeImageUpload(item, initialUrl = '') {
                if (!item) {
                    return () => { };
                }

                const fileInput = item.querySelector('.product-type-image-file');
                const urlInput = item.querySelector('.product-type-image-url');
                const previewWrapper = item.querySelector('.product-type-image-preview-wrapper');
                const previewImage = item.querySelector('.product-type-image-preview');
                const placeholder = item.querySelector('.product-type-image-placeholder');
                const uploadingIndicator = item.querySelector('.product-type-image-uploading');
                const feedbackEl = item.querySelector('.product-type-image-feedback');

                let temporaryUrl = null;
                const defaultFeedback = feedbackEl ? feedbackEl.textContent.trim() : 'Chọn ảnh định dạng JPG, PNG, GIF hoặc WEBP (tối đa 5MB).';

                const setFeedback = (message, state = 'muted') => {
                    if (!feedbackEl) {
                        return;
                    }

                    feedbackEl.textContent = message;
                    feedbackEl.classList.remove('text-danger', 'text-success', 'text-muted');

                    if (state === 'error') {
                        feedbackEl.classList.add('text-danger');
                    } else if (state === 'success') {
                        feedbackEl.classList.add('text-success');
                    } else {
                        feedbackEl.classList.add('text-muted');
                    }
                };

                const showPlaceholder = () => {
                    if (previewImage) {
                        previewImage.src = '';
                        previewImage.classList.add('d-none');
                    }

                    if (placeholder) {
                        placeholder.classList.remove('d-none');
                    }
                };

                const showImage = (url) => {
                    if (previewImage) {
                        previewImage.src = url;
                        previewImage.classList.remove('d-none');
                    }

                    if (placeholder) {
                        placeholder.classList.add('d-none');
                    }
                };

                const setLoading = (isLoading) => {
                    if (uploadingIndicator) {
                        uploadingIndicator.classList.toggle('d-none', !isLoading);
                    }

                    if (previewWrapper) {
                        previewWrapper.classList.toggle('uploading', isLoading);
                    }
                };

                const revokeTemporaryUrl = () => {
                    if (temporaryUrl) {
                        URL.revokeObjectURL(temporaryUrl);
                        temporaryUrl = null;
                    }
                };

                const applyImageUrl = (url) => {
                    if (urlInput) {
                        urlInput.value = url || '';
                    }

                    if (url) {
                        showImage(url);
                        setFeedback('Ảnh hiện tại sẽ được giữ nguyên nếu bạn không tải ảnh mới.', 'muted');
                    } else {
                        showPlaceholder();
                        setFeedback(defaultFeedback, 'muted');
                    }
                };

                applyImageUrl(initialUrl);

                const handleChange = async (event) => {
                    const file = event?.target?.files ? event.target.files[0] : null;

                    if (!file) {
                        applyImageUrl(urlInput?.value || '');
                        return;
                    }

                    const validationMessage = validateProductImageFile(file);
                    if (validationMessage) {
                        setFeedback(validationMessage, 'error');

                        if (fileInput) {
                            fileInput.value = '';
                        }

                        applyImageUrl(urlInput?.value || '');
                        return;
                    }

                    revokeTemporaryUrl();
                    temporaryUrl = URL.createObjectURL(file);
                    showImage(temporaryUrl);
                    setFeedback('Đang tải ảnh lên...', 'muted');
                    setLoading(true);

                    const formData = new FormData();
                    formData.append('file', file);

                    try {
                        const response = await fetch(IMAGE_UPLOAD_URL, {
                            method: 'POST',
                            headers: {
                                ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                            },
                            body: formData
                        });

                        if (!response.ok) {
                            const errorResponse = await response.json().catch(() => null);
                            const message = errorResponse?.message || 'Không thể tải ảnh lên. Vui lòng thử lại sau.';
                            throw new Error(message);
                        }

                        const result = await response.json();
                        if (!result || !result.url) {
                            throw new Error('Máy chủ không trả về đường dẫn ảnh.');
                        }

                        applyImageUrl(result.url);
                        setFeedback('Tải ảnh thành công.', 'success');
                    } catch (error) {
                        const previousUrl = urlInput?.value || '';
                        applyImageUrl(previousUrl);
                        setFeedback(error.message || 'Không thể tải ảnh lên. Vui lòng thử lại sau.', 'error');
                    } finally {
                        revokeTemporaryUrl();
                        setLoading(false);
                        if (fileInput) {
                            fileInput.value = '';
                        }
                    }
                };

                if (fileInput) {
                    fileInput.addEventListener('change', handleChange);
                }

                return () => {
                    if (fileInput) {
                        fileInput.removeEventListener('change', handleChange);
                    }
                    revokeTemporaryUrl();
                };
            }

            function createProductTypeItem(initialData = {}) {
                productTypeCounter += 1;
                const index = productTypeCounter;

                const item = document.createElement('div');
                item.className = 'accordion-item product-type-item position-relative';
                item.dataset.index = index.toString();

                const typeId = initialData.id ?? '';
                const nameId = `productTypeName_${index}`;
                const imageFileId = `productTypeImageFile_${index}`;
                const imageHiddenId = `productTypeImage_${index}`;
                const imagePreviewId = `productTypeImagePreview_${index}`;
                const priceId = `productTypePrice_${index}`;
                const stockId = `productTypeStock_${index}`;
                const discountTypeId = `productTypeDiscountType_${index}`;
                const discountId = `productTypeDiscount_${index}`;
                const prepId = `productTypePreparation_${index}`;
                const caloriesId = `productTypeCalories_${index}`;
                const ingredientsId = `productTypeIngredients_${index}`;
                const publishId = `productTypePublish_${index}`;
                const spicyId = `productTypeSpicy_${index}`;
                const vegetarianId = `productTypeVegetarian_${index}`;
                const collapseId = `productTypeCollapse_${index}`;
                const headerId = `productTypeHeading_${index}`;

                const hasExistingId = initialData.id !== undefined && initialData.id !== null && initialData.id !== '';
                const initialName = initialData.name ?? '';
                const initialPublish = initialData.isPublish !== undefined ? Boolean(initialData.isPublish) : true;
                const initialSpicy = Boolean(initialData.isSpicy);
                const initialVegetarian = Boolean(initialData.isVegetarian);

                const publishBadgeClass = initialPublish
                    ? 'badge rounded-pill product-type-publish-badge bg-success-subtle border border-success text-success'
                    : 'badge rounded-pill product-type-publish-badge bg-secondary-subtle border border-secondary text-secondary';
                const publishBadgeText = initialPublish ? 'Xuất bản' : 'Đang ẩn';
                const defaultTitle = initialName ? escapeHtml(initialName) : `Loại sản phẩm #${index}`;

                item.dataset.isExisting = hasExistingId ? 'true' : 'false';

                item.innerHTML = `
                    <button type="button" class="btn-close product-type-remove position-absolute top-0 end-0 mt-2 me-2" aria-label="Xóa loại sản phẩm"></button>
                    <h2 class="accordion-header" id="${headerId}">
                        <button class="accordion-button ${hasExistingId ? 'collapsed' : ''}" type="button" data-bs-toggle="collapse" data-bs-target="#${collapseId}" aria-expanded="${hasExistingId ? 'false' : 'true'}" aria-controls="${collapseId}">
                            <div class="w-100">
                                <div class="d-flex justify-content-between align-items-center gap-2">
                                    <span class="product-type-title fw-semibold">${defaultTitle}</span>
                                    <span class="${publishBadgeClass}">${publishBadgeText}</span>
                                </div>
                                <div class="d-flex flex-wrap align-items-center gap-2 mt-1">
                                    <span class="small text-muted product-type-summary">Nhấn để xem chi tiết</span>
                                    <span class="badge bg-warning-subtle text-warning product-type-flag product-type-flag-spicy ${initialSpicy ? '' : 'd-none'}">Cay</span>
                                    <span class="badge bg-primary-subtle text-primary product-type-flag product-type-flag-vegetarian ${initialVegetarian ? '' : 'd-none'}">Đồ chay</span>
                                </div>
                            </div>
                        </button>
                    </h2>
                    <div id="${collapseId}" class="accordion-collapse collapse ${hasExistingId ? '' : 'show'}" aria-labelledby="${headerId}">
                        <div class="accordion-body">
                            <input type="hidden" class="product-type-id" value="${escapeHtml(typeId)}" />
                            <input type="hidden" class="product-type-image-url" id="${imageHiddenId}" />
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label for="${nameId}" class="form-label">Tên loại sản phẩm<span class="text-danger">*</span></label>
                                    <input type="text" class="form-control product-type-name" id="${nameId}" maxlength="200" required />
                                </div>
                                <div class="col-md-6">
                                    <label for="${imageFileId}" class="form-label">Ảnh loại</label>
                                    <input type="file" class="form-control product-type-image-file" id="${imageFileId}" accept="image/*" />
                                    <div class="image-upload-preview mt-2 product-type-image-preview-wrapper">
                                        <img src="" alt="Xem trước ảnh loại sản phẩm" class="product-type-image-preview d-none" id="${imagePreviewId}" />
                                        <div class="image-upload-placeholder product-type-image-placeholder">
                                            <i class="fas fa-image fa-lg"></i>
                                            <div>Chưa chọn ảnh</div>
                                        </div>
                                        <div class="image-upload-spinner d-none product-type-image-uploading">
                                            <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
                                        </div>
                                    </div>
                                    <div class="form-text text-muted product-type-image-feedback">Chọn ảnh định dạng JPG, PNG, GIF hoặc WEBP (tối đa 5MB).</div>
                                </div>
                                <div class="col-sm-6 col-md-4">
                                    <label for="${priceId}" class="form-label">Giá bán (VND)<span class="text-danger">*</span></label>
                                    <input type="number" class="form-control product-type-price" id="${priceId}" min="0" step="0.01" required />
                                </div>
                                <div class="col-sm-6 col-md-4">
                                    <label for="${stockId}" class="form-label">Tồn kho<span class="text-danger">*</span></label>
                                    <input type="number" class="form-control product-type-stock" id="${stockId}" min="0" step="1" required />
                                </div>
                                <div class="col-sm-6 col-md-4">
                                    <label for="${discountTypeId}" class="form-label">Loại giảm giá</label>
                                    <select class="form-select product-type-discount-type" id="${discountTypeId}">
                                        <option value="${DISCOUNT_NONE}">Không áp dụng</option>
                                        <option value="${DISCOUNT_PERCENT}">Giảm theo %</option>
                                        <option value="${DISCOUNT_FIXED}">Giảm giá cố định</option>
                                        <option value="${DISCOUNT_AMOUNT}">Giảm theo tiền</option>
                                    </select>
                                </div>
                                <div class="col-sm-6 col-md-4 product-type-discount-wrapper">
                                    <label for="${discountId}" class="form-label product-type-discount-label">Giá trị giảm</label>
                                    <input type="number" class="form-control product-type-discount" id="${discountId}" min="0" step="1" />
                                </div>
                                <div class="col-sm-6 col-md-4">
                                    <label for="${prepId}" class="form-label">Thời gian chuẩn bị (phút)</label>
                                    <input type="number" class="form-control product-type-preparation-time" id="${prepId}" min="0" step="1" />
                                </div>
                                <div class="col-sm-6 col-md-4">
                                    <label for="${caloriesId}" class="form-label">Calories</label>
                                    <input type="number" class="form-control product-type-calories" id="${caloriesId}" min="0" step="1" />
                                </div>
                                <div class="col-12">
                                    <label for="${ingredientsId}" class="form-label">Thành phần<span class="text-danger">*</span></label>
                                    <textarea class="form-control product-type-ingredients" id="${ingredientsId}" rows="2" maxlength="2000" required></textarea>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check form-switch mt-2">
                                        <input class="form-check-input product-type-is-publish" type="checkbox" id="${publishId}" />
                                        <label class="form-check-label" for="${publishId}">Xuất bản</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check form-switch mt-2">
                                        <input class="form-check-input product-type-is-spicy" type="checkbox" id="${spicyId}" />
                                        <label class="form-check-label" for="${spicyId}">Món cay</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check form-switch mt-2">
                                        <input class="form-check-input product-type-is-vegetarian" type="checkbox" id="${vegetarianId}" />
                                        <label class="form-check-label" for="${vegetarianId}">Đồ chay</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>`;

                const nameInputEl = item.querySelector('.product-type-name');
                const imageInputEl = item.querySelector('.product-type-image-url');
                const priceInputEl = item.querySelector('.product-type-price');
                const stockInputEl = item.querySelector('.product-type-stock');
                const discountSelect = item.querySelector('.product-type-discount-type');
                const discountInputEl = item.querySelector('.product-type-discount');
                const prepInputEl = item.querySelector('.product-type-preparation-time');
                const caloriesInputEl = item.querySelector('.product-type-calories');
                const ingredientsInputEl = item.querySelector('.product-type-ingredients');
                const publishCheckboxEl = item.querySelector('.product-type-is-publish');
                const spicyCheckboxEl = item.querySelector('.product-type-is-spicy');
                const vegetarianCheckboxEl = item.querySelector('.product-type-is-vegetarian');
                const cleanupFunctions = [];

                if (nameInputEl) {
                    nameInputEl.value = initialData.name ?? '';
                }
                if (imageInputEl) {
                    imageInputEl.value = initialData.productTypeImageUrl ?? '';
                }
                if (priceInputEl) {
                    priceInputEl.value = initialData.price ?? '';
                }
                if (stockInputEl) {
                    stockInputEl.value = initialData.stock ?? '';
                }
                if (discountSelect) {
                    const normalizedDiscountType = normalizeDiscountType(initialData.discountType);
                    discountSelect.value = normalizedDiscountType;
                }
                if (discountInputEl) {
                    discountInputEl.value = initialData.discount ?? '';
                }
                if (prepInputEl) {
                    prepInputEl.value = initialData.preparationTime ?? '';
                }
                if (caloriesInputEl) {
                    caloriesInputEl.value = initialData.calories ?? '';
                }
                if (ingredientsInputEl) {
                    ingredientsInputEl.value = initialData.ingredients ?? '';
                }
                if (publishCheckboxEl) {
                    publishCheckboxEl.checked = initialPublish;
                }
                if (spicyCheckboxEl) {
                    spicyCheckboxEl.checked = initialSpicy;
                }
                if (vegetarianCheckboxEl) {
                    vegetarianCheckboxEl.checked = initialVegetarian;
                }

                const removeButton = item.querySelector('.product-type-remove');
                if (removeButton) {
                    removeButton.addEventListener('click', () => {
                        cleanupFunctions.forEach(fn => fn());
                        item.remove();
                        updateProductTypesEmptyState();
                    });
                }

                if (discountSelect) {
                    discountSelect.addEventListener('change', () => {
                        updateProductTypeDiscountState(item);
                        updateProductTypeHeaderState(item);
                    });
                }

                if (nameInputEl) {
                    nameInputEl.addEventListener('input', () => updateProductTypeHeaderState(item));
                }
                if (priceInputEl) {
                    priceInputEl.addEventListener('input', () => updateProductTypeHeaderState(item));
                }
                if (stockInputEl) {
                    stockInputEl.addEventListener('input', () => updateProductTypeHeaderState(item));
                }
                if (discountInputEl) {
                    discountInputEl.addEventListener('input', () => updateProductTypeHeaderState(item));
                }
                if (publishCheckboxEl) {
                    publishCheckboxEl.addEventListener('change', () => updateProductTypeHeaderState(item));
                }
                if (spicyCheckboxEl) {
                    spicyCheckboxEl.addEventListener('change', () => updateProductTypeHeaderState(item));
                }
                if (vegetarianCheckboxEl) {
                    vegetarianCheckboxEl.addEventListener('change', () => updateProductTypeHeaderState(item));
                }

                updateProductTypeDiscountState(item);
                updateProductTypeHeaderState(item);
                updateProductPublishAvailability();

                const cleanupImageUpload = setupProductTypeImageUpload(item, initialData.productTypeImageUrl ?? '');
                if (typeof cleanupImageUpload === 'function') {
                    cleanupFunctions.push(cleanupImageUpload);
                }

                return item;
            }

            function addProductType(initialData = {}) {
                if (!productTypesContainer) {
                    return;
                }

                const item = createProductTypeItem(initialData);
                productTypesContainer.appendChild(item);
                updateProductTypesEmptyState();

                if (item && item.dataset.isExisting !== 'true') {
                    const collapseElement = item.querySelector('.accordion-collapse');
                    if (collapseElement) {
                        const collapseInstance = bootstrap.Collapse.getOrCreateInstance(collapseElement, { toggle: false });
                        collapseInstance.show();
                    }
                }
                updateProductPublishAvailability();
            }

            function getProductTypeItems() {
                if (!productTypesContainer) {
                    return [];
                }

                return Array.from(productTypesContainer.querySelectorAll('.product-type-item'));
            }

            function updateProductPublishAvailability() {
                if (!productPublishCheckbox) {
                    return;
                }

                const items = getProductTypeItems();
                const hasItems = items.length > 0;
                const publishedCount = items.filter(item => item.querySelector('.product-type-is-publish')?.checked).length;
                const canPublish = publishedCount > 0;

                productPublishCheckbox.disabled = !canPublish;
                if (!canPublish) {
                    productPublishCheckbox.checked = false;
                }

                if (productPublishHelp) {
                    if (!hasItems) {
                        productPublishHelp.textContent = 'Vui lòng thêm ít nhất một loại sản phẩm trước khi công khai.';
                    } else if (!canPublish) {
                        productPublishHelp.textContent = 'Cần có ít nhất một loại sản phẩm được công khai.';
                    } else {
                        productPublishHelp.textContent = defaultProductPublishHelp || 'Bật để công khai sản phẩm trên cửa hàng.';
                    }
                }
            }

            function collectProductTypes() {
                const items = getProductTypeItems();
                const types = [];
                const errors = [];

                items.forEach((item, index) => {
                    const idValue = item.querySelector('.product-type-id')?.value || '';
                    const nameValue = item.querySelector('.product-type-name')?.value?.trim() || '';
                    const imageValue = item.querySelector('.product-type-image-url')?.value?.trim() || '';

                    const priceRaw = item.querySelector('.product-type-price')?.value;
                    const parsedPrice = Number(priceRaw);
                    const priceValue = Number.isFinite(parsedPrice) && parsedPrice >= 0 ? parsedPrice : 0;

                    const stockRaw = item.querySelector('.product-type-stock')?.value;
                    const parsedStock = Number(stockRaw);
                    const stockValue = Number.isFinite(parsedStock) && parsedStock >= 0 ? Math.round(parsedStock) : 0;

                    const discountTypeValue = Number(item.querySelector('.product-type-discount-type')?.value ?? DISCOUNT_NONE);
                    const discountRaw = item.querySelector('.product-type-discount')?.value;

                    const prepRaw = item.querySelector('.product-type-preparation-time')?.value;
                    const parsedPrep = Number(prepRaw);
                    const prepValue = Number.isFinite(parsedPrep) && parsedPrep >= 0 ? Math.round(parsedPrep) : 0;

                    const caloriesRaw = item.querySelector('.product-type-calories')?.value;
                    const parsedCalories = Number(caloriesRaw);
                    const caloriesValue = Number.isFinite(parsedCalories) && parsedCalories >= 0 ? Math.round(parsedCalories) : 0;

                    const ingredientsValue = item.querySelector('.product-type-ingredients')?.value?.trim() || '';
                    const isPublishValue = item.querySelector('.product-type-is-publish')?.checked ?? true;
                    const isSpicyValue = item.querySelector('.product-type-is-spicy')?.checked ?? false;
                    const isVegetarianValue = item.querySelector('.product-type-is-vegetarian')?.checked ?? false;

                    if (!nameValue) {
                        errors.push(`Loại sản phẩm #${index + 1} cần có tên.`);
                    }

                    if (!Number.isFinite(parsedPrice) || parsedPrice < 0) {
                        errors.push(`Giá bán của loại sản phẩm #${index + 1} không hợp lệ.`);
                    }

                    if (!Number.isFinite(parsedStock) || parsedStock < 0) {
                        errors.push(`Tồn kho của loại sản phẩm #${index + 1} không hợp lệ.`);
                    }

                    if (!ingredientsValue) {
                        errors.push(`Loại sản phẩm #${index + 1} cần nhập thành phần.`);
                    }

                    let discountValue = null;
                    if (discountTypeValue !== DISCOUNT_NONE && discountRaw !== undefined && discountRaw !== null && discountRaw !== '') {
                        const parsedDiscount = Number(discountRaw);
                        if (!Number.isFinite(parsedDiscount) || parsedDiscount < 0) {
                            errors.push(`Giá trị giảm của loại sản phẩm #${index + 1} không hợp lệ.`);
                        } else {
                            discountValue = parsedDiscount;
                        }
                    }

                    types.push({
                        id: idValue ? Number(idValue) : null,
                        name: nameValue,
                        productTypeImageUrl: imageValue || null,
                        price: priceValue,
                        stock: stockValue,
                        discountType: Number.isFinite(discountTypeValue) ? discountTypeValue : DISCOUNT_NONE,
                        discount: discountValue,
                        preparationTime: prepValue,
                        calories: caloriesValue,
                        ingredients: ingredientsValue,
                        isPublish: Boolean(isPublishValue),
                        isSpicy: Boolean(isSpicyValue),
                        isVegetarian: Boolean(isVegetarianValue)
                    });
                });

                return { types, errors };
            }

            function setProductTypes(types) {
                if (!productTypesContainer) {
                    return;
                }

                productTypesContainer.innerHTML = '';
                productTypeCounter = 0;

                if (!Array.isArray(types) || types.length === 0) {
                    addProductType({ isPublish: true });
                    updateProductPublishAvailability();
                    return;
                }

                types.forEach(type => {
                    addProductType({
                        id: type.id,
                        name: type.name,
                        productTypeImageUrl: type.productTypeImageUrl,
                        price: Number(type.price ?? 0),
                        stock: Number(type.stock ?? 0),
                        discountType: normalizeDiscountType(type.discountType),
                        discount: type.discount !== null && type.discount !== undefined ? Number(type.discount) : null,
                        preparationTime: Number(type.preparationTime ?? 0),
                        calories: Number(type.calories ?? 0),
                        ingredients: type.ingredients ?? '',
                        isPublish: type.isPublish !== false,
                        isSpicy: Boolean(type.isSpicy),
                        isVegetarian: Boolean(type.isVegetarian)
                    });
                });
                updateProductPublishAvailability();
            }

            async function importProductTypesFromFile(file) {
                if (!file) {
                    return null;
                }

                const extension = file.name.split('.').pop()?.toLowerCase();
                if (extension !== 'xlsx') {
                    showAlert('Vui lòng chọn file Excel (.xlsx) để nhập loại sản phẩm.', 'warning');
                    return null;
                }

                const formData = new FormData();
                formData.append('file', file);

                try {
                    const response = await fetch('/api/products/types/import', {
                        method: 'POST',
                        headers: {
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: formData
                    });

                    if (response.status === 400) {
                        const result = await response.json().catch(() => null);
                        const message = result?.message || 'File không hợp lệ. Vui lòng kiểm tra và thử lại.';
                        showAlert(message, 'warning');
                        return null;
                    }

                    if (response.status === 403) {
                        showAlert('Bạn không có quyền nhập loại sản phẩm.', 'warning');
                        return null;
                    }

                    if (!response.ok) {
                        throw new Error('Failed to import');
                    }

                    const result = await response.json().catch(() => null);
                    return {
                        productTypes: Array.isArray(result?.productTypes) ? result.productTypes : [],
                        warnings: Array.isArray(result?.warnings) ? result.warnings : []
                    };
                } catch (error) {
                    throw error;
                }
            }

            function setProductImageFeedback(message, state = 'muted') {
                if (!imageFeedback) {
                    return;
                }

                imageFeedback.textContent = message;
                imageFeedback.classList.remove('text-danger', 'text-success', 'text-muted');

                if (state === 'error') {
                    imageFeedback.classList.add('text-danger');
                } else if (state === 'success') {
                    imageFeedback.classList.add('text-success');
                } else {
                    imageFeedback.classList.add('text-muted');
                }
            }

            function showProductImagePlaceholder() {
                if (imagePreview) {
                    imagePreview.src = '';
                    imagePreview.classList.add('d-none');
                }

                if (imagePlaceholder) {
                    imagePlaceholder.classList.remove('d-none');
                }
            }

            function showProductImage(url) {
                if (!imagePreview) {
                    return;
                }

                imagePreview.src = url;
                imagePreview.classList.remove('d-none');

                if (imagePlaceholder) {
                    imagePlaceholder.classList.add('d-none');
                }
            }

            function setProductImageLoading(isLoading) {
                isUploadingImage = isLoading;

                if (imageUploadingIndicator) {
                    imageUploadingIndicator.classList.toggle('d-none', !isLoading);
                }

                if (imagePreviewWrapper) {
                    imagePreviewWrapper.classList.toggle('uploading', isLoading);
                }
            }

            function revokeTemporaryImageUrl() {
                if (temporaryImageObjectUrl) {
                    URL.revokeObjectURL(temporaryImageObjectUrl);
                    temporaryImageObjectUrl = null;
                }
            }

            function resetProductImageState() {
                revokeTemporaryImageUrl();

                if (imageFileInput) {
                    imageFileInput.value = '';
                }

                if (imageInput) {
                    imageInput.value = '';
                }

                showProductImagePlaceholder();
                setProductImageLoading(false);

                const message = defaultImageFeedback || 'Chọn ảnh định dạng JPG, PNG, GIF hoặc WEBP (tối đa 5MB).';
                setProductImageFeedback(message, 'muted');
            }

            function setProductImageFromUrl(url) {
                revokeTemporaryImageUrl();

                if (imageFileInput) {
                    imageFileInput.value = '';
                }

                if (url) {
                    showProductImage(url);
                    setProductImageFeedback('Ảnh hiện tại sẽ được giữ nguyên nếu bạn không tải ảnh mới.', 'muted');
                } else {
                    showProductImagePlaceholder();
                    const message = defaultImageFeedback || 'Chọn ảnh định dạng JPG, PNG, GIF hoặc WEBP (tối đa 5MB).';
                    setProductImageFeedback(message, 'muted');
                }
            }

            function validateProductImageFile(file) {
                if (!file) {
                    return 'Vui lòng chọn một file ảnh hợp lệ.';
                }

                if (file.size > MAX_IMAGE_SIZE) {
                    return 'Ảnh vượt quá dung lượng cho phép (tối đa 5MB).';
                }

                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
                const allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
                const fileType = (file.type || '').toLowerCase();
                const dotIndex = file.name.lastIndexOf('.');
                const extension = dotIndex >= 0 ? file.name.substring(dotIndex).toLowerCase() : '';
                const isTypeValid = allowedTypes.includes(fileType);
                const isExtensionValid = allowedExtensions.includes(extension);

                if (!isTypeValid && !isExtensionValid) {
                    return 'Vui lòng chọn file ảnh định dạng JPG, PNG, GIF hoặc WEBP.';
                }

                return '';
            }

            async function handleProductImageFileChange(event) {
                const file = event?.target?.files ? event.target.files[0] : null;

                if (!file) {
                    if (imageInput && imageInput.value) {
                        setProductImageFromUrl(imageInput.value);
                    } else {
                        resetProductImageState();
                    }

                    return;
                }

                const validationMessage = validateProductImageFile(file);
                if (validationMessage) {
                    setProductImageFeedback(validationMessage, 'error');

                    if (imageFileInput) {
                        imageFileInput.value = '';
                    }

                    if (imageInput && imageInput.value) {
                        setProductImageFromUrl(imageInput.value);
                    } else {
                        showProductImagePlaceholder();
                    }

                    return;
                }

                revokeTemporaryImageUrl();
                temporaryImageObjectUrl = URL.createObjectURL(file);
                showProductImage(temporaryImageObjectUrl);
                setProductImageFeedback('Đang tải ảnh lên...', 'muted');
                setProductImageLoading(true);

                const previousUrl = imageInput ? imageInput.value : '';

                const formData = new FormData();
                formData.append('file', file);

                try {
                    const response = await fetch(IMAGE_UPLOAD_URL, {
                        method: 'POST',
                        headers: {
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: formData
                    });

                    if (!response.ok) {
                        const errorResponse = await response.json().catch(() => null);
                        const message = errorResponse?.message || 'Không thể tải ảnh lên. Vui lòng thử lại sau.';
                        throw new Error(message);
                    }

                    const result = await response.json();
                    if (!result || !result.url) {
                        throw new Error('Máy chủ không trả về đường dẫn ảnh.');
                    }

                    if (imageInput) {
                        imageInput.value = result.url;
                    }

                    revokeTemporaryImageUrl();
                    showProductImage(result.url);
                    setProductImageFeedback('Ảnh đã được tải lên thành công.', 'success');
                } catch (error) {
                    revokeTemporaryImageUrl();

                    if (imageInput) {
                        imageInput.value = previousUrl;
                    }

                    if (previousUrl) {
                        showProductImage(previousUrl);
                    } else {
                        showProductImagePlaceholder();
                    }

                    const message = error instanceof Error
                        ? error.message
                        : 'Không thể tải ảnh lên. Vui lòng thử lại sau.';
                    setProductImageFeedback(message, 'error');
                } finally {
                    setProductImageLoading(false);

                    if (imageFileInput) {
                        imageFileInput.value = '';
                    }
                }
            }

            function populateCategories() {
                if (!categorySelect) {
                    return;
                }

                const previousValue = categorySelect.value;
                const previousFilterValue = categoryFilterSelect ? categoryFilterSelect.value : '';
                categorySelect.innerHTML = '<option value="">-- Chọn danh mục --</option>';
                if (categoryFilterSelect) {
                    categoryFilterSelect.innerHTML = '<option value="">Tất cả danh mục</option>';
                }
                cachedCategories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.textContent = category.name;
                    categorySelect.appendChild(option);
                    if (categoryFilterSelect) {
                        const filterOption = option.cloneNode(true);
                        categoryFilterSelect.appendChild(filterOption);
                    }
                });

                if (previousValue) {
                    categorySelect.value = previousValue;
                }
                if (categoryFilterSelect && previousFilterValue) {
                    categoryFilterSelect.value = previousFilterValue;
                }
            }

            function ensureCategoryOption(categoryId, categoryName) {
                if (!categoryId || !categorySelect) {
                    return;
                }

                const exists = cachedCategories.some(cat => Number(cat.id) === Number(categoryId));
                if (!exists && categoryName) {
                    cachedCategories.push({ id: categoryId, name: categoryName });
                    cachedCategories.sort((a, b) => a.name.localeCompare(b.name));
                    populateCategories();
                }
            }

            function renderProducts(products) {
                tableBody.innerHTML = '';

                const list = Array.isArray(products) ? products : [];

                if (list.length === 0) {
                    const message = allProducts.length === 0
                        ? 'Chưa có sản phẩm nào.'
                        : 'Không tìm thấy sản phẩm phù hợp.';
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="${columnCount}" class="text-center py-4 text-muted">${message}</td>
                        </tr>`;
                    updateProductTableStatus(0);
                    if (selectAllCheckbox) {
                        selectAllCheckbox.checked = false;
                        selectAllCheckbox.indeterminate = false;
                    }
                    if (canBulkManage && bulkActions) {
                        bulkActions.classList.add('d-none');
                    }
                    return;
                }

                updateProductTableStatus(list.length);

                if (canBulkManage) {
                    const visibleIds = new Set(list.map(product => product.id));
                    Array.from(selectedProductIds).forEach(id => {
                        if (!visibleIds.has(id)) {
                            selectedProductIds.delete(id);
                        }
                    });
                }

                list.forEach(product => {
                    const tr = document.createElement('tr');

                    if (canBulkManage) {
                        const selectCell = document.createElement('td');
                        selectCell.className = 'text-center';
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.className = 'form-check-input product-select';
                        checkbox.dataset.id = product.id;
                        checkbox.checked = selectedProductIds.has(product.id);
                        checkbox.addEventListener('change', () => {
                            const id = Number(checkbox.dataset.id);
                            if (checkbox.checked) {
                                selectedProductIds.add(id);
                            } else {
                                selectedProductIds.delete(id);
                            }
                            syncSelectAllState();
                            updateBulkActionsVisibility();
                        });
                        selectCell.appendChild(checkbox);
                        tr.appendChild(selectCell);
                    }

                    const imageCell = document.createElement('td');
                    imageCell.className = 'text-center';
                    if (product.productImageUrl) {
                        const img = document.createElement('img');
                        img.src = product.productImageUrl;
                        img.alt = product.name ?? '';
                        img.className = 'rounded';
                        img.style.width = '48px';
                        img.style.height = '48px';
                        img.style.objectFit = 'cover';
                        imageCell.appendChild(img);
                    } else {
                        const placeholder = document.createElement('div');
                        placeholder.className = 'bg-light border rounded d-inline-flex align-items-center justify-content-center text-muted';
                        placeholder.style.width = '48px';
                        placeholder.style.height = '48px';
                        placeholder.innerHTML = '<i class="fas fa-image"></i>';
                        imageCell.appendChild(placeholder);
                    }
                    tr.appendChild(imageCell);

                    const nameCell = document.createElement('td');
                    const nameWrapper = document.createElement('div');
                    nameWrapper.className = 'fw-semibold';
                    if (product.isPublish && detailUrlTemplate) {
                        const detailUrl = detailUrlTemplate.replace('__ID__', encodeURIComponent(product.id));
                        const link = document.createElement('a');
                        link.href = detailUrl;
                        link.target = '_blank';
                        link.rel = 'noopener noreferrer';
                        link.textContent = product.name ?? '';
                        link.className = 'text-decoration-none link-primary';
                        nameWrapper.appendChild(link);
                    } else {
                        nameWrapper.textContent = product.name ?? '';
                    }
                    nameCell.appendChild(nameWrapper);
                    const descriptionWrapper = document.createElement('div');
                    descriptionWrapper.className = 'text-muted small';
                    descriptionWrapper.textContent = product.description ?? '';
                    nameCell.appendChild(descriptionWrapper);
                    tr.appendChild(nameCell);

                    const priceCell = document.createElement('td');
                    const displayedTypes = getDisplayedProductTypes(product);
                    let priceRangeText = formatPriceRangeFromTypes(displayedTypes);
                    if (!priceRangeText) {
                        if (displayedTypes.length > 0) {
                            priceRangeText = currencyFormatter.format(calculateTypeFinalPrice(displayedTypes[0]));
                        } else {
                            priceRangeText = currencyFormatter.format(Number(product.price ?? 0));
                        }
                    }

                    const hasDiscount = displayedTypes.some(type => {
                        const discountType = Number(type?.discountType ?? DISCOUNT_NONE);
                        const discountValue = type?.discount !== null && type?.discount !== undefined
                            ? Number(type.discount)
                            : null;
                        return discountType !== DISCOUNT_NONE && discountValue !== null && discountValue > 0;
                    });

                    priceCell.innerHTML = `<span class="fw-semibold">${escapeHtml(priceRangeText)}</span>`;
                    if (hasDiscount) {
                        priceCell.innerHTML += '<div class="small text-danger">Có khuyến mãi</div>';
                    }
                    tr.appendChild(priceCell);

                    const stockCell = document.createElement('td');
                    const stockValue = Number.isFinite(Number(product.totalStock))
                        ? Number(product.totalStock)
                        : Number(product.stock ?? 0);
                    stockCell.textContent = stockValue.toLocaleString('vi-VN');
                    tr.appendChild(stockCell);

                    const categoryCell = document.createElement('td');
                    categoryCell.textContent = product.categoryName ? product.categoryName : '—';
                    tr.appendChild(categoryCell);

                    const statusCell = document.createElement('td');
                    statusCell.innerHTML = product.isPublish
                        ? '<span class="badge bg-success-subtle border border-success text-success px-3 py-2">Đã xuất bản</span>'
                        : '<span class="badge bg-secondary-subtle border border-secondary text-secondary px-3 py-2">Bản nháp</span>';
                    tr.appendChild(statusCell);

                    const actionsCell = document.createElement('td');
                    actionsCell.classList.add('text-center');
                    const actionsWrapper = document.createElement('div');
                    actionsWrapper.className = 'd-flex justify-content-center gap-2';

                    if (canView) {
                        const viewButton = document.createElement('button');
                        viewButton.type = 'button';
                        viewButton.className = 'btn btn-sm btn-outline-info';
                        viewButton.dataset.action = 'detail';
                        viewButton.dataset.id = product.id;
                        viewButton.innerHTML = '<i class="fas fa-eye"></i>';
                        actionsWrapper.appendChild(viewButton);
                    }

                    if (canUpdate) {
                        const editButton = document.createElement('button');
                        editButton.type = 'button';
                        editButton.className = 'btn btn-sm btn-outline-primary';
                        editButton.dataset.action = 'edit';
                        editButton.dataset.id = product.id;
                        editButton.innerHTML = '<i class="fas fa-edit"></i>';
                        actionsWrapper.appendChild(editButton);
                    }

                    if (canDelete) {
                        const deleteButton = document.createElement('button');
                        deleteButton.type = 'button';
                        deleteButton.className = 'btn btn-sm btn-outline-danger';
                        deleteButton.dataset.action = 'delete';
                        deleteButton.dataset.id = product.id;
                        deleteButton.dataset.name = product.name ?? '';
                        deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
                        actionsWrapper.appendChild(deleteButton);
                    }

                    if (actionsWrapper.children.length === 0) {
                        actionsWrapper.innerHTML = '<span class="text-muted small">—</span>';
                    }

                    actionsCell.appendChild(actionsWrapper);
                    tr.appendChild(actionsCell);

                    tableBody.appendChild(tr);
                });

                syncSelectAllState();
                updateBulkActionsVisibility();
            }

            function syncSelectAllState() {
                if (!selectAllCheckbox) {
                    return;
                }

                const visibleCheckboxes = tableBody.querySelectorAll('.product-select');
                const total = visibleCheckboxes.length;
                const checked = tableBody.querySelectorAll('.product-select:checked').length;
                selectAllCheckbox.checked = total > 0 && checked === total;
                selectAllCheckbox.indeterminate = checked > 0 && checked < total;
            }

            function updateBulkActionsVisibility() {
                if (!canBulkManage || !bulkActions) {
                    return;
                }

                if (selectedProductIds.size > 0) {
                    bulkActions.classList.remove('d-none');
                } else {
                    bulkActions.classList.add('d-none');
                }
            }

            function handleSelectAllChange() {
                if (!canBulkManage || !selectAllCheckbox) {
                    return;
                }

                const checked = selectAllCheckbox.checked;
                tableBody.querySelectorAll('.product-select').forEach(checkbox => {
                    checkbox.checked = checked;
                    const id = Number(checkbox.dataset.id);
                    if (checked) {
                        selectedProductIds.add(id);
                    } else {
                        selectedProductIds.delete(id);
                    }
                });

                syncSelectAllState();
                updateBulkActionsVisibility();
            }

            async function loadCategories(showError = true) {
                try {
                    const response = await fetch(`${API_BASE_URL}/categories`);
                    if (!response.ok) {
                        if (response.status === 403) {
                            if (showError) {
                                showAlert('Bạn không có quyền truy cập danh mục sản phẩm.', 'warning');
                            }
                            cachedCategories = [];
                        } else {
                            throw new Error('Failed to load categories');
                        }
                    } else {
                        cachedCategories = await response.json();
                    }
                } catch (error) {
                    if (showError) {
                        showAlert('Không thể tải danh mục sản phẩm. Vui lòng thử lại sau.', 'danger');
                    }
                    cachedCategories = [];
                }

                populateCategories();
            }

            async function loadProducts() {
                if (!canView) {
                    setTableStatus('Bạn không có quyền xem danh sách sản phẩm.');
                    setTableLoading('Bạn không có quyền xem danh sách sản phẩm.');
                    allProducts = [];
                    filteredProducts = [];
                    if (canBulkManage) {
                        selectedProductIds.clear();
                        updateBulkActionsVisibility();
                        syncSelectAllState();
                    }
                    return;
                }

                setTableLoading();
                try {
                    const response = await fetch(API_BASE_URL);
                    if (!response.ok) {
                        if (response.status === 403) {
                            setTableStatus('Bạn không có quyền xem danh sách sản phẩm.');
                            setTableLoading('Bạn không có quyền xem danh sách sản phẩm.');
                            allProducts = [];
                            filteredProducts = [];
                            if (canBulkManage) {
                                selectedProductIds.clear();
                                updateBulkActionsVisibility();
                                syncSelectAllState();
                            }
                            return;
                        }
                        throw new Error('Failed to load products');
                    }

                    const products = await response.json();
                    allProducts = Array.isArray(products) ? products : [];
                    if (canBulkManage) {
                        const validIds = new Set(allProducts.map(product => product.id));
                        Array.from(selectedProductIds).forEach(id => {
                            if (!validIds.has(id)) {
                                selectedProductIds.delete(id);
                            }
                        });
                    }
                    applyProductFilters();
                } catch (error) {
                    setTableStatus('Không thể tải danh sách sản phẩm.');
                    setTableLoading('Có lỗi xảy ra khi tải dữ liệu.');
                    allProducts = [];
                    filteredProducts = [];
                    showAlert('Không thể tải danh sách sản phẩm. Vui lòng thử lại sau.', 'danger');
                    if (canBulkManage) {
                        selectedProductIds.clear();
                        updateBulkActionsVisibility();
                        syncSelectAllState();
                    }
                }
            }

            async function bulkDeleteSelectedProducts(ids = Array.from(selectedProductIds)) {
                if (!canDelete || !Array.isArray(ids) || ids.length === 0) {
                    return;
                }

                try {
                    const response = await fetch(`${API_BASE_URL}/bulk-delete`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: JSON.stringify({ ids })
                    });

                    if (response.status === 400) {
                        const result = await response.json().catch(() => null);
                        const message = result?.message || 'Không thể xóa các sản phẩm đã chọn.';
                        showAlert(message, 'warning');
                        return;
                    }

                    if (response.status === 403) {
                        showAlert('Bạn không có quyền xóa các sản phẩm đã chọn.', 'warning');
                        return;
                    }

                    if (!response.ok) {
                        throw new Error('Failed to bulk delete products');
                    }

                    const result = await response.json().catch(() => ({}));
                    const deleted = Number(result.deleted || 0);
                    const unauthorized = Number(result.unauthorized || 0);
                    const blocked = Number(result.blocked || 0);
                    const blockedProducts = Array.isArray(result.blockedProducts) ? result.blockedProducts : [];

                    if (deleted > 0) {
                        showAlert(`Đã xóa ${deleted} sản phẩm.`, 'success');
                    }
                    if (unauthorized > 0) {
                        showAlert(`${unauthorized} sản phẩm không đủ quyền xóa.`, 'warning');
                    }
                    if (blocked > 0) {
                        const blockedNames = blockedProducts
                            .slice(0, 2)
                            .map(item => escapeHtml(item?.productName || 'sản phẩm'));
                        let blockedMessage;
                        if (blocked === 1) {
                            blockedMessage = `Không thể xóa ${blockedNames[0]} vì sản phẩm đang thuộc combo khác.`;
                        } else {
                            const suffix = blocked > 2 ? ` và ${blocked - 2} sản phẩm khác` : '';
                            blockedMessage = `Không thể xóa ${blockedNames.join(' và ')}${suffix} vì các sản phẩm này đang thuộc combo khác.`;
                        }
                        showAlert(blockedMessage, 'warning');
                    }
                    if (deleted === 0 && unauthorized === 0 && blocked === 0) {
                        showAlert('Không có sản phẩm nào được xóa.', 'info');
                    }

                    selectedProductIds.clear();
                    if (selectAllCheckbox) {
                        selectAllCheckbox.checked = false;
                        selectAllCheckbox.indeterminate = false;
                    }
                    updateBulkActionsVisibility();
                    await loadProducts();
                } catch (error) {
                    showAlert('Không thể xóa sản phẩm đã chọn. Vui lòng thử lại sau.', 'danger');
                }
            }

            async function bulkUpdatePublishState(isPublish, ids = Array.from(selectedProductIds)) {
                if (!canUpdate || !canBulkManage || !Array.isArray(ids) || ids.length === 0) {
                    return;
                }

                try {
                    const response = await fetch(`${API_BASE_URL}/bulk-publish`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: JSON.stringify({
                            ids,
                            isPublish
                        })
                    });

                    if (response.status === 403) {
                        showAlert('Bạn không có quyền cập nhật trạng thái công khai.', 'warning');
                        return;
                    }

                    if (!response.ok) {
                        throw new Error('Failed to bulk update publish status');
                    }

                    const result = await response.json().catch(() => ({}));
                    const updated = Number(result.updated || 0);
                    const unauthorized = Number(result.unauthorized || 0);

                    if (updated > 0) {
                        const actionLabel = isPublish ? 'xuất bản' : 'ẩn';
                        showAlert(`Đã ${actionLabel} ${updated} sản phẩm.`, 'success');
                    }

                    if (unauthorized > 0) {
                        showAlert(`${unauthorized} sản phẩm không đủ quyền cập nhật.`, 'warning');
                    }

                    if (updated === 0 && unauthorized === 0) {
                        showAlert('Không có sản phẩm nào được cập nhật.', 'info');
                    }

                    selectedProductIds.clear();
                    if (selectAllCheckbox) {
                        selectAllCheckbox.checked = false;
                        selectAllCheckbox.indeterminate = false;
                    }
                    updateBulkActionsVisibility();
                    await loadProducts();
                } catch (error) {
                    showAlert('Không thể cập nhật trạng thái công khai. Vui lòng thử lại sau.', 'danger');
                }
            }

            async function openDetailModal(productId) {
                if (!detailBody) {
                    return;
                }

                detailBody.innerHTML = `
                    <div class="py-4 text-center text-muted">
                        <div class="spinner-border text-primary" role="status"></div>
                    </div>`;
                detailModal.show();

                try {
                    const response = await fetch(`${API_BASE_URL}/${productId}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        if (response.status === 404) {
                            detailBody.innerHTML = '<div class="alert alert-warning mb-0">Sản phẩm không tồn tại hoặc đã bị xóa.</div>';
                        } else if (response.status === 403) {
                            detailBody.innerHTML = '<div class="alert alert-warning mb-0">Bạn không có quyền xem sản phẩm này.</div>';
                        } else {
                            throw new Error('Failed to load product detail');
                        }
                        return;
                    }

                    const product = await response.json();
                    const imageUrl = escapeHtml(product.productImageUrl || '/images/no-image.jpg');
                    const productName = escapeHtml(product.name ?? 'Sản phẩm');
                    const categoryName = escapeHtml(product.categoryName ?? 'Không có danh mục');
                    const statusBadge = product.isPublish
                        ? '<span class="badge bg-success">Đã xuất bản</span>'
                        : '<span class="badge bg-secondary">Bản nháp</span>';

                    const displayedTypes = getDisplayedProductTypes(product);
                    let priceSummary = formatPriceRangeFromTypes(displayedTypes);
                    if (!priceSummary) {
                        if (displayedTypes.length > 0) {
                            priceSummary = currencyFormatter.format(calculateTypeFinalPrice(displayedTypes[0]));
                        } else {
                            priceSummary = currencyFormatter.format(Number(product.price ?? 0));
                        }
                    }

                    const hasDiscount = displayedTypes.some(type => {
                        const discountType = Number(type?.discountType ?? DISCOUNT_NONE);
                        const discountValue = type?.discount !== null && type?.discount !== undefined
                            ? Number(type.discount)
                            : null;
                        return discountType !== DISCOUNT_NONE && discountValue !== null && discountValue > 0;
                    });

                    const totalStock = Number.isFinite(Number(product.totalStock))
                        ? Number(product.totalStock)
                        : Number(product.stock ?? 0);
                    const totalSold = Number.isFinite(Number(product.totalSold))
                        ? Number(product.totalSold)
                        : Number(product.sold ?? 0);
                    const minPreparation = Number.isFinite(Number(product.minPreparationTime))
                        ? Number(product.minPreparationTime)
                        : Number(product.preparationTime ?? 0);
                    const minCalories = Number.isFinite(Number(product.minCalories))
                        ? Number(product.minCalories)
                        : Number(product.calories ?? 0);

                    const combinedIngredients = Array.from(new Set((Array.isArray(product.productTypes) ? product.productTypes : [])
                        .map(type => (type.ingredients || '').trim())
                        .filter(Boolean))).join(', ');

                    const ingredientsText = combinedIngredients
                        ? escapeHtml(combinedIngredients)
                        : escapeHtml(product.ingredients ?? '—');

                    const allTypes = Array.isArray(product.productTypes) ? product.productTypes : [];
                    const typeCards = allTypes.length > 0
                        ? allTypes.map(type => {
                            const typeName = escapeHtml(type.name ?? 'Loại sản phẩm');
                            const typeImageUrl = type.productTypeImageUrl ? escapeHtml(type.productTypeImageUrl) : '';
                            const typePriceHtml = buildTypePriceHtml(type);
                            const typeStock = Number(type.stock ?? 0).toLocaleString('vi-VN');
                            const typeSold = Number(type.sold ?? 0).toLocaleString('vi-VN');
                            const typePreparation = Number(type.preparationTime ?? 0).toLocaleString('vi-VN');
                            const typeCalories = Number(type.calories ?? 0).toLocaleString('vi-VN');
                            const typeIngredients = escapeHtml(type.ingredients ?? '—');

                            const badges = [];
                            badges.push(type.isPublish
                                ? '<span class="badge bg-success me-1">Xuất bản</span>'
                                : '<span class="badge bg-secondary me-1">Đang ẩn</span>');
                            if (type.isSpicy) {
                                badges.push('<span class="badge bg-warning text-dark me-1">Cay</span>');
                            }
                            if (type.isVegetarian) {
                                badges.push('<span class="badge bg-primary me-1">Đồ chay</span>');
                            }

                            const badgesHtml = badges.join('');
                            const imageSection = typeImageUrl
                                ? `<img src="${typeImageUrl}" alt="${typeName}" class="rounded" style="width: 64px; height: 64px; object-fit: cover;" />`
                                : `<div class="bg-light border rounded d-flex align-items-center justify-content-center" style="width: 64px; height: 64px;"><i class="fas fa-image text-muted"></i></div>`;

                            return `
                                <div class="border rounded p-3">
                                    <div class="d-flex gap-3 align-items-start">
                                        ${imageSection}
                                        <div class="flex-grow-1">
                                            <div class="d-flex flex-column flex-lg-row justify-content-between align-items-lg-center gap-2">
                                                <div>
                                                    <h6 class="mb-1">${typeName}</h6>
                                                    <div>${badgesHtml}</div>
                                                </div>
                                                <div class="text-lg-end">${typePriceHtml}</div>
                                            </div>
                                            <div class="row g-2 mt-2 small text-muted">
                                                <div class="col-sm-6 col-lg-3">Tồn kho: <span class="text-dark">${typeStock}</span></div>
                                                <div class="col-sm-6 col-lg-3">Đã bán: <span class="text-dark">${typeSold}</span></div>
                                                <div class="col-sm-6 col-lg-3">Chuẩn bị: <span class="text-dark">${typePreparation} phút</span></div>
                                                <div class="col-sm-6 col-lg-3">Calories: <span class="text-dark">${typeCalories}</span></div>
                                            </div>
                                            <div class="small mt-2">Thành phần: <span class="text-dark">${typeIngredients}</span></div>
                                        </div>
                                    </div>
                                </div>`;
                        }).join('')
                        : '<div class="text-muted">Không có loại sản phẩm nào.</div>';

                    detailBody.innerHTML = `
                        <div class="d-flex align-items-start gap-3">
                            <img src="${imageUrl}" alt="${productName}" class="rounded" style="width: 96px; height: 96px; object-fit: cover;" />
                            <div>
                                <h5 class="mb-1">${productName}</h5>
                                <div class="text-muted mb-2">${categoryName}</div>
                                ${statusBadge}
                            </div>
                        </div>
                        <div class="row g-3 mt-2">
                            <div class="col-md-4">
                                <div class="small text-muted">Giá bán</div>
                                <div class="fw-semibold">${escapeHtml(priceSummary)}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Tồn kho</div>
                                <div>${totalStock.toLocaleString('vi-VN')}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Đã bán</div>
                                <div>${totalSold.toLocaleString('vi-VN')}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Khuyến mãi</div>
                                <div>${hasDiscount ? 'Có khuyến mãi' : 'Không có khuyến mãi'}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Thời gian chuẩn bị nhanh nhất</div>
                                <div>${minPreparation > 0 ? `${minPreparation.toLocaleString('vi-VN')} phút` : '—'}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Calories thấp nhất</div>
                                <div>${minCalories > 0 ? minCalories.toLocaleString('vi-VN') : '—'}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Món cay</div>
                                <div>${formatBoolean(product.isSpicy)}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Đồ chay</div>
                                <div>${formatBoolean(product.isVegetarian)}</div>
                            </div>
                            <div class="col-md-4">
                                <div class="small text-muted">Xuất bản</div>
                                <div>${formatBoolean(product.isPublish)}</div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <h6 class="mb-2">Mô tả</h6>
                            <p class="mb-0">${escapeHtml(product.description ?? '—')}</p>
                        </div>
                        <div class="mt-3">
                            <h6 class="mb-2">Thành phần</h6>
                            <p class="mb-0">${ingredientsText}</p>
                        </div>
                        <div class="mt-3">
                            <h6 class="mb-2">Các loại sản phẩm</h6>
                            <div class="d-flex flex-column gap-3">${typeCards}</div>
                        </div>
                        <div class="mt-3 row g-3">
                            <div class="col-md-6">
                                <div class="small text-muted">Ngày tạo</div>
                                <div>${formatDateTime(product.createdAt)}</div>
                            </div>
                            <div class="col-md-6">
                                <div class="small text-muted">Cập nhật lần cuối</div>
                                <div>${product.updatedAt ? formatDateTime(product.updatedAt) : '—'}</div>
                            </div>
                        </div>`;
                } catch (error) {
                    detailBody.innerHTML = '<div class="alert alert-danger mb-0">Không thể tải chi tiết sản phẩm.</div>';
                }
            }

            function resetModalScroll() {
                if (productModalBody) {
                    productModalBody.scrollTop = 0;
                }
            }

            function resetForm() {
                if (productForm) {
                    productForm.reset();
                }
                productFormErrors.classList.add('d-none');
                productFormErrors.innerHTML = '';
                editingProductId = null;
                submitButton.disabled = false;
                submitButton.innerHTML = 'Thêm mới';
                resetProductImageState();
                if (productPublishCheckbox) {
                    productPublishCheckbox.checked = false;
                    productPublishCheckbox.disabled = true;
                }
                if (productPublishHelp) {
                    productPublishHelp.textContent = defaultProductPublishHelp || 'Bật để công khai sản phẩm trên cửa hàng.';
                }
                setProductTypes([]);
                resetModalScroll();
            }

            function fillForm(product) {
                nameInput.value = product.name ?? '';
                descriptionInput.value = product.description ?? '';
                imageInput.value = product.productImageUrl ?? '';
                setProductImageFromUrl(imageInput.value);
                categorySelect.value = product.categoryId ?? '';
                const types = Array.isArray(product.productTypes) ? product.productTypes : [];
                setProductTypes(types);
                if (productPublishCheckbox) {
                    productPublishCheckbox.checked = Boolean(product.isPublish);
                    updateProductPublishAvailability();
                }
            }

            function handleValidationErrors(problemDetails) {
                if (!productFormErrors) {
                    return;
                }

                const errors = [];
                if (problemDetails && problemDetails.errors) {
                    Object.values(problemDetails.errors).forEach(messages => {
                        if (Array.isArray(messages)) {
                            messages.forEach(message => errors.push(message));
                        }
                    });
                } else if (problemDetails && problemDetails.title) {
                    errors.push(problemDetails.title);
                }

                if (errors.length === 0) {
                    errors.push('Vui lòng kiểm tra lại thông tin đã nhập.');
                }

                productFormErrors.innerHTML = `<ul class="mb-0">${errors.map(message => `<li>${escapeHtml(message)}</li>`).join('')}</ul>`;
                productFormErrors.classList.remove('d-none');
            }

            async function openCreateModal() {
                await loadCategories(false);
                resetForm();
                productModalTitle.textContent = 'Thêm mới sản phẩm';
                submitButton.innerHTML = 'Thêm mới';
                resetModalScroll();
                productModal.show();
            }

            async function openEditModal(productId) {
                productFormErrors.classList.add('d-none');
                productFormErrors.innerHTML = '';
                submitButton.disabled = false;
                submitButton.innerHTML = 'Lưu thay đổi';
                resetModalScroll();

                try {
                    const response = await fetch(`${API_BASE_URL}/${productId}`);
                    if (!response.ok) {
                        if (response.status === 404) {
                            showAlert('Không tìm thấy sản phẩm.', 'warning');
                        } else if (response.status === 403) {
                            showAlert('Bạn không có quyền chỉnh sửa sản phẩm này.', 'warning');
                        } else {
                            throw new Error('Failed to load product');
                        }
                        return;
                    }

                    const product = await response.json();
                    await loadCategories(false);
                    resetForm();
                    ensureCategoryOption(product.categoryId, product.categoryName);
                    editingProductId = product.id;
                    productModalTitle.textContent = 'Chỉnh sửa sản phẩm';
                    submitButton.innerHTML = 'Lưu thay đổi';
                    fillForm(product);
                    resetModalScroll();
                    productModal.show();
                } catch (error) {
                    showAlert('Không thể tải thông tin sản phẩm. Vui lòng thử lại sau.', 'danger');
                }
            }

            function openDeleteModal(productId, productNameValue) {
                deleteProductId = productId;
                deleteProductName.textContent = productNameValue || '';
                deleteConfirmBtn.disabled = false;
                deleteConfirmBtn.innerHTML = 'Xóa';
                deleteModal.show();
            }

            async function submitProduct(event) {
                event.preventDefault();
                productFormErrors.classList.add('d-none');
                productFormErrors.innerHTML = '';

                if (isUploadingImage) {
                    productFormErrors.innerHTML = '<ul class="mb-0"><li>Ảnh đại diện đang được tải lên. Vui lòng chờ hoàn tất trước khi lưu.</li></ul>';
                    productFormErrors.classList.remove('d-none');
                    return;
                }

                const productImageUrl = imageInput.value.trim();
                if (!productImageUrl) {
                    productFormErrors.innerHTML = '<ul class="mb-0"><li>Vui lòng tải lên ảnh đại diện cho sản phẩm.</li></ul>';
                    productFormErrors.classList.remove('d-none');
                    setProductImageFeedback('Vui lòng tải lên ảnh đại diện cho sản phẩm.', 'error');
                    return;
                }

                const { types: collectedTypes, errors: typeErrors } = collectProductTypes();
                const validationErrors = [...typeErrors];

                if (collectedTypes.length === 0) {
                    validationErrors.push('Vui lòng thêm ít nhất một loại sản phẩm.');
                }

                if (validationErrors.length > 0) {
                    productFormErrors.innerHTML = `<ul class="mb-0">${validationErrors.map(message => `<li>${escapeHtml(message)}</li>`).join('')}</ul>`;
                    productFormErrors.classList.remove('d-none');
                    return;
                }

                const publishedTypes = collectedTypes.filter(type => type.isPublish);
                const requestedPublish = productPublishCheckbox?.checked ?? false;
                const canPublishProduct = publishedTypes.length > 0;
                if (requestedPublish && !canPublishProduct) {
                    productFormErrors.innerHTML = '<ul class="mb-0"><li>Cần có ít nhất một loại sản phẩm được công khai để công khai sản phẩm.</li></ul>';
                    productFormErrors.classList.remove('d-none');
                    return;
                }
                const priceCandidates = publishedTypes.length > 0 ? publishedTypes : collectedTypes;
                let representativeType = priceCandidates.reduce((best, current) => {
                    if (!best) {
                        return current;
                    }
                    return current.price < best.price ? current : best;
                }, null);
                if (!representativeType && collectedTypes.length > 0) {
                    representativeType = collectedTypes[0];
                }

                const minPrice = priceCandidates.reduce((min, type) => Math.min(min, type.price ?? Number.POSITIVE_INFINITY), Number.POSITIVE_INFINITY);
                const highestStock = collectedTypes.reduce((max, type) => Math.max(max, type.stock ?? 0), 0);
                const minPreparationTime = collectedTypes.reduce((min, type) => Math.min(min, type.preparationTime ?? Number.MAX_SAFE_INTEGER), Number.MAX_SAFE_INTEGER);
                const minCalories = collectedTypes.reduce((min, type) => Math.min(min, type.calories ?? Number.MAX_SAFE_INTEGER), Number.MAX_SAFE_INTEGER);
                const combinedIngredients = Array.from(new Set(collectedTypes
                    .map(type => (type.ingredients || '').trim())
                    .filter(Boolean))).join(', ');

                const payload = {
                    name: nameInput.value.trim(),
                    description: descriptionInput.value.trim(),
                    price: Number.isFinite(minPrice) && minPrice !== Number.POSITIVE_INFINITY ? minPrice : 0,
                    stock: highestStock,
                    discountType: representativeType ? representativeType.discountType : DISCOUNT_NONE,
                    discount: representativeType && representativeType.discountType !== DISCOUNT_NONE
                        ? (representativeType.discount ?? null)
                        : null,
                    isPublish: requestedPublish && canPublishProduct,
                    productImageUrl,
                    preparationTime: minPreparationTime === Number.MAX_SAFE_INTEGER ? 0 : minPreparationTime,
                    calories: minCalories === Number.MAX_SAFE_INTEGER ? 0 : minCalories,
                    ingredients: combinedIngredients,
                    isSpicy: collectedTypes.some(type => type.isSpicy),
                    isVegetarian: collectedTypes.some(type => type.isVegetarian),
                    categoryId: Number(categorySelect.value || 0),
                    productTypes: collectedTypes.map(type => ({
                        id: type.id && Number.isFinite(type.id) && type.id > 0 ? type.id : null,
                        name: type.name,
                        productTypeImageUrl: type.productTypeImageUrl,
                        price: type.price,
                        stock: type.stock,
                        discountType: type.discountType,
                        discount: type.discount,
                        preparationTime: type.preparationTime,
                        calories: type.calories,
                        ingredients: type.ingredients,
                        isPublish: type.isPublish,
                        isSpicy: type.isSpicy,
                        isVegetarian: type.isVegetarian
                    }))
                };

                const isEdit = Boolean(editingProductId);
                const url = isEdit ? `${API_BASE_URL}/${editingProductId}` : API_BASE_URL;
                const method = isEdit ? 'PUT' : 'POST';

                submitButton.disabled = true;
                submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Đang xử lý...';

                try {
                    const response = await fetch(url, {
                        method,
                        headers: {
                            'Content-Type': 'application/json',
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        if (response.status === 400) {
                            const problemDetails = await response.json();
                            handleValidationErrors(problemDetails);
                        } else if (response.status === 403) {
                            showAlert('Bạn không có quyền thực hiện thao tác này.', 'warning');
                        } else {
                            const problemDetails = await response.json().catch(() => null);
                            handleValidationErrors(problemDetails);
                        }
                        return;
                    }

                    await loadProducts();
                    productModal.hide();
                    showAlert(isEdit ? 'Đã cập nhật sản phẩm thành công.' : 'Đã thêm sản phẩm mới thành công.');
                } catch (error) {
                    showAlert('Không thể lưu sản phẩm. Vui lòng thử lại sau.', 'danger');
                } finally {
                    submitButton.disabled = false;
                    submitButton.innerHTML = isEdit ? 'Lưu thay đổi' : 'Thêm mới';
                }
            }

            async function confirmDelete() {
                if (!deleteProductId) {
                    return;
                }

                deleteConfirmBtn.disabled = true;
                deleteConfirmBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Đang xóa...';

                try {
                    const response = await fetch(`${API_BASE_URL}/${deleteProductId}`, {
                        method: 'DELETE',
                        headers: {
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        }
                    });

                    if (!response.ok) {
                        if (response.status === 400) {
                            const result = await response.json().catch(() => null);
                            const message = escapeHtml(result?.message || 'Không thể xóa sản phẩm vì đang thuộc combo khác.');
                            showAlert(message, 'warning');
                        } else if (response.status === 403) {
                            showAlert('Bạn không có quyền xóa sản phẩm này.', 'warning');
                        } else if (response.status === 404) {
                            showAlert('Sản phẩm đã bị xóa hoặc không tồn tại.', 'warning');
                        } else {
                            throw new Error('Failed to delete product');
                        }
                        deleteModal.hide();
                        return;
                    }

                    deleteModal.hide();
                    await loadProducts();
                    showAlert('Đã xóa sản phẩm thành công.');
                } catch (error) {
                    showAlert('Không thể xóa sản phẩm. Vui lòng thử lại sau.', 'danger');
                    deleteModal.hide();
                } finally {
                    deleteConfirmBtn.disabled = false;
                    deleteConfirmBtn.innerHTML = 'Xóa';
                    deleteProductId = null;
                }
            }

            tableBody.addEventListener('click', (event) => {
                const target = event.target.closest('button[data-action]');
                if (!target) {
                    return;
                }

                const action = target.dataset.action;
                const productId = Number(target.dataset.id);
                const productName = target.dataset.name || '';

                if (action === 'detail' && canView) {
                    openDetailModal(productId);
                } else if (action === 'edit' && canUpdate) {
                    openEditModal(productId);
                } else if (action === 'delete' && canDelete) {
                    openDeleteModal(productId, productName);
                }
            });

            const debouncedProductFilter = debounce(() => {
                applyProductFilters();
            }, 300);

            if (searchInput) {
                searchInput.addEventListener('input', () => {
                    debouncedProductFilter();
                });
            }

            if (categoryFilterSelect) {
                categoryFilterSelect.addEventListener('change', () => applyProductFilters());
            }

            if (statusFilterSelect) {
                statusFilterSelect.addEventListener('change', () => applyProductFilters());
            }

            if (resetFiltersBtn) {
                resetFiltersBtn.addEventListener('click', () => {
                    if (searchInput) {
                        searchInput.value = '';
                    }
                    if (categoryFilterSelect) {
                        categoryFilterSelect.value = '';
                    }
                    if (statusFilterSelect) {
                        statusFilterSelect.value = '';
                    }
                    applyProductFilters();
                });
            }

            if (productForm) {
                productForm.addEventListener('submit', submitProduct);
            }

            if (imageFileInput) {
                imageFileInput.addEventListener('change', handleProductImageFileChange);
            }

            if (deleteConfirmBtn) {
                deleteConfirmBtn.addEventListener('click', confirmDelete);
            }

            if (createBtn) {
                createBtn.addEventListener('click', () => openCreateModal());
            }

            if (selectAllCheckbox && canBulkManage) {
                selectAllCheckbox.addEventListener('change', handleSelectAllChange);
            }

            if (bulkPublishButtons.length && canUpdate) {
                bulkPublishButtons.forEach(button => {
                    button.addEventListener('click', async (event) => {
                        event.preventDefault();

                        if (selectedProductIds.size === 0) {
                            showAlert('Vui lòng chọn ít nhất một sản phẩm để cập nhật trạng thái.', 'warning');
                            return;
                        }

                        const action = button.dataset.bulkPublish;
                        const publish = action === 'publish';
                        await bulkUpdatePublishState(publish);
                    });
                });
            }

            if (bulkDeleteBtn && canDelete) {
                bulkDeleteBtn.addEventListener('click', () => {
                    if (selectedProductIds.size === 0) {
                        showAlert('Vui lòng chọn ít nhất một sản phẩm để xóa.', 'warning');
                        return;
                    }

                    if (bulkDeleteCount) {
                        bulkDeleteCount.textContent = selectedProductIds.size.toString();
                    }

                    bulkDeleteModal?.show();
                });
            }

            if (confirmBulkDeleteBtn && canDelete) {
                confirmBulkDeleteBtn.addEventListener('click', async () => {
                    if (selectedProductIds.size === 0) {
                        showAlert('Không có sản phẩm nào được chọn.', 'warning');
                        bulkDeleteModal?.hide();
                        return;
                    }

                    bulkDeleteModal?.hide();
                    await bulkDeleteSelectedProducts();
                });
            }

            if (refreshBtn) {
                refreshBtn.addEventListener('click', () => loadProducts());
            }

            if (productModalEl) {
                productModalEl.addEventListener('hidden.bs.modal', () => {
                    resetForm();
                });
            }

            if (addProductTypeBtn) {
                addProductTypeBtn.addEventListener('click', () => {
                    addProductType({ isPublish: true });
                });
            }

            if (clearProductTypesBtn) {
                clearProductTypesBtn.addEventListener('click', () => {
                    setProductTypes([]);
                    showAlert('Đã xóa toàn bộ loại sản phẩm trong biểu mẫu.', 'info');
                });
            }

            if (importProductTypesBtn && productTypesImportInput) {
                importProductTypesBtn.addEventListener('click', () => {
                    productTypesImportInput.click();
                });

                productTypesImportInput.addEventListener('change', async (event) => {
                    const file = event.target?.files ? event.target.files[0] : null;
                    if (!file) {
                        return;
                    }

                    try {
                        if (importProductTypesBtn) {
                            importProductTypesBtn.disabled = true;
                            importProductTypesBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>Đang nhập...';
                        }

                        const importResult = await importProductTypesFromFile(file);
                        if (!importResult) {
                            return;
                        }

                        const importedTypes = Array.isArray(importResult.productTypes) ? importResult.productTypes : [];
                        const warnings = Array.isArray(importResult.warnings) ? importResult.warnings : [];

                        if (importedTypes.length === 0) {
                            setProductTypes([]);
                            const warningMessage = warnings.length
                                ? `File không chứa loại sản phẩm hợp lệ. Bỏ qua ${warnings.length} dòng không hợp lệ.`
                                : 'File không chứa loại sản phẩm hợp lệ.';
                            showAlert(warnings.length ? 'warning' : 'info', warningMessage);
                            return;
                        }

                        setProductTypes(importedTypes.map(type => ({
                            id: type.id,
                            name: type.name,
                            productTypeImageUrl: type.productTypeImageUrl,
                            price: Number(type.price ?? 0),
                            stock: Number(type.stock ?? 0),
                            discountType: normalizeDiscountType(type.discountType),
                            discount: type.discount !== null && type.discount !== undefined ? Number(type.discount) : null,
                            preparationTime: Number(type.preparationTime ?? 0),
                            calories: Number(type.calories ?? 0),
                            ingredients: type.ingredients ?? '',
                            isPublish: type.isPublish !== false,
                            isSpicy: Boolean(type.isSpicy),
                            isVegetarian: Boolean(type.isVegetarian)
                        })));

                        let successMessage = `Đã nhập ${importedTypes.length} loại sản phẩm.`;
                        if (warnings.length) {
                            successMessage += ` Bỏ qua ${warnings.length} dòng không hợp lệ.`;
                        }
                        showAlert('success', successMessage);
                    } catch (error) {
                        showAlert('Không thể nhập loại sản phẩm. Vui lòng thử lại sau.', 'danger');
                    } finally {
                        event.target.value = '';
                        if (importProductTypesBtn) {
                            importProductTypesBtn.disabled = false;
                            importProductTypesBtn.innerHTML = importProductTypesBtnInitialHtml || '<i class="fas fa-file-import me-1"></i>Nhập từ file';
                        }
                    }
                });
            }

            updateBulkActionsVisibility();
            loadCategories(false);
            loadProducts();
        })();
    </script>
}
