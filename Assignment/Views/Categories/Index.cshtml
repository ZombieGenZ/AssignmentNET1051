@{
    ViewData["Title"] = "Quản lý danh mục";
    Layout = "_AdminLayout";

    var canCreate = ViewData["CanCreate"] as bool? ?? false;
    var canUpdate = ViewData["CanUpdate"] as bool? ?? false;
    var canDelete = ViewData["CanDelete"] as bool? ?? false;
    var canView = ViewData["CanView"] as bool? ?? false;
}

<div class="container-fluid pt-4 px-4">
    <div class="card shadow-sm" id="category-app"
         data-can-create="@(canCreate ? "true" : "false")"
         data-can-update="@(canUpdate ? "true" : "false")"
         data-can-delete="@(canDelete ? "true" : "false")"
         data-can-view="@(canView ? "true" : "false")">
        <div class="card-header bg-light">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                <div>
                    <h4 class="mb-1 text-primary">
                        <i class="fas fa-tags me-2"></i>@ViewData["Title"]
                    </h4>
                </div>
                @if (canCreate)
                {
                    <button type="button" class="btn btn-primary" id="createCategoryBtn">
                        <i class="fas fa-plus me-2"></i>Thêm mới danh mục
                    </button>
                }
            </div>
        </div>
        <div class="card-body">
            <div id="alertPlaceholder"></div>
            <div class="d-flex justify-content-between align-items-center flex-column flex-md-row gap-3 mb-3">
                <div class="text-muted small" id="tableStatus">@(canView ? "Đang tải dữ liệu danh mục..." : "Bạn không có quyền xem danh sách danh mục.")</div>
                <div>
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="refreshCategoriesBtn">
                        <i class="fas fa-rotate-right me-1"></i>Tải lại
                    </button>
                </div>
            </div>
            <div class="filter-toolbar mb-4" id="categoryFilters">
                <div class="row g-3 align-items-end">
                    <div class="col-12 col-lg-5">
                        <label class="form-label filter-label" for="categorySearchInput">Tìm kiếm</label>
                        <div class="filter-input-icon">
                            <i class="fas fa-search filter-icon"></i>
                            <input type="search" class="form-control" id="categorySearchInput" placeholder="Tên danh mục" />
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-3">
                        <label class="form-label filter-label" for="categoryUpdateFilter">Trạng thái cập nhật</label>
                        <select id="categoryUpdateFilter" class="form-select">
                            <option value="">Tất cả</option>
                            <option value="updated">Đã cập nhật</option>
                            <option value="never">Chưa cập nhật</option>
                        </select>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-2 ms-lg-auto d-flex align-items-end">
                        <button type="button" class="btn btn-outline-secondary w-100" id="categoryResetFilters">
                            <i class="fas fa-eraser me-1"></i>Xóa lọc
                        </button>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Tên danh mục</th>
                            <th>Thứ tự hiển thị</th>
                            <th style="width: 120px;" class="text-center">Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="categoriesTableBody">
                        <tr>
                            <td colspan="3" class="text-center py-4 text-muted">@(canView ? "Đang tải dữ liệu..." : "Không có dữ liệu để hiển thị.")</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<form id="antiForgeryForm" class="d-none">
    @Html.AntiForgeryToken()
</form>

<div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="categoryModalLabel">Thêm mới danh mục</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="categoryForm" novalidate>
                <div class="modal-body">
                    <div id="categoryFormErrors" class="alert alert-danger d-none" role="alert"></div>
                    <div class="mb-3">
                        <label for="categoryName" class="form-label">Tên danh mục<span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="categoryName" maxlength="100" required />
                    </div>
                    <div class="mb-0">
                        <label for="categoryIndex" class="form-label">Thứ tự hiển thị<span class="text-danger">*</span></label>
                        <input type="number" class="form-control" id="categoryIndex" min="0" step="1" required />
                        <small class="text-muted">Số nhỏ hơn sẽ được ưu tiên hiển thị trước.</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary" id="categorySubmitBtn">Thêm mới</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Xóa danh mục</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Bạn có chắc chắn muốn xóa danh mục <strong id="deleteCategoryName"></strong>? Hành động này không thể hoàn tác.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="categoryDetailModal" tabindex="-1" aria-labelledby="categoryDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="categoryDetailModalLabel">Chi tiết danh mục</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="categoryDetailBody" class="d-flex flex-column gap-3"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const app = document.getElementById('category-app');
            if (!app) {
                return;
            }

            const canCreate = app.dataset.canCreate === 'true';
            const canUpdate = app.dataset.canUpdate === 'true';
            const canDelete = app.dataset.canDelete === 'true';
            const canView = app.dataset.canView === 'true';
            const API_BASE_URL = '/api/categories';

            const tableBody = document.getElementById('categoriesTableBody');
            const tableStatus = document.getElementById('tableStatus');
            const alertPlaceholder = document.getElementById('alertPlaceholder');
            const refreshBtn = document.getElementById('refreshCategoriesBtn');
            const createBtn = document.getElementById('createCategoryBtn');
            const searchInput = document.getElementById('categorySearchInput');
            const updateFilterSelect = document.getElementById('categoryUpdateFilter');
            const resetFiltersBtn = document.getElementById('categoryResetFilters');
            const antiForgeryTokenInput = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]');
            const antiForgeryToken = antiForgeryTokenInput ? antiForgeryTokenInput.value : '';

            const categoryModalEl = document.getElementById('categoryModal');
            const categoryModal = new bootstrap.Modal(categoryModalEl);
            const categoryForm = document.getElementById('categoryForm');
            const categoryModalTitle = document.getElementById('categoryModalLabel');
            const categoryFormErrors = document.getElementById('categoryFormErrors');
            const nameInput = document.getElementById('categoryName');
            const indexInput = document.getElementById('categoryIndex');
            const submitButton = document.getElementById('categorySubmitBtn');

            const deleteModalEl = document.getElementById('deleteModal');
            const deleteModal = new bootstrap.Modal(deleteModalEl);
            const deleteConfirmBtn = document.getElementById('confirmDeleteBtn');
            const deleteCategoryName = document.getElementById('deleteCategoryName');

            const detailModalEl = document.getElementById('categoryDetailModal');
            const detailModal = new bootstrap.Modal(detailModalEl);
            const detailBody = document.getElementById('categoryDetailBody');

            let editingCategoryId = null;
            let deleteCategoryId = null;
            let allCategories = [];
            let filteredCategories = [];

            function escapeHtml(value) {
                if (!value) {
                    return '';
                }
                return value
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;');
            }

            function formatDateTime(value) {
                if (!value) {
                    return '—';
                }

                const date = new Date(value);
                if (Number.isNaN(date.getTime())) {
                    return value;
                }

                return date.toLocaleString('vi-VN');
            }

            function showAlert(message, type = 'success') {
                if (!alertPlaceholder || !message) {
                    return;
                }

                const wrapper = document.createElement('div');
                wrapper.className = `alert alert-${type} alert-dismissible fade show`;
                wrapper.role = 'alert';
                wrapper.innerHTML = `
                    ${escapeHtml(message)}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;

                alertPlaceholder.appendChild(wrapper);
                setTimeout(() => {
                    const alert = bootstrap.Alert.getOrCreateInstance(wrapper);
                    alert.close();
                }, 5000);
            }

            function setTableStatus(message) {
                if (tableStatus) {
                    tableStatus.textContent = message;
                }
            }

            const debounce = (fn, delay = 300) => {
                let timeoutId;
                return (...args) => {
                    if (timeoutId) {
                        clearTimeout(timeoutId);
                    }

                    timeoutId = window.setTimeout(() => {
                        fn(...args);
                    }, delay);
                };
            };

            function updateCategoryTableStatus(count) {
                if (!tableStatus || !canView) {
                    return;
                }

                const total = allCategories.length;
                if (total === 0) {
                    tableStatus.textContent = 'Không có danh mục nào để hiển thị.';
                    return;
                }

                if (count === total) {
                    tableStatus.textContent = `Đang hiển thị ${count} danh mục.`;
                } else {
                    tableStatus.textContent = `Tìm thấy ${count}/${total} danh mục.`;
                }
            }

            function applyCategoryFilters() {
                if (!Array.isArray(allCategories)) {
                    filteredCategories = [];
                } else {
                    const searchTerm = (searchInput?.value || '').trim().toLowerCase();
                    const updateValue = updateFilterSelect?.value || '';

                    filteredCategories = allCategories.filter(category => {
                        const name = (category.name || '').toString().toLowerCase();
                        const matchesSearch = !searchTerm || name.includes(searchTerm);

                        let matchesUpdate = true;
                        if (updateValue === 'updated') {
                            matchesUpdate = Boolean(category.updatedAt);
                        } else if (updateValue === 'never') {
                            matchesUpdate = !category.updatedAt;
                        }

                        return matchesSearch && matchesUpdate;
                    });
                }

                renderCategories(filteredCategories);
            }

            function setTableLoading(message = 'Đang tải dữ liệu...') {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="3" class="text-center py-4 text-muted">${escapeHtml(message)}</td>
                    </tr>`;
            }

            function renderCategories(categories) {
                tableBody.innerHTML = '';

                const list = Array.isArray(categories) ? categories : [];

                if (list.length === 0) {
                    const message = allCategories.length === 0
                        ? 'Không có dữ liệu để hiển thị.'
                        : 'Không tìm thấy danh mục phù hợp.';
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="3" class="text-center py-4 text-muted">${message}</td>
                        </tr>`;
                    updateCategoryTableStatus(list.length);
                    return;
                }

                updateCategoryTableStatus(list.length);

                list.forEach(category => {
                    const tr = document.createElement('tr');

                    const nameCell = document.createElement('td');
                    nameCell.className = 'fw-semibold';
                    nameCell.textContent = category.name ?? '';
                    tr.appendChild(nameCell);

                    const indexCell = document.createElement('td');
                    indexCell.textContent = category.index ?? '';
                    tr.appendChild(indexCell);

                    const actionsCell = document.createElement('td');
                    actionsCell.className = 'text-center';
                    const actionsWrapper = document.createElement('div');
                    actionsWrapper.className = 'd-flex justify-content-center gap-2';

                    if (canView) {
                        const detailButton = document.createElement('button');
                        detailButton.type = 'button';
                        detailButton.className = 'btn btn-sm btn-outline-info';
                        detailButton.dataset.action = 'detail';
                        detailButton.dataset.id = category.id;
                        detailButton.innerHTML = '<i class="fas fa-eye"></i>';
                        actionsWrapper.appendChild(detailButton);
                    }

                    if (canUpdate) {
                        const editButton = document.createElement('button');
                        editButton.type = 'button';
                        editButton.className = 'btn btn-sm btn-outline-warning';
                        editButton.dataset.action = 'edit';
                        editButton.dataset.id = category.id;
                        editButton.innerHTML = '<i class="fas fa-edit"></i>';
                        actionsWrapper.appendChild(editButton);
                    }

                    if (canDelete) {
                        const deleteButton = document.createElement('button');
                        deleteButton.type = 'button';
                        deleteButton.className = 'btn btn-sm btn-outline-danger';
                        deleteButton.dataset.action = 'delete';
                        deleteButton.dataset.id = category.id;
                        deleteButton.dataset.name = category.name ?? '';
                        deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
                        actionsWrapper.appendChild(deleteButton);
                    }

                    if (actionsWrapper.children.length === 0) {
                        actionsWrapper.innerHTML = '<span class="text-muted small">—</span>';
                    }

                    actionsCell.appendChild(actionsWrapper);
                    tr.appendChild(actionsCell);

                    tableBody.appendChild(tr);
                });
            }

            async function loadCategories(showError = true) {
                if (!canView) {
                    setTableStatus('Bạn không có quyền xem danh sách danh mục.');
                    setTableLoading('Không có dữ liệu để hiển thị.');
                    allCategories = [];
                    filteredCategories = [];
                    return;
                }

                setTableLoading();

                try {
                    const response = await fetch(API_BASE_URL);
                    if (!response.ok) {
                        if (response.status === 403) {
                            setTableStatus('Bạn không có quyền xem danh sách danh mục.');
                            setTableLoading('Bạn không có quyền xem danh sách danh mục.');
                            allCategories = [];
                            filteredCategories = [];
                            return;
                        }
                        throw new Error('Failed to load categories');
                    }

                    const categories = await response.json();
                    allCategories = Array.isArray(categories) ? categories : [];
                    applyCategoryFilters();
                } catch (error) {
                    setTableStatus('Không thể tải danh sách danh mục.');
                    setTableLoading('Có lỗi xảy ra khi tải dữ liệu.');
                    allCategories = [];
                    filteredCategories = [];
                    if (showError) {
                        showAlert('Không thể tải danh sách danh mục. Vui lòng thử lại sau.', 'danger');
                    }
                }
            }

            async function openDetailModal(categoryId) {
                if (!detailBody) {
                    return;
                }

                detailBody.innerHTML = `
                    <div class="py-4 text-center text-muted">
                        <div class="spinner-border text-primary" role="status"></div>
                    </div>`;
                detailModal.show();

                try {
                    const response = await fetch(`${API_BASE_URL}/${categoryId}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        if (response.status === 404) {
                            detailBody.innerHTML = '<div class="alert alert-warning mb-0">Danh mục không tồn tại hoặc đã bị xóa.</div>';
                        } else if (response.status === 403) {
                            detailBody.innerHTML = '<div class="alert alert-warning mb-0">Bạn không có quyền xem danh mục này.</div>';
                        } else {
                            throw new Error('Failed to load category detail');
                        }
                        return;
                    }

                    const category = await response.json();
                    detailBody.innerHTML = `
                        <div>
                            <h5 class="mb-3 text-primary">${escapeHtml(category.name ?? 'Danh mục')}</h5>
                            <dl class="row mb-0">
                                <dt class="col-sm-4">Thứ tự hiển thị</dt>
                                <dd class="col-sm-8">${escapeHtml(String(category.index ?? '—'))}</dd>
                                <dt class="col-sm-4">Ngày tạo</dt>
                                <dd class="col-sm-8">${formatDateTime(category.createdAt)}</dd>
                                <dt class="col-sm-4">Cập nhật lần cuối</dt>
                                <dd class="col-sm-8">${category.updatedAt ? formatDateTime(category.updatedAt) : '—'}</dd>
                                <dt class="col-sm-4">Người tạo</dt>
                                <dd class="col-sm-8">${escapeHtml(category.createdBy ?? '—')}</dd>
                            </dl>
                        </div>`;
                } catch (error) {
                    detailBody.innerHTML = '<div class="alert alert-danger mb-0">Không thể tải chi tiết danh mục.</div>';
                }
            }

            function resetForm() {
                categoryForm.reset();
                categoryFormErrors.classList.add('d-none');
                categoryFormErrors.innerHTML = '';
                editingCategoryId = null;
                submitButton.disabled = false;
                submitButton.innerHTML = 'Thêm mới';
            }

            function fillForm(category) {
                nameInput.value = category.name ?? '';
                indexInput.value = category.index ?? 0;
            }

            function handleValidationErrors(problemDetails) {
                if (!categoryFormErrors) {
                    return;
                }

                const errors = [];
                if (problemDetails && problemDetails.errors) {
                    Object.values(problemDetails.errors).forEach(messages => {
                        if (Array.isArray(messages)) {
                            messages.forEach(message => errors.push(message));
                        }
                    });
                } else if (problemDetails && problemDetails.title) {
                    errors.push(problemDetails.title);
                }

                if (errors.length === 0) {
                    errors.push('Vui lòng kiểm tra lại thông tin đã nhập.');
                }

                categoryFormErrors.innerHTML = `<ul class="mb-0">${errors.map(message => `<li>${escapeHtml(message)}</li>`).join('')}</ul>`;
                categoryFormErrors.classList.remove('d-none');
            }

            function openCreateModal() {
                resetForm();
                categoryModalTitle.textContent = 'Thêm mới danh mục';
                submitButton.textContent = 'Thêm mới';
                categoryModal.show();
            }

            async function openEditModal(categoryId) {
                resetForm();
                submitButton.disabled = true;
                submitButton.textContent = 'Đang tải...';
                categoryModalTitle.textContent = 'Chỉnh sửa danh mục';

                try {
                    const response = await fetch(`${API_BASE_URL}/${categoryId}`);
                    if (!response.ok) {
                        if (response.status === 404) {
                            showAlert('Danh mục không tồn tại hoặc đã bị xóa.', 'warning');
                        } else if (response.status === 403) {
                            showAlert('Bạn không có quyền chỉnh sửa danh mục này.', 'warning');
                        } else {
                            throw new Error('Failed to load category');
                        }
                        return;
                    }

                    const category = await response.json();
                    editingCategoryId = categoryId;
                    fillForm(category);
                    submitButton.textContent = 'Lưu thay đổi';
                    categoryModal.show();
                } catch (error) {
                    showAlert('Không thể tải thông tin danh mục. Vui lòng thử lại sau.', 'danger');
                } finally {
                    submitButton.disabled = false;
                    if (!editingCategoryId) {
                        submitButton.textContent = 'Thêm mới';
                    }
                }
            }

            function openDeleteModal(categoryId, categoryName) {
                deleteCategoryId = categoryId;
                deleteCategoryName.textContent = categoryName || '';
                deleteModal.show();
            }

            async function submitCategory(event) {
                event.preventDefault();
                categoryFormErrors.classList.add('d-none');
                categoryFormErrors.innerHTML = '';

                const payload = {
                    name: nameInput.value ? nameInput.value.trim() : '',
                    index: Number(indexInput.value || 0)
                };

                if (!payload.name) {
                    handleValidationErrors({ title: 'Tên danh mục không được để trống.' });
                    return;
                }

                const isEdit = Boolean(editingCategoryId);
                const url = isEdit ? `${API_BASE_URL}/${editingCategoryId}` : API_BASE_URL;
                const method = isEdit ? 'PUT' : 'POST';

                submitButton.disabled = true;
                submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Đang xử lý...';

                try {
                    const response = await fetch(url, {
                        method,
                        headers: {
                            'Content-Type': 'application/json',
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        if (response.status === 400) {
                            const problemDetails = await response.json().catch(() => null);
                            handleValidationErrors(problemDetails);
                        } else if (response.status === 403) {
                            showAlert('Bạn không có quyền thực hiện thao tác này.', 'warning');
                        } else {
                            const problemDetails = await response.json().catch(() => null);
                            handleValidationErrors(problemDetails);
                        }
                        return;
                    }

                    await loadCategories(false);
                    categoryModal.hide();
                    showAlert(isEdit ? 'Đã cập nhật danh mục thành công.' : 'Đã tạo danh mục mới thành công.');
                } catch (error) {
                    showAlert('Không thể lưu danh mục. Vui lòng thử lại sau.', 'danger');
                } finally {
                    submitButton.disabled = false;
                    submitButton.innerHTML = isEdit ? 'Lưu thay đổi' : 'Thêm mới';
                }
            }

            async function confirmDelete() {
                if (!deleteCategoryId) {
                    return;
                }

                deleteConfirmBtn.disabled = true;
                deleteConfirmBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Đang xóa...';

                try {
                    const response = await fetch(`${API_BASE_URL}/${deleteCategoryId}`, {
                        method: 'DELETE',
                        headers: {
                            ...(antiForgeryToken ? { 'RequestVerificationToken': antiForgeryToken } : {})
                        }
                    });

                    if (!response.ok) {
                        if (response.status === 403) {
                            showAlert('Bạn không có quyền xóa danh mục này.', 'warning');
                        } else if (response.status === 404) {
                            showAlert('Danh mục đã bị xóa hoặc không tồn tại.', 'warning');
                        } else if (response.status === 400) {
                            const result = await response.json().catch(() => null);
                            const message = result && result.message ? result.message : 'Không thể xóa danh mục này.';
                            showAlert(message, 'warning');
                        } else {
                            throw new Error('Failed to delete category');
                        }
                        return;
                    }

                    deleteModal.hide();
                    await loadCategories(false);
                    showAlert('Đã xóa danh mục thành công.');
                } catch (error) {
                    showAlert('Không thể xóa danh mục. Vui lòng thử lại sau.', 'danger');
                } finally {
                    deleteConfirmBtn.disabled = false;
                    deleteConfirmBtn.innerHTML = 'Xóa';
                    deleteCategoryId = null;
                }
            }

            tableBody.addEventListener('click', event => {
                const button = event.target.closest('button[data-action]');
                if (!button) {
                    return;
                }

                const action = button.dataset.action;
                const categoryId = Number(button.dataset.id);
                const categoryName = button.dataset.name || '';

                if (action === 'detail' && canView) {
                    openDetailModal(categoryId);
                } else if (action === 'edit' && canUpdate) {
                    openEditModal(categoryId);
                } else if (action === 'delete' && canDelete) {
                    openDeleteModal(categoryId, categoryName);
                }
            });

            const debouncedCategoryFilter = debounce(() => {
                applyCategoryFilters();
            }, 300);

            if (searchInput) {
                searchInput.addEventListener('input', () => {
                    debouncedCategoryFilter();
                });
            }

            if (updateFilterSelect) {
                updateFilterSelect.addEventListener('change', () => applyCategoryFilters());
            }

            if (resetFiltersBtn) {
                resetFiltersBtn.addEventListener('click', () => {
                    if (searchInput) {
                        searchInput.value = '';
                    }
                    if (updateFilterSelect) {
                        updateFilterSelect.value = '';
                    }
                    applyCategoryFilters();
                });
            }

            if (categoryForm) {
                categoryForm.addEventListener('submit', submitCategory);
            }

            if (deleteConfirmBtn) {
                deleteConfirmBtn.addEventListener('click', confirmDelete);
            }

            if (createBtn) {
                createBtn.addEventListener('click', () => openCreateModal());
            }

            if (refreshBtn) {
                refreshBtn.addEventListener('click', () => loadCategories());
            }

            loadCategories(false);
        })();
    </script>
}
