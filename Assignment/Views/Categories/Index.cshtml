@{
    ViewData["Title"] = "Danh mục sản phẩm";
    Layout = "_AdminLayout";

    var canCreate = User.HasPermission("CreateCategory");
    var canEdit = User.HasAnyPermission("UpdateCategory", "UpdateCategoryAll");
    var canDelete = User.HasAnyPermission("DeleteCategory", "DeleteCategoryAll");
    var showActionColumn = canEdit || canDelete;
    var columnCount = 2 + (showActionColumn ? 1 : 0);
}

<div class="container-fluid pt-4 px-4">
    <div class="card shadow-sm">
        <div class="card-header bg-light">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                <div>
                    <h4 class="mb-1 text-primary">
                        <i class="fas fa-tags me-2"></i>@ViewData["Title"]
                    </h4>
                    <p class="text-muted mb-0">Quản lý danh mục sản phẩm trên một giao diện duy nhất.</p>
                </div>
                @if (canCreate)
                {
                    <button id="openCreateModalButton" class="btn btn-primary" type="button">
                        <i class="fas fa-plus me-2"></i>Thêm mới Category
                    </button>
                }
            </div>
        </div>
        <div class="card-body">
            <div id="alertContainer" class="mb-3"></div>

            <div class="table-responsive">
                <table class="table table-hover table-bordered text-center align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th class="text-start">Tên danh mục</th>
                            <th style="width: 120px;">Thứ tự</th>
                            @if (showActionColumn)
                            {
                                <th style="width: 180px;">Hành động</th>
                            }
                        </tr>
                    </thead>
                    <tbody id="categoryTableBody" data-colspan="@columnCount">
                        <tr>
                            <td colspan="@columnCount" class="text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Đang tải dữ liệu...</span>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="categoryModalTitle">Thêm danh mục</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <div class="modal-body">
                <form id="categoryForm" novalidate>
                    <input type="hidden" id="categoryId" name="Id" />
                    <div class="mb-3">
                        <label for="categoryName" class="form-label">Tên danh mục</label>
                        <input type="text" class="form-control" id="categoryName" name="Name" maxlength="100" required />
                        <div class="invalid-feedback" data-feedback-for="Name"></div>
                    </div>
                    <div class="mb-3">
                        <label for="categoryIndex" class="form-label">Thứ tự hiển thị</label>
                        <input type="number" class="form-control" id="categoryIndex" name="Index" min="0" step="1" required />
                        <div class="invalid-feedback" data-feedback-for="Index"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="submit" form="categoryForm" id="categoryModalSubmit" class="btn btn-primary">Lưu</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalTitle">Xác nhận xóa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <div class="modal-body">
                <p id="deleteModalMessage" class="mb-0"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteButton">Xóa</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (function () {
            const apiBaseUrl = '/api/categories';
            const canEdit = @(canEdit ? "true" : "false");
            const canDelete = @(canDelete ? "true" : "false");
            const showActionColumn = @(showActionColumn ? "true" : "false");
            const columnCount = @columnCount;

            const tableBody = document.getElementById('categoryTableBody');
            const alertContainer = document.getElementById('alertContainer');
            const createButton = document.getElementById('openCreateModalButton');

            const categoryModalElement = document.getElementById('categoryModal');
            const categoryModal = new bootstrap.Modal(categoryModalElement);
            const categoryModalTitle = document.getElementById('categoryModalTitle');
            const categoryModalSubmit = document.getElementById('categoryModalSubmit');
            const categoryForm = document.getElementById('categoryForm');
            const categoryIdInput = document.getElementById('categoryId');
            const categoryNameInput = document.getElementById('categoryName');
            const categoryIndexInput = document.getElementById('categoryIndex');

            const deleteModalElement = document.getElementById('deleteModal');
            const deleteModal = new bootstrap.Modal(deleteModalElement);
            const deleteMessage = document.getElementById('deleteModalMessage');
            const deleteConfirmButton = document.getElementById('confirmDeleteButton');

            let deleteTargetId = null;

            document.addEventListener('DOMContentLoaded', () => {
                loadCategories();
            });

            if (createButton) {
                createButton.addEventListener('click', () => {
                    resetForm();
                    categoryForm.dataset.mode = 'create';
                    categoryModalTitle.textContent = 'Thêm danh mục';
                    categoryModalSubmit.textContent = 'Thêm mới';
                    categoryModal.show();
                });
            }

            categoryModalElement.addEventListener('hidden.bs.modal', () => {
                resetForm();
                categoryForm.dataset.mode = 'create';
                categoryModalSubmit.textContent = 'Lưu';
            });

            categoryForm.addEventListener('submit', async (event) => {
                event.preventDefault();

                clearValidationErrors();
                categoryModalSubmit.disabled = true;

                const payload = {
                    name: categoryNameInput.value,
                    index: Number(categoryIndexInput.value || 0)
                };

                let url = apiBaseUrl;
                let method = 'POST';
                const mode = categoryForm.dataset.mode || 'create';

                if (mode === 'edit') {
                    const id = categoryIdInput.value;
                    url = `${apiBaseUrl}/${id}`;
                    method = 'PUT';
                }

                try {
                    const response = await fetch(url, {
                        method,
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(payload)
                    });

                    await handleResponse(response);

                    const successMessage = mode === 'edit'
                        ? 'Đã cập nhật danh mục thành công.'
                        : 'Đã tạo danh mục thành công.';

                    categoryModal.hide();
                    showAlert('success', successMessage);
                    await loadCategories();
                } catch (error) {
                    applyFieldErrors(error.fieldErrors);
                    showAlert('danger', error.message);
                } finally {
                    categoryModalSubmit.disabled = false;
                }
            });

            deleteConfirmButton.addEventListener('click', async () => {
                if (!deleteTargetId) {
                    return;
                }

                deleteConfirmButton.disabled = true;

                try {
                    const response = await fetch(`${apiBaseUrl}/${deleteTargetId}`, {
                        method: 'DELETE',
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    await handleResponse(response);

                    deleteModal.hide();
                    showAlert('success', 'Đã xóa danh mục thành công.');
                    await loadCategories();
                } catch (error) {
                    showAlert('danger', error.message);
                } finally {
                    deleteTargetId = null;
                    deleteConfirmButton.disabled = false;
                }
            });

            async function loadCategories() {
                setLoadingState();

                try {
                    const response = await fetch(apiBaseUrl, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    const data = await handleResponse(response);
                    renderCategories(Array.isArray(data) ? data : []);
                } catch (error) {
                    renderErrorRow(error.message);
                    showAlert('danger', error.message);
                }
            }

            function setLoadingState() {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="${columnCount}" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Đang tải dữ liệu...</span>
                            </div>
                        </td>
                    </tr>`;
            }

            function renderErrorRow(message) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="${columnCount}" class="text-center text-danger py-4">${message}</td>
                    </tr>`;
            }

            function renderCategories(categories) {
                tableBody.innerHTML = '';

                if (!categories.length) {
                    const emptyRow = document.createElement('tr');
                    const emptyCell = document.createElement('td');
                    emptyCell.colSpan = columnCount;
                    emptyCell.className = 'text-center text-muted py-4';
                    emptyCell.textContent = 'Chưa có danh mục nào.';
                    emptyRow.appendChild(emptyCell);
                    tableBody.appendChild(emptyRow);
                    return;
                }

                categories.forEach(category => {
                    const row = document.createElement('tr');

                    const nameCell = document.createElement('td');
                    nameCell.className = 'text-start fw-semibold';
                    nameCell.textContent = category.name;
                    row.appendChild(nameCell);

                    const indexCell = document.createElement('td');
                    indexCell.textContent = category.index;
                    row.appendChild(indexCell);

                    if (showActionColumn) {
                        const actionCell = document.createElement('td');
                        const actionsWrapper = document.createElement('div');
                        actionsWrapper.className = 'd-flex justify-content-center gap-2';

                        if (canEdit) {
                            const editButton = document.createElement('button');
                            editButton.type = 'button';
                            editButton.className = 'btn btn-sm btn-outline-warning';
                            editButton.innerHTML = '<i class="fas fa-edit"></i>';
                            editButton.title = 'Chỉnh sửa';
                            editButton.addEventListener('click', () => openEditModal(category.id));
                            actionsWrapper.appendChild(editButton);
                        }

                        if (canDelete) {
                            const deleteButton = document.createElement('button');
                            deleteButton.type = 'button';
                            deleteButton.className = 'btn btn-sm btn-outline-danger';
                            deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
                            deleteButton.title = 'Xóa';
                            deleteButton.addEventListener('click', () => openDeleteModal(category.id, category.name));
                            actionsWrapper.appendChild(deleteButton);
                        }

                        actionCell.appendChild(actionsWrapper);
                        row.appendChild(actionCell);
                    }

                    tableBody.appendChild(row);
                });
            }

            async function openEditModal(id) {
                resetForm();
                categoryForm.dataset.mode = 'edit';
                categoryModalTitle.textContent = 'Chỉnh sửa danh mục';
                categoryModalSubmit.textContent = 'Lưu thay đổi';
                categoryModalSubmit.disabled = true;

                try {
                    const response = await fetch(`${apiBaseUrl}/${id}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    const data = await handleResponse(response);

                    categoryIdInput.value = data.id;
                    categoryNameInput.value = data.name;
                    categoryIndexInput.value = data.index;

                    categoryModal.show();
                } catch (error) {
                    showAlert('danger', error.message);
                    categoryForm.dataset.mode = 'create';
                } finally {
                    categoryModalSubmit.disabled = false;
                }
            }

            function openDeleteModal(id, name) {
                deleteTargetId = id;
                deleteMessage.textContent = `Bạn có chắc chắn muốn xóa danh mục "${name}"?`;
                deleteModal.show();
            }

            function resetForm() {
                categoryForm.reset();
                categoryIdInput.value = '';
                clearValidationErrors();
            }

            function clearValidationErrors() {
                const inputs = categoryForm.querySelectorAll('.form-control');
                inputs.forEach(input => input.classList.remove('is-invalid'));

                const feedbackElements = categoryForm.querySelectorAll('[data-feedback-for]');
                feedbackElements.forEach(element => {
                    element.textContent = '';
                });
            }

            function applyFieldErrors(fieldErrors = {}) {
                if (!fieldErrors) {
                    return;
                }

                Object.entries(fieldErrors).forEach(([field, messages]) => {
                    const input = categoryForm.querySelector(`[name="${field}"]`);
                    const feedback = categoryForm.querySelector(`[data-feedback-for="${field}"]`);

                    if (!input) {
                        return;
                    }

                    const message = Array.isArray(messages) ? messages.join(' ') : String(messages);

                    input.classList.add('is-invalid');
                    if (feedback) {
                        feedback.textContent = message;
                    }
                });
            }

            function showAlert(type, message) {
                if (!message) {
                    return;
                }

                alertContainer.innerHTML = '';

                const wrapper = document.createElement('div');
                wrapper.className = `alert alert-${type} alert-dismissible fade show`;
                wrapper.role = 'alert';
                wrapper.innerHTML = `
                    <div>${message}</div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Đóng"></button>`;

                alertContainer.appendChild(wrapper);
            }

            async function handleResponse(response) {
                if (response.ok) {
                    if (response.status === 204) {
                        return null;
                    }

                    const contentType = response.headers.get('content-type') || '';
                    if (contentType.includes('application/json')) {
                        return await response.json();
                    }

                    return null;
                }

                const errorPayload = await parseErrorResponse(response);
                const error = new Error(errorPayload.message);
                error.fieldErrors = errorPayload.fieldErrors;
                throw error;
            }

            async function parseErrorResponse(response) {
                const fallbackMessage = response.status === 403
                    ? 'Bạn không có quyền thực hiện thao tác này.'
                    : 'Đã xảy ra lỗi. Vui lòng thử lại.';

                const contentType = response.headers.get('content-type') || '';

                if (contentType.includes('application/json')) {
                    try {
                        const data = await response.json();
                        const fieldErrors = data?.errors ?? {};
                        const message = data?.detail || data?.title || data?.message || fallbackMessage;
                        return { message, fieldErrors };
                    } catch {
                        return { message: fallbackMessage, fieldErrors: {} };
                    }
                }

                try {
                    const text = await response.text();
                    const message = text || fallbackMessage;
                    return { message, fieldErrors: {} };
                } catch {
                    return { message: fallbackMessage, fieldErrors: {} };
                }
            }
        })();
    </script>
}
