@model Assignment.ViewModels.Products.ProductDetailViewModel

@{
    var product = Model.Product;
    var returnUrl = Context.Request.Path + Context.Request.QueryString;
    ViewData["Title"] = product.Name;
}

<style>
    .product-detail-wrapper {
        background-color: #f5f7fb;
        padding: 3rem 0;
    }

    .detail-container {
        background: #ffffff;
        border-radius: 24px;
        padding: 3rem;
        margin-top: 0;
        border: 1px solid #e2e8f0;
        box-shadow: 0 24px 60px rgba(15, 23, 42, 0.08);
    }

    .product-media {
        position: relative;
        background: #f8fafc;
        border-radius: 20px;
        padding: 1.5rem;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .product-detail-image {
        width: 100%;
        border-radius: 18px;
        object-fit: cover;
        max-height: 520px;
        box-shadow: 0 16px 40px rgba(15, 23, 42, 0.12);
    }

    .discount-chip {
        position: absolute;
        top: 1.5rem;
        left: 1.5rem;
        background: #ef4444;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 999px;
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    .product-content {
        padding-left: 0;
    }

    @@media (min-width: 992px) {
        .product-content {
            padding-left: 2.5rem;
        }
    }

    .product-title {
        font-size: 2rem;
        font-weight: 700;
        color: #0f172a;
        margin-bottom: 1.5rem;
    }

    .category-chip {
        display: inline-flex;
        align-items: center;
        padding: 0.4rem 0.9rem;
        border-radius: 999px;
        background: rgba(15, 23, 42, 0.08);
        color: #0f172a;
        font-weight: 600;
        font-size: 0.9rem;
        letter-spacing: 0.2px;
        margin-bottom: 1rem;
    }

    .rating-large {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1.1rem;
        color: #fbbf24;
        margin-bottom: 1.25rem;
    }

    .rating-large i {
        color: #fbbf24;
    }

    .rating-large span {
        color: #64748b;
        font-weight: 500;
    }

    .detail-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .detail-tag {
        display: inline-flex;
        align-items: center;
        gap: 0.35rem;
        border-radius: 999px;
        padding: 0.35rem 0.85rem;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .detail-tag-hot {
        background: #fee2e2;
        color: #ef4444;
    }

    .detail-tag-vegan {
        background: #dcfce7;
        color: #15803d;
    }

    .price-section {
        background: rgba(37, 99, 235, 0.08);
        border: 1px solid rgba(37, 99, 235, 0.15);
        padding: 1.75rem;
        border-radius: 20px;
        margin-bottom: 2rem;
    }

    .final-price {
        color: #2563eb;
        font-size: 2.3rem;
        font-weight: 700;
    }

    .original-price {
        text-decoration: line-through;
        color: #94a3b8;
        font-size: 1rem;
    }

    .badge-large {
        background: #2563eb;
        color: white;
        padding: 0.35rem 1rem;
        border-radius: 999px;
        font-size: 0.95rem;
        font-weight: 600;
        letter-spacing: 0.3px;
    }

    .price-subtext {
        color: #15803d;
        font-weight: 600;
        margin-top: 0.75rem;
    }

    .detail-meta-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .info-item {
        display: flex;
        align-items: flex-start;
        gap: 0.85rem;
        padding: 1.1rem 1.25rem;
        background: #f8fafc;
        border-radius: 18px;
        border: 1px solid #e2e8f0;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .info-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 30px rgba(15, 23, 42, 0.08);
    }

    .info-item i {
        font-size: 1.25rem;
        width: 48px;
        height: 48px;
        border-radius: 14px;
        background: rgba(37, 99, 235, 0.12);
        color: #2563eb;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .info-item strong {
        display: block;
        color: #0f172a;
        margin-bottom: 0.25rem;
        font-weight: 600;
    }

    .info-item .info-text {
        color: #475569;
    }

    .info-item .status-positive {
        color: #16a34a;
        font-weight: 600;
    }

    .info-item .status-negative {
        color: #dc2626;
        font-weight: 600;
    }

    .quantity-selector {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin: 0;
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        padding: 0.75rem 1rem;
        width: fit-content;
    }

    .quantity-btn {
        width: 42px;
        height: 42px;
        border: none;
        background: #2563eb;
        color: white;
        border-radius: 12px;
        font-size: 1.2rem;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.15s ease, box-shadow 0.15s ease, background 0.15s ease;
    }

    .quantity-btn:hover {
        background: #1d4ed8;
        transform: translateY(-1px);
        box-shadow: 0 10px 20px rgba(37, 99, 235, 0.25);
    }

    .quantity-input {
        width: 70px;
        text-align: center;
        font-size: 1.25rem;
        font-weight: 600;
        border: none;
        background: transparent;
        color: #0f172a;
    }

    .detail-actions {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin-top: 1.5rem;
    }

    .btn-add-large {
        background: #2563eb;
        color: white;
        border: none;
        padding: 0.95rem 1.5rem;
        border-radius: 16px;
        font-size: 1.05rem;
        font-weight: 600;
        width: 100%;
        box-shadow: 0 18px 40px rgba(37, 99, 235, 0.25);
        transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
    }

    .btn-add-large:hover {
        background: #1d4ed8;
        transform: translateY(-2px);
        box-shadow: 0 24px 48px rgba(37, 99, 235, 0.28);
    }

    .btn-buy-now {
        background: #0f172a;
        border: none;
        color: white;
        padding: 0.95rem 1.5rem;
        border-radius: 16px;
        font-size: 1.05rem;
        font-weight: 600;
        width: 100%;
        transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
    }

    .btn-buy-now:hover {
        background: #111827;
        transform: translateY(-2px);
        box-shadow: 0 18px 40px rgba(15, 23, 42, 0.25);
    }

    .detail-extra {
        margin-top: 2.5rem;
    }

    .description-section {
        padding: 1.75rem;
        background: #f8fafc;
        border-radius: 18px;
        border: 1px solid #e2e8f0;
        box-shadow: 0 10px 28px rgba(15, 23, 42, 0.06);
        height: 100%;
    }

    .description-section h3 {
        font-size: 1.25rem;
        font-weight: 700;
        color: #0f172a;
        margin-bottom: 1rem;
    }

    .description-section p {
        color: #475569;
        line-height: 1.7;
        margin-bottom: 0;
        white-space: pre-line;
    }

    @@media (max-width: 991.98px) {
        .detail-container {
            padding: 2rem;
        }

        .product-content {
            padding-left: 0;
        }
    }

    @@media (max-width: 767.98px) {
        .detail-container {
            padding: 1.5rem;
        }

        .product-title {
            font-size: 1.75rem;
        }

        .quantity-selector {
            width: 100%;
            justify-content: space-between;
        }

        .detail-actions {
            width: 100%;
        }
    }
</style>

<div class="product-detail-wrapper">
    <div class="container">
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["Success"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div class="detail-container">
            @Html.AntiForgeryToken()
            <div class="row g-lg-5 align-items-start">
                <div class="col-lg-6 mb-4 mb-lg-0">
                    <div class="product-media">
                        <img src="@product.ProductImageUrl" class="product-detail-image" alt="@product.Name" />
                        @if (product.DiscountType == Assignment.Enums.DiscountType.Percent && product.Discount.HasValue)
                        {
                            <span class="discount-chip">-@product.Discount%</span>
                        }
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="product-content">
                        @if (product.Category != null)
                        {
                            <span class="category-chip">@product.Category.Name</span>
                        }

                        <h1 class="product-title">@product.Name</h1>

                        <div class="rating-large">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= Math.Floor(product.AverageEvaluate))
                                {
                                    <i class="fas fa-star"></i>
                                }
                                else if (i - 0.5 <= product.AverageEvaluate)
                                {
                                    <i class="fas fa-star-half-alt"></i>
                                }
                                else
                                {
                                    <i class="far fa-star"></i>
                                }
                            }
                            <span>@product.AverageEvaluate.ToString("0.0") (@product.TotalEvaluate đánh giá)</span>
                        </div>

                        @if (Model.UserRating != null)
                        {
                            <div class="card shadow-sm border-0 mb-4">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0"><i class="fas fa-comment-dots me-2 text-primary"></i>Đánh giá của bạn</h6>
                                        @if (Model.UserRating.IsEdited)
                                        {
                                            <span class="badge bg-warning text-dark">Đã chỉnh sửa</span>
                                        }
                                    </div>
                                    <div class="text-warning mb-2">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= Model.UserRating.Score)
                                            {
                                                <i class="fas fa-star"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-star"></i>
                                            }
                                        }
                                    </div>
                                    @if (!string.IsNullOrWhiteSpace(Model.UserRating.Comment))
                                    {
                                        <p class="mb-2">@Model.UserRating.Comment</p>
                                    }
                                    <small class="text-muted d-block">Gửi ngày @Model.UserRating.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                                    <div class="d-flex flex-wrap gap-2 mt-3">
                                        <button type="button" class="btn btn-outline-primary btn-sm" data-bs-toggle="modal" data-bs-target="#productRatingModal">
                                            <i class="fas fa-edit me-1"></i>Chỉnh sửa đánh giá
                                        </button>
                                        @if (Model.CanDeleteRating)
                                        {
                                            <form asp-controller="Ratings" asp-action="Delete" method="post" class="d-inline" onsubmit="return confirm('Bạn có chắc muốn xóa đánh giá này?');">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@Model.UserRating.Id" />
                                                <input type="hidden" name="returnUrl" value="@returnUrl" />
                                                <button type="submit" class="btn btn-outline-danger btn-sm">
                                                    <i class="fas fa-trash-alt me-1"></i>Xóa đánh giá
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        else if (Model.CanRate && Model.OrderItemIdForRating.HasValue)
                        {
                            <div class="mb-4">
                                <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#productRatingModal">
                                    <i class="fas fa-star me-2"></i>Đánh giá sản phẩm
                                </button>
                            </div>
                        }

                        <div class="detail-tags">
                            @if (product.IsSpicy)
                            {
                                <span class="detail-tag detail-tag-hot">🌶️ Cay</span>
                            }
                            @if (product.IsVegetarian)
                            {
                                <span class="detail-tag detail-tag-vegan">🥗 Chay</span>
                            }
                        </div>

                        @{
                            var hasPercentDiscount = product.DiscountType == Assignment.Enums.DiscountType.Percent && product.Discount.HasValue;
                            var hasFixedDiscount = product.DiscountType == Assignment.Enums.DiscountType.FixedAmount && product.Discount.HasValue;
                            double finalPrice = product.Price;
                            if (hasPercentDiscount)
                            {
                                finalPrice = Math.Max(product.Price - (product.Price * product.Discount.Value / 100.0), 0);
                            }
                            else if (hasFixedDiscount)
                            {
                                finalPrice = product.Discount.Value;
                            }
                            var savings = Math.Max(product.Price - finalPrice, 0);
                        }

                        <div class="price-section">
                            @if (product.DiscountType == Assignment.Enums.DiscountType.None || (!product.Discount.HasValue && product.DiscountType != Assignment.Enums.DiscountType.None))
                            {
                                <div class="final-price">@product.Price.ToString("N0") ₫</div>
                            }
                            else if (product.DiscountType == Assignment.Enums.DiscountType.Percent && product.Discount.HasValue)
                            {
                                <div class="d-flex align-items-center gap-2 mb-2">
                                    <span class="badge-large">-@product.Discount%</span>
                                    <span class="text-muted small">Ưu đãi theo %</span>
                                </div>
                                <div class="original-price mb-2">@product.Price.ToString("N0") ₫</div>
                                <div class="final-price">@finalPrice.ToString("N0") ₫</div>
                                @if (savings > 0)
                                {
                                    <div class="price-subtext">
                                        <i class="fas fa-tag me-1"></i> Tiết kiệm @savings.ToString("N0") ₫
                                    </div>
                                }
                            }
                            else if (product.DiscountType == Assignment.Enums.DiscountType.FixedAmount && product.Discount.HasValue)
                            {
                                <div class="d-flex align-items-center gap-2 mb-2">
                                    <span class="badge-large">Giá đặc biệt</span>
                                    <span class="text-muted small">Ưu đãi độc quyền</span>
                                </div>
                                <div class="original-price mb-2">@product.Price.ToString("N0") ₫</div>
                                <div class="final-price">@finalPrice.ToString("N0") ₫</div>
                                @if (savings > 0)
                                {
                                    <div class="price-subtext">
                                        <i class="fas fa-tag me-1"></i> Tiết kiệm @savings.ToString("N0") ₫
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="final-price">@product.Price.ToString("N0") ₫</div>
                            }
                        </div>

                        <div class="detail-meta-grid">
                            <div class="info-item">
                                <i class="fas fa-clock"></i>
                                <div>
                                    <strong>Thời gian chuẩn bị</strong>
                                    <span class="info-text">@product.PreparationTime phút</span>
                                </div>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-fire"></i>
                                <div>
                                    <strong>Calories</strong>
                                    <span class="info-text">@product.Calories kcal</span>
                                </div>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-box"></i>
                                <div>
                                    <strong>Tình trạng</strong>
                                    @if (product.Stock > 0)
                                    {
                                        <span class="status-positive">Còn hàng (@product.Stock sản phẩm)</span>
                                    }
                                    else
                                    {
                                        <span class="status-negative">Hết hàng</span>
                                    }
                                </div>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-chart-line"></i>
                                <div>
                                    <strong>Đã bán</strong>
                                    <span class="info-text">@product.Sold sản phẩm</span>
                                </div>
                            </div>
                        </div>

                        <div class="detail-actions">
                            <div class="quantity-selector">
                                <button type="button" class="quantity-btn" onclick="decreaseQuantity()">-</button>
                                <input type="number" id="quantity" class="quantity-input" value="1" min="1" max="@product.Stock" />
                                <button type="button" class="quantity-btn" onclick="increaseQuantity()">+</button>
                            </div>

                            <button type="button" class="btn-add-large" onclick="addToCartWithQuantity()" @(product.Stock <= 0 ? "disabled" : "")>
                                <i class="fas fa-shopping-cart me-2"></i>
                                Thêm vào giỏ hàng
                            </button>
                            <button type="button" class="btn-buy-now" onclick="buyNow()" @(product.Stock <= 0 ? "disabled" : "")>
                                <i class="fas fa-bolt me-2"></i>Mua ngay
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="detail-extra row g-4">
                <div class="col-lg-6">
                    <div class="description-section h-100">
                        <h3><i class="fas fa-align-left me-2"></i>Mô tả sản phẩm</h3>
                        <p>@product.Description</p>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="description-section h-100">
                        <h3><i class="fas fa-list-ul me-2"></i>Thành phần</h3>
                        <p>@product.Ingredients</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (Model.CanRate && Model.OrderItemIdForRating.HasValue)
{
    <div class="modal fade" id="productRatingModal" tabindex="-1" aria-labelledby="productRatingModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <form asp-controller="Ratings" asp-action="Submit" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="OrderItemId" value="@Model.OrderItemIdForRating" />
                    <input type="hidden" name="ReturnUrl" value="@returnUrl" />
                    <div class="modal-header">
                        <h5 class="modal-title" id="productRatingModalLabel">@((Model.UserRating != null) ? "Cập nhật đánh giá" : "Đánh giá sản phẩm")</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="rating-score" class="form-label">Điểm đánh giá</label>
                            <select class="form-select" id="rating-score" name="Score" required>
                                @for (var score = 1; score <= 5; score++)
                                {
                                    var isSelected = Model.UserRating?.Score == score;
                                    <option value="@score" selected="@(isSelected ? "selected" : null)">@score sao</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="rating-comment" class="form-label">Nhận xét</label>
                            <textarea class="form-control" id="rating-comment" name="Comment" rows="3" maxlength="2000" placeholder="Chia sẻ cảm nhận của bạn...">@Model.UserRating?.Comment</textarea>
                            <div class="form-text">Tối đa 2000 ký tự.</div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-primary">@((Model.UserRating != null) ? "Cập nhật" : "Gửi đánh giá")</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        const maxStock = @product.Stock;
        const loginUrl = '@Url.Page("/Account/Login", new { area = "Identity" })';

        function increaseQuantity() {
            const input = document.getElementById('quantity');
            const currentValue = parseInt(input.value);
            if (currentValue < maxStock) {
                input.value = currentValue + 1;
            }
        }

        function decreaseQuantity() {
            const input = document.getElementById('quantity');
            const currentValue = parseInt(input.value);
            if (currentValue > 1) {
                input.value = currentValue - 1;
            }
        }

        function addToCartWithQuantity() {
            const quantity = parseInt(document.getElementById('quantity').value);
            const token = $('input[name="__RequestVerificationToken"]').val();

            $.ajax({
                url: '@Url.Action("AddProduct", "Cart")',
                type: 'POST',
                data: {
                    __RequestVerificationToken: token,
                    productId: @product.Id,
                    quantity: quantity
                },
                success: function() {
                    showNotification('Đã thêm sản phẩm vào giỏ hàng!', 'success');
                    $.get('@Url.Action("GetCount", "Cart")', function(data) {
                        updateCartCount(data.count);
                    });
                },
                error: function() {
                    showNotification('Có lỗi xảy ra, vui lòng thử lại.', 'error');
                }
            });
        }

        function buyNow() {
            const quantity = parseInt(document.getElementById('quantity').value);
            const token = $('input[name="__RequestVerificationToken"]').val();

            $.ajax({
                url: '@Url.Action("BuyNowProduct", "Cart")',
                type: 'POST',
                data: {
                    __RequestVerificationToken: token,
                    productId: @product.Id,
                    quantity: quantity
                },
                success: function (response) {
                    if (response && response.success && response.redirectUrl) {
                        window.location.href = response.redirectUrl;
                        return;
                    }

                    if (response && response.error) {
                        showNotification(response.error, 'error');
                    } else {
                        showNotification('Không thể xử lý yêu cầu. Vui lòng thử lại.', 'error');
                    }
                },
                error: function (xhr) {
                    if (xhr && xhr.status === 401 && loginUrl) {
                        window.location.href = loginUrl;
                        return;
                    }

                    showNotification('Có lỗi xảy ra, vui lòng thử lại.', 'error');
                }
            });
        }

        function updateCartCount(count) {
             $('#cart-count').text(count).show();
        }

        function showNotification(message, type) {
            const bgColor = type === 'success' ? '#4caf50' : '#f44336';
            const notification = $('<div>')
                .css({
                    position: 'fixed',
                    top: '20px',
                    right: '20px',
                    background: bgColor,
                    color: 'white',
                    padding: '15px 25px',
                    borderRadius: '5px',
                    zIndex: 9999,
                    boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
                })
                .text(message)
                .appendTo('body');

            setTimeout(() => notification.fadeOut(() => notification.remove()), 3000);
        }
    </script>
}
