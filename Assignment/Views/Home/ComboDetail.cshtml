@model Assignment.ViewModels.Combos.ComboDetailViewModel

@{
    var combo = Model.Combo;
    var returnUrl = Context.Request.Path + Context.Request.QueryString;
    ViewData["Title"] = combo.Name;
}

<style>
    .combo-detail-wrapper {
        background-color: #f5f7fb;
        padding: 3rem 0;
    }

    .detail-container {
        background: #ffffff;
        border-radius: 24px;
        padding: 3rem;
        border: 1px solid #e2e8f0;
        box-shadow: 0 24px 60px rgba(15, 23, 42, 0.08);
    }

    .combo-media {
        position: relative;
        background: #f8fafc;
        border-radius: 20px;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
    }

    .combo-detail-image {
        width: 100%;
        border-radius: 18px;
        object-fit: cover;
        max-height: 520px;
        box-shadow: 0 16px 40px rgba(15, 23, 42, 0.12);
    }

    .discount-chip {
        position: absolute;
        top: 1.5rem;
        left: 1.5rem;
        background: #ef4444;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 999px;
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    .combo-content {
        padding-left: 0;
    }

    @@media (min-width: 992px) {
        .combo-content {
            padding-left: 2.5rem;
        }
    }

    .combo-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.4rem 1rem;
        border-radius: 999px;
        background: #0f172a;
        color: #ffffff;
        font-weight: 600;
        font-size: 0.9rem;
        letter-spacing: 0.3px;
        text-transform: uppercase;
        margin-bottom: 1rem;
    }

    .product-title {
        font-size: 2rem;
        font-weight: 700;
        color: #0f172a;
        margin-bottom: 1.5rem;
    }

    .rating-large {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1.1rem;
        color: #fbbf24;
        margin-bottom: 1.25rem;
    }

    .rating-large i {
        color: #fbbf24;
    }

    .rating-large span {
        color: #64748b;
        font-weight: 500;
    }

    .detail-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .detail-tag {
        display: inline-flex;
        align-items: center;
        gap: 0.35rem;
        border-radius: 999px;
        padding: 0.35rem 0.85rem;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .detail-tag-collection {
        background: #e0f2fe;
        color: #0369a1;
    }

    .detail-tag-highlight {
        background: #ede9fe;
        color: #6d28d9;
    }

    .price-section {
        background: rgba(37, 99, 235, 0.08);
        border: 1px solid rgba(37, 99, 235, 0.15);
        padding: 1.75rem;
        border-radius: 20px;
        margin-bottom: 2rem;
    }

    .final-price {
        color: #2563eb;
        font-size: 2.3rem;
        font-weight: 700;
    }

    .original-price {
        text-decoration: line-through;
        color: #94a3b8;
        font-size: 1rem;
    }

    .badge-large {
        background: #2563eb;
        color: white;
        padding: 0.35rem 1rem;
        border-radius: 999px;
        font-size: 0.95rem;
        font-weight: 600;
        letter-spacing: 0.3px;
    }

    .price-subtext {
        color: #15803d;
        font-weight: 600;
        margin-top: 0.75rem;
    }

    .detail-meta-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .info-item {
        display: flex;
        align-items: flex-start;
        gap: 0.85rem;
        padding: 1.1rem 1.25rem;
        background: #f8fafc;
        border-radius: 18px;
        border: 1px solid #e2e8f0;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .info-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 30px rgba(15, 23, 42, 0.08);
    }

    .info-item i {
        font-size: 1.25rem;
        width: 48px;
        height: 48px;
        border-radius: 14px;
        background: rgba(37, 99, 235, 0.12);
        color: #2563eb;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .info-item strong {
        display: block;
        color: #0f172a;
        margin-bottom: 0.25rem;
        font-weight: 600;
    }

    .info-item .info-text {
        color: #475569;
    }

    .info-item .status-positive {
        color: #16a34a;
        font-weight: 600;
    }

    .info-item .status-negative {
        color: #dc2626;
        font-weight: 600;
    }

    .quantity-selector {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin: 0;
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        padding: 0.75rem 1rem;
        width: fit-content;
    }

    .quantity-btn {
        width: 42px;
        height: 42px;
        border: none;
        background: #2563eb;
        color: white;
        border-radius: 12px;
        font-size: 1.2rem;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.15s ease, box-shadow 0.15s ease, background 0.15s ease;
    }

    .quantity-btn:hover {
        background: #1d4ed8;
        transform: translateY(-1px);
        box-shadow: 0 10px 20px rgba(37, 99, 235, 0.25);
    }

    .quantity-input {
        width: 70px;
        text-align: center;
        font-size: 1.25rem;
        font-weight: 600;
        border: none;
        background: transparent;
        color: #0f172a;
    }

    .detail-actions {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin-top: 1.5rem;
    }

    .btn-add-large {
        background: #2563eb;
        color: white;
        border: none;
        padding: 0.95rem 1.5rem;
        border-radius: 16px;
        font-size: 1.05rem;
        font-weight: 600;
        width: 100%;
        box-shadow: 0 18px 40px rgba(37, 99, 235, 0.25);
        transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
    }

    .btn-add-large:hover {
        background: #1d4ed8;
        transform: translateY(-2px);
        box-shadow: 0 24px 48px rgba(37, 99, 235, 0.28);
    }

    .btn-buy-now {
        background: #0f172a;
        border: none;
        color: white;
        padding: 0.95rem 1.5rem;
        border-radius: 16px;
        font-size: 1.05rem;
        font-weight: 600;
        width: 100%;
        transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
    }

    .btn-buy-now:hover {
        background: #111827;
        transform: translateY(-2px);
        box-shadow: 0 18px 40px rgba(15, 23, 42, 0.25);
    }

    .detail-extra {
        margin-top: 2.5rem;
    }

    .description-section {
        padding: 1.75rem;
        background: #f8fafc;
        border-radius: 18px;
        border: 1px solid #e2e8f0;
        box-shadow: 0 10px 28px rgba(15, 23, 42, 0.06);
        height: 100%;
    }

    .description-section h3 {
        font-size: 1.25rem;
        font-weight: 700;
        color: #0f172a;
        margin-bottom: 1rem;
    }

    .description-section p {
        color: #475569;
        line-height: 1.7;
        margin-bottom: 0;
        white-space: pre-line;
    }

    .combo-items-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        gap: 1rem;
    }

    .combo-item-card {
        display: flex;
        align-items: center;
        gap: 0.85rem;
        padding: 0.85rem 1rem;
        background: #ffffff;
        border-radius: 16px;
        border: 1px solid #e2e8f0;
        box-shadow: 0 8px 20px rgba(15, 23, 42, 0.05);
        text-decoration: none;
        color: inherit;
        transition: transform 0.2s ease, box-shadow 0.2s ease, border-color 0.2s ease;
    }

    .combo-item-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 14px 32px rgba(15, 23, 42, 0.12);
        border-color: #bfdbfe;
        text-decoration: none;
    }

    .combo-item-card img {
        width: 56px;
        height: 56px;
        border-radius: 14px;
        object-fit: cover;
        box-shadow: 0 10px 24px rgba(15, 23, 42, 0.12);
    }

    .combo-item-card strong {
        color: #0f172a;
        font-size: 0.95rem;
        display: block;
    }

    .combo-item-card span {
        color: #64748b;
        font-size: 0.85rem;
    }

    @@media (max-width: 991.98px) {
        .detail-container {
            padding: 2rem;
        }

        .combo-content {
            padding-left: 0;
        }
    }

    @@media (max-width: 767.98px) {
        .detail-container {
            padding: 1.5rem;
        }

        .product-title {
            font-size: 1.75rem;
        }

        .quantity-selector {
            width: 100%;
            justify-content: space-between;
        }

        .detail-actions {
            width: 100%;
        }
    }

    .ratings-section {
        margin-top: 3rem;
        padding-top: 2.5rem;
        border-top: 2px solid #e2e8f0;
        background: linear-gradient(to bottom, #fafbfc 0%, #ffffff 100%);
        border-radius: 24px;
        padding: 2.5rem;
        margin-left: -1.5rem;
        margin-right: -1.5rem;
    }

    .ratings-header {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin-bottom: 2rem;
        padding-bottom: 1.5rem;
        border-bottom: 2px solid #e2e8f0;
    }

    .ratings-header h3 {
        font-weight: 800;
        color: #0f172a;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        font-size: 1.75rem;
    }

    .ratings-header h3 i {
        color: #fbbf24;
        font-size: 1.5rem;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.1); }
    }

    .ratings-header .ratings-count {
        font-size: 1rem;
        color: #64748b;
        font-weight: 600;
        background: #f1f5f9;
        padding: 0.5rem 1rem;
        border-radius: 999px;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .my-rating-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        color: white;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        position: relative;
        overflow: hidden;
    }

    .my-rating-card::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
        pointer-events: none;
    }

    .my-rating-card .rating-card-author {
        color: white;
        font-weight: 700;
        font-size: 1.1rem;
    }

    .my-rating-card .rating-card-date {
        color: rgba(255, 255, 255, 0.8);
    }

    .my-rating-card .rating-card-comment {
        color: rgba(255, 255, 255, 0.95);
    }

    .my-rating-card .badge {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .my-rating-card .card-actions {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
        margin-top: 1rem;
    }

    .rating-filters {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
        margin-bottom: 1.75rem;
    }

    .rating-filter-btn {
        border: 2px solid #e2e8f0;
        border-radius: 999px;
        padding: 0.6rem 1.25rem;
        font-weight: 600;
        color: #475569;
        background: white;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
    }

    .rating-filter-btn:hover {
        border-color: #667eea;
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
        color: #667eea;
        box-shadow: 0 6px 16px rgba(102, 126, 234, 0.2);
        transform: translateY(-2px);
    }

    .rating-filter-btn.active {
        border-color: transparent;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
    }

    .ratings-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .rating-card {
        border: 1px solid #e2e8f0;
        border-radius: 20px;
        padding: 1.75rem;
        background: white;
        box-shadow: 0 4px 20px rgba(15, 23, 42, 0.06);
        transition: all 0.3s ease;
        position: relative;
    }

    .rating-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 30px rgba(15, 23, 42, 0.12);
        border-color: #cbd5e1;
    }

    .rating-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 4px;
        height: 100%;
        background: linear-gradient(to bottom, #667eea 0%, #764ba2 100%);
        border-radius: 20px 0 0 20px;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .rating-card:hover::before {
        opacity: 1;
    }

    .rating-card-self {
        border-color: #667eea;
        box-shadow: 0 8px 30px rgba(102, 126, 234, 0.15);
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
    }

    .rating-card-self::before {
        opacity: 1;
    }

    .rating-card-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .rating-card-author {
        font-weight: 600;
        color: #0f172a;
    }

    .rating-card-stars {
        display: flex;
        gap: 0.25rem;
        font-size: 1.15rem;
    }

    .rating-card-stars i {
        color: #fbbf24;
        filter: drop-shadow(0 2px 4px rgba(251, 191, 36, 0.3));
        transition: transform 0.2s ease;
    }

    .rating-card:hover .rating-card-stars i {
        transform: scale(1.1);
    }

    .rating-card-date {
        color: #94a3b8;
        font-size: 0.85rem;
    }

    .rating-card-comment {
        color: #475569;
        margin-bottom: 0;
        white-space: pre-wrap;
    }

    .rating-empty-state {
        text-align: center;
        padding: 2.5rem 1rem;
        border: 1px dashed #cbd5f5;
        border-radius: 18px;
        background: #f8fafc;
        color: #64748b;
    }

    .rating-empty-state i {
        font-size: 2rem;
        margin-bottom: 1rem;
        color: #94a3b8;
    }
</style>

<div class="combo-detail-wrapper">
    <div class="container">
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["Success"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div class="detail-container">
            @Html.AntiForgeryToken()
            <div class="row g-lg-5 align-items-start">
                <div class="col-lg-6 mb-4 mb-lg-0">
                    <div class="combo-media">
                        <img src="@combo.ImageUrl" class="combo-detail-image" alt="@combo.Name" />
                        @if (combo.DiscountType == Assignment.Enums.DiscountType.Percent && combo.Discount.HasValue)
                        {
                            <span class="discount-chip">-@combo.Discount%</span>
                        }
                        else if (combo.DiscountType == Assignment.Enums.DiscountType.FixedAmount && combo.Discount.HasValue)
                        {
                            <span class="discount-chip">Ưu đãi</span>
                        }
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="combo-content">
                        <span class="combo-badge"><i class="fas fa-gift"></i> Combo đặc biệt</span>

                        <h1 class="product-title">@combo.Name</h1>

                        <div class="rating-large">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= Math.Floor(combo.AverageEvaluate))
                                {
                                    <i class="fas fa-star"></i>
                                }
                                else if (i - 0.5 <= combo.AverageEvaluate)
                                {
                                    <i class="fas fa-star-half-alt"></i>
                                }
                                else
                                {
                                    <i class="far fa-star"></i>
                                }
                            }
                            <span>@combo.AverageEvaluate.ToString("0.0") (@combo.TotalEvaluate đánh giá)</span>
                        </div>

                        <div class="detail-tags">
                            @if (combo.ComboItems != null && combo.ComboItems.Any())
                            {
                                <span class="detail-tag detail-tag-collection"><i class="fas fa-utensils"></i> @combo.ComboItems.Count() món</span>
                            }
                            <span class="detail-tag detail-tag-highlight"><i class="fas fa-shield-alt"></i> Giao nhanh</span>
                        </div>

                        @{
                            var hasPercentDiscount = combo.DiscountType == Assignment.Enums.DiscountType.Percent && combo.Discount.HasValue;
                            var hasFixedDiscount = combo.DiscountType == Assignment.Enums.DiscountType.FixedAmount && combo.Discount.HasValue;
                            var finalPrice = PriceCalculator.GetComboFinalPrice(combo);
                            var savings = Math.Max(combo.Price - finalPrice, 0);
                        }

                        <div class="price-section">
                            @if (!combo.Discount.HasValue || combo.DiscountType == Assignment.Enums.DiscountType.None)
                            {
                                <div class="final-price">@combo.Price.ToString("N0") ₫</div>
                            }
                            else if (hasPercentDiscount)
                            {
                                <div class="d-flex align-items-center gap-2 mb-2">
                                    <span class="badge-large">-@combo.Discount%</span>
                                    <span class="text-muted small">Ưu đãi theo %</span>
                                </div>
                                <div class="original-price mb-2">@combo.Price.ToString("N0") ₫</div>
                                <div class="final-price">@finalPrice.ToString("N0") ₫</div>
                                @if (savings > 0)
                                {
                                    <div class="price-subtext">
                                        <i class="fas fa-tag me-1"></i> Tiết kiệm @savings.ToString("N0") ₫
                                    </div>
                                }
                            }
                            else if (hasFixedDiscount)
                            {
                                <div class="d-flex align-items-center gap-2 mb-2">
                                    <span class="badge-large">Giá đặc biệt</span>
                                    <span class="text-muted small">Ưu đãi độc quyền</span>
                                </div>
                                <div class="original-price mb-2">@combo.Price.ToString("N0") ₫</div>
                                <div class="final-price">@finalPrice.ToString("N0") ₫</div>
                                @if (savings > 0)
                                {
                                    <div class="price-subtext">
                                        <i class="fas fa-tag me-1"></i> Tiết kiệm @savings.ToString("N0") ₫
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="final-price">@finalPrice.ToString("N0") ₫</div>
                            }
                        </div>

                        <div class="detail-meta-grid">
                            <div class="info-item">
                                <i class="fas fa-box"></i>
                                <div>
                                    <strong>Tình trạng</strong>
                                    @if (combo.Stock > 0)
                                    {
                                        <span class="status-positive">Còn hàng (@combo.Stock combo)</span>
                                    }
                                    else
                                    {
                                        <span class="status-negative">Hết hàng</span>
                                    }
                                </div>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-chart-line"></i>
                                <div>
                                    <strong>Đã bán</strong>
                                    <span class="info-text">@combo.Sold combo</span>
                                </div>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-tag"></i>
                                <div>
                                    <strong>Ưu đãi</strong>
                                    @if (savings > 0)
                                    {
                                        <span class="info-text">Tiết kiệm @savings.ToString("N0") ₫</span>
                                    }
                                    else
                                    {
                                        <span class="info-text">Giá tốt mỗi ngày</span>
                                    }
                                </div>
                            </div>
                            @if (combo.ComboItems != null && combo.ComboItems.Any())
                            {
                                <div class="info-item">
                                    <i class="fas fa-utensils"></i>
                                    <div>
                                        <strong>Bao gồm</strong>
                                        <span class="info-text">@combo.ComboItems.Count() món</span>
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="detail-actions">
                            <div class="quantity-selector">
                                <button type="button" class="quantity-btn" onclick="decreaseQuantity()">-</button>
                                <input type="number" id="quantity" class="quantity-input" value="1" min="1" max="@combo.Stock" />
                                <button type="button" class="quantity-btn" onclick="increaseQuantity()">+</button>
                            </div>

                            <button type="button" class="btn-add-large" onclick="addToCartWithQuantity()" @(combo.Stock <= 0 ? "disabled" : "")>
                                <i class="fas fa-shopping-cart me-2"></i>
                                Thêm vào giỏ hàng
                            </button>
                            <button type="button" class="btn-buy-now" onclick="buyNowCombo()" @(combo.Stock <= 0 ? "disabled" : "")>
                                <i class="fas fa-bolt me-2"></i>Mua ngay
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="detail-extra row g-4">
                <div class="col-lg-6">
                    <div class="description-section h-100">
                        <h3><i class="fas fa-align-left me-2"></i>Mô tả combo</h3>
                        <p>@combo.Description</p>
                    </div>
                </div>
                @if (combo.ComboItems != null && combo.ComboItems.Any())
                {
                    <div class="col-lg-6">
                        <div class="description-section h-100">
                            <h3><i class="fas fa-list-check me-2"></i>Sản phẩm trong combo</h3>
                            <div class="combo-items-grid">
                                @foreach (var item in combo.ComboItems)
                                {
                                    var product = item.Product;

                                    if (product != null)
                                    {
                                        <a class="combo-item-card" asp-controller="Home" asp-action="ProductDetail" asp-route-id="@product.Id">
                                            <img src="@(product.ProductImageUrl ?? "/images/no-image.jpg")" alt="@product.Name" />
                                            <div>
                                                <strong>@product.Name</strong>
                                                <span>x@item.Quantity</span>
                                            </div>
                                        </a>
                                    }
                                    else
                                    {
                                        <div class="combo-item-card">
                                            <img src="/images/no-image.jpg" alt="Sản phẩm" />
                                            <div>
                                                <strong>Sản phẩm</strong>
                                                <span>x@item.Quantity</span>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="ratings-section" id="ratings-section">
                @{
                    var ratingCounts = Model.RatingCounts ?? new Dictionary<int, int>();
                    var totalRatings = ratingCounts.Values.Sum();
                    var selectedRating = Model.SelectedRatingFilter;
                    var hasRatings = totalRatings > 0;
                }

                <div class="ratings-header">
                    <h3><i class="fas fa-comments text-primary"></i>Đánh giá từ khách hàng</h3>
                    <div class="ratings-count">
                        @if (hasRatings)
                        {
                            <span>@totalRatings đánh giá đã được gửi cho combo này.</span>
                        }
                        else
                        {
                            <span>Chưa có đánh giá nào cho combo này.</span>
                        }
                    </div>
                </div>

                @if (Model.UserRating != null)
                {
                    <div class="my-rating-card">
                        <div class="d-flex flex-wrap justify-content-between align-items-start gap-3">
                            <div>
                                <div class="d-flex align-items-center gap-2">
                                    <span class="badge bg-primary">Đánh giá của bạn</span>
                                    <span class="rating-card-author">@Model.UserRating.DisplayName</span>
                                </div>
                                <div class="rating-card-stars mt-2">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= Model.UserRating.Score)
                                        {
                                            <i class="fas fa-star"></i>
                                        }
                                        else
                                        {
                                            <i class="far fa-star"></i>
                                        }
                                    }
                                </div>
                            </div>
                            <div class="text-end">
                                <div class="rating-card-date">@((Model.UserRating.UpdatedAt ?? Model.UserRating.CreatedAt).ToString("dd/MM/yyyy HH:mm"))</div>
                                @if (Model.UserRating.IsEdited)
                                {
                                    <span class="badge bg-warning text-dark mt-2">Đã chỉnh sửa</span>
                                }
                            </div>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(Model.UserRating.Comment))
                        {
                            <p class="rating-card-comment mt-3">@Model.UserRating.Comment</p>
                        }
                        else
                        {
                            <p class="rating-card-comment mt-3 text-muted fst-italic">Bạn chưa để lại nhận xét.</p>
                        }
                        <div class="card-actions">
                            <button type="button" class="btn btn-outline-primary btn-sm" data-bs-toggle="modal" data-bs-target="#comboRatingModal">
                                <i class="fas fa-edit me-1"></i>Chỉnh sửa đánh giá
                            </button>
                            @if (Model.CanDeleteRating)
                            {
                                <form asp-controller="Ratings" asp-action="Delete" method="post" class="d-inline" onsubmit="return confirm('Bạn có chắc muốn xóa đánh giá này?');">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@Model.UserRating.Id" />
                                    <input type="hidden" name="returnUrl" value="@returnUrl" />
                                    <button type="submit" class="btn btn-outline-danger btn-sm">
                                        <i class="fas fa-trash-alt me-1"></i>Xóa đánh giá
                                    </button>
                                </form>
                            }
                        </div>
                    </div>
                }
                else if (Model.CanRate && Model.OrderItemIdForRating.HasValue)
                {
                    <div class="my-rating-card">
                        <div class="d-flex flex-wrap justify-content-between align-items-center gap-3">
                            <div>
                                <h6 class="mb-1 text-primary fw-semibold"><i class="fas fa-pen-nib me-2"></i>Chia sẻ cảm nhận của bạn</h6>
                                <p class="mb-0 text-muted">@(!hasRatings ? "Hãy là người đầu tiên đánh giá combo này." : "Đánh giá của bạn sẽ giúp khách hàng khác lựa chọn dễ dàng hơn.")</p>
                            </div>
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#comboRatingModal">
                                <i class="fas fa-star me-2"></i>Viết đánh giá
                            </button>
                        </div>
                    </div>
                }

                @if (hasRatings)
                {
                    <div class="rating-filters">
                        <a href="@Url.Action("ComboDetail", "Home", new { id = combo.Id })" class="rating-filter-btn@(selectedRating.HasValue ? string.Empty : " active")">
                            <i class="fas fa-layer-group"></i>
                            Tất cả (@totalRatings)
                        </a>
                        @for (int score = 5; score >= 1; score--)
                        {
                            var count = ratingCounts.ContainsKey(score) ? ratingCounts[score] : 0;
                            var filterUrl = Url.Action("ComboDetail", "Home", new { id = combo.Id, rating = score });
                            <a href="@filterUrl" class="rating-filter-btn@(selectedRating == score ? " active" : string.Empty)">
                                <i class="fas fa-star"></i>
                                @score sao (@count)
                            </a>
                        }
                    </div>
                }

                @if (Model.Ratings != null && Model.Ratings.Any())
                {
                    <div class="ratings-list">
                        @foreach (var ratingItem in Model.Ratings)
                        {
                            <div class="rating-card@(ratingItem.IsCurrentUser ? " rating-card-self" : string.Empty)">
                                <div class="rating-card-header">
                                    <div>
                                        <div class="d-flex align-items-center gap-2">
                                            @if (ratingItem.IsCurrentUser)
                                            {
                                                <span class="badge bg-primary">Bạn</span>
                                            }
                                            <span class="rating-card-author">@ratingItem.DisplayName</span>
                                        </div>
                                        <div class="rating-card-stars mt-2">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                if (i <= ratingItem.Score)
                                                {
                                                    <i class="fas fa-star"></i>
                                                }
                                                else
                                                {
                                                    <i class="far fa-star"></i>
                                                }
                                            }
                                        </div>
                                    </div>
                                    <div class="rating-card-date text-end">
                                        @((ratingItem.UpdatedAt ?? ratingItem.CreatedAt).ToString("dd/MM/yyyy HH:mm"))
                                        @if (ratingItem.IsEdited)
                                        {
                                            <div><span class="badge bg-warning text-dark mt-2">Đã chỉnh sửa</span></div>
                                        }
                                    </div>
                                </div>
                                @if (!string.IsNullOrWhiteSpace(ratingItem.Comment))
                                {
                                    <p class="rating-card-comment">@ratingItem.Comment</p>
                                }
                                else
                                {
                                    <p class="rating-card-comment text-muted fst-italic">Người dùng không để lại nhận xét.</p>
                                }
                            </div>
                        }
                    </div>
                }
                else if (hasRatings)
                {
                    <div class="rating-empty-state">
                        <i class="fas fa-filter-circle-xmark"></i>
                        <p>Không có đánh giá phù hợp với bộ lọc hiện tại.</p>
                    </div>
                }
                else
                {
                    <div class="rating-empty-state">
                        <i class="fas fa-comment-slash"></i>
                        <p>
                            Chưa có đánh giá nào cho combo này.
                            @if (Model.CanRate && Model.OrderItemIdForRating.HasValue)
                            {
                                <br />
                                <span>Hãy là người đầu tiên chia sẻ trải nghiệm của bạn!</span>
                            }
                        </p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (Model.CanRate && Model.OrderItemIdForRating.HasValue)
{
    <div class="modal fade" id="comboRatingModal" tabindex="-1" aria-labelledby="comboRatingModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <form asp-controller="Ratings" asp-action="Submit" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="OrderItemId" value="@Model.OrderItemIdForRating" />
                    <input type="hidden" name="ReturnUrl" value="@returnUrl" />
                    <div class="modal-header">
                        <h5 class="modal-title" id="comboRatingModalLabel">@((Model.UserRating != null) ? "Cập nhật đánh giá" : "Đánh giá combo")</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Điểm đánh giá</label>
                            <div class="rating-stars" id="comboRatingStars" role="radiogroup" aria-label="Điểm đánh giá">
                                @for (var score = 5; score >= 1; score--)
                                {
                                    var id = $"combo-rating-star{score}";
                                    var isChecked = Model.UserRating?.Score == score;
                                    var title = score switch
                                    {
                                        5 => "Tuyệt vời!",
                                        4 => "Rất tốt!",
                                        3 => "Tốt",
                                        2 => "Tạm ổn",
                                        1 => "Không hài lòng",
                                        _ => $"{score} sao"
                                    };
                                    <input type="radio" id="@id" name="Score" value="@score" @(isChecked ? "checked" : null) @(score == 5 ? "required" : null) />
                                    <label for="@id" title="@title" data-star="@score">
                                        <svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512" aria-hidden="true" focusable="false">
                                            <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"></path>
                                        </svg>
                                        <span class="visually-hidden">@score sao</span>
                                    </label>
                                }
                            </div>
                            <div class="form-text rating-hint" id="comboRatingHint" aria-live="polite">Chọn số sao tương ứng với trải nghiệm của bạn.</div>
                        </div>
                        <div class="mb-3">
                            <label for="combo-rating-comment" class="form-label">Nhận xét</label>
                            <textarea class="form-control" id="combo-rating-comment" name="Comment" rows="3" maxlength="2000" placeholder="Chia sẻ cảm nhận của bạn...">@Model.UserRating?.Comment</textarea>
                            <div class="form-text">Tối đa 2000 ký tự.</div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-primary">@((Model.UserRating != null) ? "Cập nhật" : "Gửi đánh giá")</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        const maxStock = @combo.Stock;
        const loginUrl = '@Url.Page("/Account/Login", new { area = "Identity" })';

        function increaseQuantity() {
            const input = document.getElementById('quantity');
            const currentValue = parseInt(input.value);
            if (currentValue < maxStock) {
                input.value = currentValue + 1;
            }
        }

        function decreaseQuantity() {
            const input = document.getElementById('quantity');
            const currentValue = parseInt(input.value);
            if (currentValue > 1) {
                input.value = currentValue - 1;
            }
        }

        function addToCartWithQuantity() {
            const quantity = parseInt(document.getElementById('quantity').value);
            const token = $('input[name="__RequestVerificationToken"]').val();

            $.ajax({
                url: '@Url.Action("AddCombo", "Cart")',
                type: 'POST',
                data: {
                    __RequestVerificationToken: token,
                    comboId: @combo.Id,
                    quantity: quantity
                },
                success: function() {
                    showNotification('Đã thêm combo vào giỏ hàng!', 'success');
                    $.get('@Url.Action("GetCount", "Cart")', function(data) {
                        updateCartCount(data.count);
                    });
                },
                error: function() {
                    showNotification('Có lỗi xảy ra, vui lòng thử lại.', 'error');
                }
            });
        }

        function buyNowCombo() {
            const quantity = parseInt(document.getElementById('quantity').value);
            const token = $('input[name="__RequestVerificationToken"]').val();

            $.ajax({
                url: '@Url.Action("BuyNowCombo", "Cart")',
                type: 'POST',
                data: {
                    __RequestVerificationToken: token,
                    comboId: @combo.Id,
                    quantity: quantity
                },
                success: function (response) {
                    if (response && response.success && response.redirectUrl) {
                        window.location.href = response.redirectUrl;
                        return;
                    }

                    if (response && response.error) {
                        showNotification(response.error, 'error');
                    } else {
                        showNotification('Không thể xử lý yêu cầu. Vui lòng thử lại.', 'error');
                    }
                },
                error: function (xhr) {
                    if (xhr && xhr.status === 401 && loginUrl) {
                        window.location.href = loginUrl;
                        return;
                    }

                    showNotification('Có lỗi xảy ra, vui lòng thử lại.', 'error');
                }
            });
        }

        function updateCartCount(count) {
            $('#cart-count').text(count).show();
        }

        function showNotification(message, type) {
            const bgColor = type === 'success' ? '#4caf50' : '#f44336';
            const notification = $('<div>')
                .css({
                    position: 'fixed',
                    top: '20px',
                    right: '20px',
                    background: bgColor,
                    color: 'white',
                    padding: '15px 25px',
                    borderRadius: '5px',
                    zIndex: 9999,
                    boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
                })
                .text(message)
                .appendTo('body');

            setTimeout(() => notification.fadeOut(() => notification.remove()), 3000);
        }

        function setupRatingStars(containerId, hintId) {
            const container = document.getElementById(containerId);
            const hint = document.getElementById(hintId);

            if (!container || !hint) {
                return;
            }

            const scoreMessages = {
                1: 'Không hài lòng – cần cải thiện.',
                2: 'Tạm ổn – còn nhiều điểm chưa tốt.',
                3: 'Tốt – đáp ứng kỳ vọng cơ bản.',
                4: 'Rất tốt – trải nghiệm hài lòng.',
                5: 'Tuyệt vời – vượt mong đợi của bạn!'
            };

            const defaultHint = hint.textContent.trim();
            let lockedScore = null;

            const applyScore = (score) => {
                const message = scoreMessages[score] ?? `${score} sao`;
                hint.textContent = message;
                container.dataset.currentScore = String(score);
            };

            const resetScore = () => {
                if (lockedScore) {
                    applyScore(lockedScore);
                    hint.classList.add('is-active');
                } else {
                    hint.textContent = defaultHint;
                    container.dataset.currentScore = '';
                    hint.classList.remove('is-active');
                }
            };

            const inputs = container.querySelectorAll('input[type="radio"]');

            inputs.forEach((input) => {
                const score = parseInt(input.value, 10);

                if (input.checked) {
                    lockedScore = score;
                }

                input.addEventListener('change', () => {
                    lockedScore = score;
                    applyScore(score);
                    hint.classList.add('is-active');
                });

                input.addEventListener('focus', () => applyScore(score));

                const label = container.querySelector(`label[for="${input.id}"]`);
                if (label) {
                    label.addEventListener('mouseenter', () => applyScore(score));
                    label.addEventListener('mouseleave', resetScore);
                }
            });

            container.addEventListener('mouseleave', resetScore);
            container.addEventListener('focusout', (event) => {
                if (!container.contains(event.relatedTarget)) {
                    resetScore();
                }
            });

            resetScore();
        }

        setupRatingStars('comboRatingStars', 'comboRatingHint');
    </script>
}
