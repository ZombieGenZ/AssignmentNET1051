@model Assignment.Models.HomeViewModel
@using Microsoft.AspNetCore.Routing
@using System.Globalization
@using System.Linq
@using System.Collections.Generic

@{
    ViewData["Title"] = "Trang ch·ªß";
    var filter = Model.Filter ?? new Assignment.ViewModels.HomeFilterViewModel();
    var activeSegment = filter.Segment ?? "all";
    var activeCategoryId = filter.CategoryId;
    var showCombos = activeSegment == "all" || activeSegment == "combo";
    var showProducts = activeSegment == "all" || activeSegment == "category";
    var advancedOpen = filter.HasAdvancedFilters;

    var baseRoute = new RouteValueDictionary();
    if (!string.IsNullOrWhiteSpace(filter.SearchTerm))
    {
        baseRoute["SearchTerm"] = filter.SearchTerm;
    }
    if (filter.MinPrice.HasValue)
    {
        baseRoute["MinPrice"] = filter.MinPrice.Value.ToString(CultureInfo.InvariantCulture);
    }
    if (filter.MaxPrice.HasValue)
    {
        baseRoute["MaxPrice"] = filter.MaxPrice.Value.ToString(CultureInfo.InvariantCulture);
    }
    if (filter.IsSpicy.HasValue)
    {
        baseRoute["IsSpicy"] = filter.IsSpicy.Value.ToString().ToLowerInvariant();
    }
    if (filter.IsVegetarian.HasValue)
    {
        baseRoute["IsVegetarian"] = filter.IsVegetarian.Value.ToString().ToLowerInvariant();
    }
    if (filter.OnlyDiscounted)
    {
        baseRoute["OnlyDiscounted"] = "true";
    }

    Dictionary<string, string> CreateRoute(string segment, long? categoryId = null)
    {
        var route = baseRoute.ToDictionary(
            kvp => kvp.Key,
            kvp => System.Convert.ToString(kvp.Value, CultureInfo.InvariantCulture) ?? string.Empty);

        route["Segment"] = segment;

        if (categoryId.HasValue)
        {
            route["CategoryId"] = categoryId.Value.ToString(CultureInfo.InvariantCulture);
        }
        else
        {
            route.Remove("CategoryId");
        }

        return route;
    }

    var allRoute = CreateRoute("all");
    var comboRoute = CreateRoute("combo");

    var categoryRoutes = Model.Categories
        .Select(category => new
        {
            category,
            route = CreateRoute("category", category.Id)
        })
        .ToList();
}

<link href="~/css/home.css" rel="stylesheet" />

<div class="container mt-4">
    @Html.AntiForgeryToken()

    <div class="home-search shadow-sm">
        <form method="get" id="home-search-form">
            <div class="search-basic">
                <div class="input-group search-input">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text"
                           class="form-control"
                           name="SearchTerm"
                           value="@filter.SearchTerm"
                           placeholder="T√¨m ki·∫øm m√≥n ƒÉn, combo, danh m·ª•c..." />
                    <input type="hidden" name="Segment" value="@activeSegment" />
                    @if (activeSegment == "category" && activeCategoryId.HasValue)
                    {
                        <input type="hidden" name="CategoryId" value="@activeCategoryId" />
                    }
                </div>
                <div class="d-flex gap-2 align-items-center">
                    <button type="submit" class="btn btn-primary search-submit">T√¨m ki·∫øm</button>
                    <button class="btn btn-outline-secondary advanced-toggle"
                            type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#advanced-search"
                            aria-expanded="@advancedOpen.ToString().ToLowerInvariant()"
                            aria-controls="advanced-search">
                        <i class="fas fa-sliders-h me-1"></i> T√¨m ki·∫øm n√¢ng cao
                    </button>
                    <button type="button" class="btn btn-outline-secondary" id="resetFiltersBtn">
                        <i class="fas fa-rotate-left me-1"></i> ƒê·∫∑t l·∫°i b·ªô l·ªçc
                    </button>
                </div>
            </div>

            <div class="collapse advanced-search @((advancedOpen ? "show" : string.Empty))" id="advanced-search">
                <div class="row g-3 mt-0">
                    <div class="col-12 col-md-6 col-lg-3">
                        <label class="form-label" for="min-price">Gi√° t·ª´</label>
                        <div class="input-group">
                            <span class="input-group-text">‚Ç´</span>
                            <input type="number"
                                   class="form-control"
                                   id="min-price"
                                   name="MinPrice"
                                   min="0"
                                   step="1000"
                                   value="@(filter.MinPrice?.ToString(CultureInfo.InvariantCulture))"
                                   placeholder="0" />
                        </div>
                    </div>
                    <div class="col-12 col-md-6 col-lg-3">
                        <label class="form-label" for="max-price">Gi√° ƒë·∫øn</label>
                        <div class="input-group">
                            <span class="input-group-text">‚Ç´</span>
                            <input type="number"
                                   class="form-control"
                                   id="max-price"
                                   name="MaxPrice"
                                   min="0"
                                   step="1000"
                                   value="@(filter.MaxPrice?.ToString(CultureInfo.InvariantCulture))"
                                   placeholder="Kh√¥ng gi·ªõi h·∫°n" />
                        </div>
                    </div>
                    <div class="col-12 col-md-6 col-lg-3">
                        <label class="form-label" for="spicy-filter">ƒê·ªô cay</label>
                        <select class="form-select" id="spicy-filter" name="IsSpicy">
                            <option value="" selected="@(!filter.IsSpicy.HasValue)">T·∫•t c·∫£</option>
                            <option value="true" selected="@(filter.IsSpicy == true)">Ch·ªâ m√≥n cay</option>
                            <option value="false" selected="@(filter.IsSpicy == false)">Kh√¥ng cay</option>
                        </select>
                    </div>
                    <div class="col-12 col-md-6 col-lg-3">
                        <label class="form-label" for="vegetarian-filter">Ch·∫ø ƒë·ªô ƒÉn</label>
                        <select class="form-select" id="vegetarian-filter" name="IsVegetarian">
                            <option value="" selected="@(!filter.IsVegetarian.HasValue)">T·∫•t c·∫£</option>
                            <option value="true" selected="@(filter.IsVegetarian == true)">ƒê·ªì chay</option>
                            <option value="false" selected="@(filter.IsVegetarian == false)">Kh√¥ng chay</option>
                        </select>
                    </div>
                    <div class="col-12">
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="checkbox"
                                   value="true"
                                   id="discount-filter"
                                   name="OnlyDiscounted"
                                   @if (filter.OnlyDiscounted)
                                   {
                                       <text>checked="checked"</text>
                                   } />
                            <label class="form-check-label" for="discount-filter">
                                Ch·ªâ hi·ªÉn th·ªã ∆∞u ƒë√£i/khuy·∫øn m√£i
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <div class="category-tabs-wrapper">
        <ul class="nav category-tabs" role="tablist">
            <li class="nav-item" role="presentation">
                <a class="nav-link @(activeSegment == "all" ? "active" : string.Empty)"
                   asp-action="Index"
                   asp-all-route-data="@allRoute">
                    T·∫•t c·∫£
                </a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link @(activeSegment == "combo" ? "active" : string.Empty)"
                   asp-action="Index"
                   asp-all-route-data="@comboRoute">
                    Combo
                </a>
            </li>
            @foreach (var categoryRoute in categoryRoutes)
            {
                <li class="nav-item" role="presentation">
                    <a class="nav-link @((activeSegment == "category" && activeCategoryId == categoryRoute.category.Id) ? "active" : string.Empty)"
                       asp-action="Index"
                       asp-all-route-data="@categoryRoute.route">
                        @categoryRoute.category.Name
                    </a>
                </li>
            }
        </ul>
    </div>

    @if (showCombos)
    {
        <section class="home-section">
            <div class="section-header">
                <h2 class="section-title">üéÅ Combo ƒê·∫∑c Bi·ªát</h2>
                <span class="result-pill">@Model.Combos.Count() m·ª•c</span>
            </div>

            @if (Model.Combos.Any())
            {
                <div class="row g-4">
                    @foreach (var combo in Model.Combos)
                    {
                        <div class="col-md-4 col-lg-3">
                            <div class="product-card">
                                <div class="position-relative">
                                    <img src="@combo.ImageUrl" class="product-image" alt="@combo.Name" />
                                    @if (combo.DiscountType == Assignment.Enums.DiscountType.Percent && combo.Discount.HasValue)
                                    {
                                        <span class="badge-discount">-@combo.Discount%</span>
                                    }
                                </div>
                                <div class="product-info">
                                    <h5 class="product-name">@combo.Name</h5>

                                    <div class="product-badges">
                                        @if ((combo.ComboItems ?? Enumerable.Empty<Assignment.Models.ComboItem>()).Any(ci => ci.Product?.IsSpicy == true))
                                        {
                                            <span class="badge-spicy">üå∂Ô∏è Cay</span>
                                        }
                                        @if ((combo.ComboItems ?? Enumerable.Empty<Assignment.Models.ComboItem>()).All(ci => ci.Product?.IsVegetarian == true))
                                        {
                                            <span class="badge-vegetarian">ü•ó Chay</span>
                                        }
                                    </div>

                                    <div class="rating">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= Math.Floor(combo.AverageEvaluate))
                                            {
                                                <i class="fas fa-star"></i>
                                            }
                                            else if (i - 0.5 <= combo.AverageEvaluate)
                                            {
                                                <i class="fas fa-star-half-alt"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-star"></i>
                                            }
                                        }
                                        <small>(@combo.TotalEvaluate)</small>
                                    </div>

                                    <div class="mb-3">
                                        @{ var finalPrice = PriceCalculator.GetComboFinalPrice(combo); }
                                        @if (combo.DiscountType == Assignment.Enums.DiscountType.Percent && combo.Discount.HasValue)
                                        {
                                            <div>
                                                <span class="original-price">@combo.Price.ToString("N0") ‚Ç´</span>
                                            </div>
                                            <span class="final-price">@finalPrice.ToString("N0") ‚Ç´</span>
                                        }
                                        else
                                        {
                                            <span class="final-price">@finalPrice.ToString("N0") ‚Ç´</span>
                                        }
                                    </div>

                                    <div class="d-flex gap-2">
                                        <a href="@Url.Action("ComboDetail", "Home", new { id = combo.Id })"
                                           class="btn btn-outline-primary flex-grow-1">Chi ti·∫øt</a>
                                        <button class="btn btn-add-cart" data-id="@combo.Id" data-type="combo">
                                            <i class="fas fa-shopping-cart"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    Kh√¥ng t√¨m th·∫•y combo ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán hi·ªán t·∫°i.
                </div>
            }
        </section>
    }

    @if (showProducts)
    {
        <section class="home-section">
            <div class="section-header">
                <h2 class="section-title">
                    üçΩÔ∏è @(activeSegment == "category" && activeCategoryId.HasValue
                        ? Model.Categories.FirstOrDefault(c => c.Id == activeCategoryId)?.Name ?? "Danh m·ª•c"
                        : "Danh m·ª•c m√≥n n·ªïi b·∫≠t")
                </h2>
                <span class="result-pill">@Model.Products.Count() m·ª•c</span>
            </div>

            @if (Model.Products.Any())
            {
                if (activeSegment == "category" && activeCategoryId.HasValue)
                {
                    <div class="row g-4">
                        @foreach (var product in Model.Products)
                        {
                            <div class="col-md-4 col-lg-3">
                                <div class="product-card">
                                    <div class="position-relative">
                                        <img src="@product.ProductImageUrl" class="product-image" alt="@product.Name" />
                                        @if (product.DiscountType != Assignment.Enums.DiscountType.None)
                                        {
                                            <span class="badge-discount">
                                                @if (product.DiscountType == Assignment.Enums.DiscountType.Percent)
                                                {
                                                    @:-@product.Discount%
                                                }
                                                else
                                                {
                                                    @:Gi√° s·ªëc
                                                }
                                            </span>
                                        }
                                    </div>
                                    <div class="product-info">
                                        <h5 class="product-name">@product.Name</h5>

                                        <div class="product-badges">
                                            @if (product.IsSpicy)
                                            {
                                                <span class="badge-spicy">üå∂Ô∏è Cay</span>
                                            }
                                            @if (product.IsVegetarian)
                                            {
                                                <span class="badge-vegetarian">ü•ó Chay</span>
                                            }
                                        </div>

                                        <div class="rating">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                if (i <= Math.Floor(product.AverageEvaluate))
                                                {
                                                    <i class="fas fa-star"></i>
                                                }
                                                else if (i - 0.5 <= product.AverageEvaluate)
                                                {
                                                    <i class="fas fa-star-half-alt"></i>
                                                }
                                                else
                                                {
                                                    <i class="far fa-star"></i>
                                                }
                                            }
                                            <small>(@product.TotalEvaluate)</small>
                                        </div>

                                        <div class="mb-3">
                                            @if (product.DiscountType == Assignment.Enums.DiscountType.None)
                                            {
                                                <span class="final-price">@product.Price.ToString("N0") ‚Ç´</span>
                                            }
                                            else if (product.DiscountType == Assignment.Enums.DiscountType.Percent)
                                            {
                                                <div>
                                                    <span class="original-price">@product.Price.ToString("N0") ‚Ç´</span>
                                                </div>
                                                <span class="final-price">@((product.Price - (product.Price * product.Discount.Value / 100)).ToString("N0")) ‚Ç´</span>
                                            }
                                            else
                                            {
                                                <div>
                                                    <span class="original-price">@product.Price.ToString("N0") ‚Ç´</span>
                                                </div>
                                                <span class="final-price">@product.Discount.Value.ToString("N0") ‚Ç´</span>
                                            }
                                        </div>

                                        <div class="d-flex gap-2">
                                            <a href="@Url.Action("ProductDetail", "Home", new { id = product.Id })"
                                               class="btn btn-outline-primary flex-grow-1">Chi ti·∫øt</a>
                                            <button class="btn btn-add-cart" data-id="@product.Id" data-type="product">
                                                <i class="fas fa-shopping-cart"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    var productsByCategory = Model.Products
                        .GroupBy(p => p.Category)
                        .OrderBy(g => g.Key?.Index ?? 0);

                    foreach (var categoryGroup in productsByCategory)
                    {
                        var category = categoryGroup.Key;
                        <h3 class="sub-section-title">@(category?.Name ?? "Kh√°c")</h3>
                        <div class="row g-4">
                            @foreach (var product in categoryGroup)
                            {
                                <div class="col-md-4 col-lg-3">
                                    <div class="product-card">
                                        <div class="position-relative">
                                            <img src="@product.ProductImageUrl" class="product-image" alt="@product.Name" />
                                            @if (product.DiscountType != Assignment.Enums.DiscountType.None)
                                            {
                                                <span class="badge-discount">
                                                    @if (product.DiscountType == Assignment.Enums.DiscountType.Percent)
                                                    {
                                                        @:-@product.Discount%
                                                    }
                                                    else
                                                    {
                                                        @:Gi√° s·ªëc
                                                    }
                                                </span>
                                            }
                                        </div>
                                        <div class="product-info">
                                            <h5 class="product-name">@product.Name</h5>

                                            <div class="product-badges">
                                                @if (product.IsSpicy)
                                                {
                                                    <span class="badge-spicy">üå∂Ô∏è Cay</span>
                                                }
                                                @if (product.IsVegetarian)
                                                {
                                                    <span class="badge-vegetarian">ü•ó Chay</span>
                                                }
                                            </div>

                                            <div class="rating">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    if (i <= Math.Floor(product.AverageEvaluate))
                                                    {
                                                        <i class="fas fa-star"></i>
                                                    }
                                                    else if (i - 0.5 <= product.AverageEvaluate)
                                                    {
                                                        <i class="fas fa-star-half-alt"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="far fa-star"></i>
                                                    }
                                                }
                                                <small>(@product.TotalEvaluate)</small>
                                            </div>

                                            <div class="mb-3">
                                                @if (product.DiscountType == Assignment.Enums.DiscountType.None)
                                                {
                                                    <span class="final-price">@product.Price.ToString("N0") ‚Ç´</span>
                                                }
                                                else if (product.DiscountType == Assignment.Enums.DiscountType.Percent)
                                                {
                                                    <div>
                                                        <span class="original-price">@product.Price.ToString("N0") ‚Ç´</span>
                                                    </div>
                                                    <span class="final-price">@((product.Price - (product.Price * product.Discount.Value / 100)).ToString("N0")) ‚Ç´</span>
                                                }
                                                else
                                                {
                                                    <div>
                                                        <span class="original-price">@product.Price.ToString("N0") ‚Ç´</span>
                                                    </div>
                                                    <span class="final-price">@product.Discount.Value.ToString("N0") ‚Ç´</span>
                                                }
                                            </div>

                                            <div class="d-flex gap-2">
                                                <a href="@Url.Action("ProductDetail", "Home", new { id = product.Id })"
                                                   class="btn btn-outline-primary flex-grow-1">Chi ti·∫øt</a>
                                                <button class="btn btn-add-cart" data-id="@product.Id" data-type="product">
                                                    <i class="fas fa-shopping-cart"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                }
            }
            else
            {
                <div class="empty-state">
                    Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán hi·ªán t·∫°i.
                </div>
            }
        </section>
    }
</div>

@section Scripts {
    <script>
        function addToCart(id, type) {
            console.log(`B·∫Øt ƒë·∫ßu addToCart v·ªõi id: ${id}, type: ${type}`);

            const url = type === 'product'
                ? '@Url.Action("AddProduct", "Cart")'
                : '@Url.Action("AddCombo", "Cart")';
            console.log(`URL ƒë∆∞·ª£c t·∫°o: ${url}`);

            const paramName = type === 'product' ? 'productId' : 'comboId';
            const data = { [paramName]: id, quantity: 1 };
            const token = $('input[name="__RequestVerificationToken"]').val();

            console.log("Token ƒë√£ ƒë∆∞·ª£c t√¨m th·∫•y.");

            $.ajax({
                url: url,
                type: 'POST',
                data: { ...data, __RequestVerificationToken: token },
                success: function (response) {
                    console.log("Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!", response);
                    updateCartCount();
                    showNotification('ƒê√£ th√™m v√†o gi·ªè h√†ng!', 'success');
                },
                error: function (xhr, status, error) {
                    console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng (AJAX Error):", {
                        status: xhr.status,
                        statusText: xhr.statusText,
                        responseText: xhr.responseText,
                        errorThrown: error
                    });

                    if (xhr.status === 401) {
                        showNotification('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m.', 'error');
                        setTimeout(() => { window.location.href = '/Identity/Account/Login'; }, 1500);
                    } else {
                        showNotification('C√≥ l·ªói x·∫£y ra khi th√™m v√†o gi·ªè h√†ng.', 'error');
                    }
                }
            });
        }

        function updateCartCount() {
            $.get('@Url.Action("GetCount", "Cart")', function (response) {
                $('#cart-count').text(response.count);
            });
        }

        function showNotification(message, type) {
            const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
            const title = type === 'success' ? 'Th√†nh c√¥ng' : 'Th√¥ng b√°o';

            let container = $('.toast-container');
            if (container.length === 0) {
                container = $('<div>', { class: 'toast-container' }).appendTo('body');
            }

            const toast = $(
                `<div class="toast-notification ${type}">
                    <div class="toast-icon"><i class="fas ${iconClass}"></i></div>
                    <div class="toast-body">
                        <p class="title"></p>
                        <p class="message"></p>
                    </div>
                    <button type="button" class="toast-close" aria-label="ƒê√≥ng th√¥ng b√°o">
                        <i class="fas fa-times"></i>
                    </button>
                    <div class="toast-progress"></div>
                </div>`
            );

            toast.find('.title').text(title);
            toast.find('.message').text(message);

            container.append(toast);

            const removeToast = () => {
                toast.addClass('hide');
                setTimeout(() => toast.remove(), 400);
            };

            const autoRemove = setTimeout(removeToast, 3500);

            toast.find('.toast-close').on('click', () => {
                clearTimeout(autoRemove);
                removeToast();
            });
        }

        $(document).ready(function () {
            $('#resetFiltersBtn').on('click', function () {
                const form = $('#home-search-form');

                form.find('input[type="text"], input[type="number"]').val('');
                form.find('select').each(function () {
                    $(this).val('');
                });
                $('#discount-filter').prop('checked', false);

                form.find('input[name="Segment"]').val('all');
                form.find('input[name="CategoryId"]').remove();

                $('#advanced-search').removeClass('show');
                $('.advanced-toggle').attr('aria-expanded', 'false');

                form.submit();
            });

            $('.btn-add-cart').on('click', function () {
                const button = $(this);
                const id = button.data('id');
                const type = button.data('type');

                addToCart(id, type);
            });

            if ($('#cart-count').length > 0) {
                updateCartCount();
            }
        });
    </script>
}
