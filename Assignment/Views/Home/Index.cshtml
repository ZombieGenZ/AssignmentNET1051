@model Assignment.Models.HomeViewModel

@{
    ViewData["Title"] = "Trang chủ";
}

<link href="~/css/home.css" rel="stylesheet" />

<div class="container mt-4">
    @Html.AntiForgeryToken()
    <!-- Combos Section -->
    @if (Model.Combos.Any())
    {
        <h2 class="section-title">🎁 Combo Đặc Biệt</h2>
        <div class="row g-4">
            @foreach (var combo in Model.Combos)
            {
                <div class="col-md-4 col-lg-3">
                    <div class="product-card">
                        <div class="position-relative">
                            <img src="@combo.ImageUrl" class="product-image" alt="@combo.Name" />
                            @if (combo.DiscountType == Assignment.Enums.DiscountType.Percent && combo.Discount.HasValue)
                            {
                                <span class="badge-discount">-@combo.Discount%</span>
                            }
                        </div>
                        <div class="product-info">
                            <h5 class="product-name">@combo.Name</h5>

                            <div class="product-badges">
                                @if (combo.ComboItems.Any(ci => ci.Product.IsSpicy))
                                {
                                    <span class="badge-spicy">🌶️ Cay</span>
                                }
                                @if (combo.ComboItems.All(ci => ci.Product.IsVegetarian))
                                {
                                    <span class="badge-vegetarian">🥗 Chay</span>
                                }
                            </div>

                            <div class="rating">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    if (i <= Math.Floor(combo.AverageEvaluate))
                                    {
                                        <i class="fas fa-star"></i>
                                    }
                                    else if (i - 0.5 <= combo.AverageEvaluate)
                                    {
                                        <i class="fas fa-star-half-alt"></i>
                                    }
                                    else
                                    {
                                        <i class="far fa-star"></i>
                                    }
                                }
                                <small>(@combo.TotalEvaluate)</small>
                            </div>

                            <div class="mb-3">
                                @{ var finalPrice = PriceCalculator.GetComboFinalPrice(combo); }
                                @if (combo.DiscountType == Assignment.Enums.DiscountType.Percent && combo.Discount.HasValue)
                                {
                                    <div>
                                        <span class="original-price">@combo.Price.ToString("N0") ₫</span>
                                    </div>
                                    <span class="final-price">@finalPrice.ToString("N0") ₫</span>
                                }
                                else
                                {
                                    <span class="final-price">@finalPrice.ToString("N0") ₫</span>
                                }
                            </div>

                            <div class="d-flex gap-2">
                                <a href="@Url.Action("ComboDetail", "Home", new { id = combo.Id })"
                                   class="btn btn-outline-primary flex-grow-1">Chi tiết</a>
                                <button class="btn btn-add-cart" data-id="@combo.Id" data-type="combo">
                                    <i class="fas fa-shopping-cart"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Products by Category Section -->
    @{
        var productsByCategory = Model.Products.GroupBy(p => p.Category).OrderBy(g => g.Key?.Index ?? 0);
    }

    @foreach (var categoryGroup in productsByCategory)
    {
        var category = categoryGroup.Key;
        var products = categoryGroup.ToList();

        if (products.Any())
        {
            <h2 class="section-title">🍽️ @(category?.Name ?? "Khác")</h2>
            <div class="row g-4">
                @foreach (var product in products)
                {
                    <div class="col-md-4 col-lg-3">
                        <div class="product-card">
                            <div class="position-relative">
                                <img src="@product.ProductImageUrl" class="product-image" alt="@product.Name" />
                                @if (product.DiscountType != Assignment.Enums.DiscountType.None)
                                {
                                    <span class="badge-discount">
                                        @if (product.DiscountType == Assignment.Enums.DiscountType.Percent)
                                        {
                                            @:-@product.Discount%
                                        }
                                        else
                                        {
                                            @:Giá sốc
                                        }
                                    </span>
                                }
                            </div>
                            <div class="product-info">
                                <h5 class="product-name">@product.Name</h5>

                                <div class="product-badges">
                                    @if (product.IsSpicy)
                                    {
                                        <span class="badge-spicy">🌶️ Cay</span>
                                    }
                                    @if (product.IsVegetarian)
                                    {
                                        <span class="badge-vegetarian">🥗 Chay</span>
                                    }
                                </div>

                                <div class="rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= Math.Floor(product.AverageEvaluate))
                                        {
                                            <i class="fas fa-star"></i>
                                        }
                                        else if (i - 0.5 <= product.AverageEvaluate)
                                        {
                                            <i class="fas fa-star-half-alt"></i>
                                        }
                                        else
                                        {
                                            <i class="far fa-star"></i>
                                        }
                                    }
                                    <small>(@product.TotalEvaluate)</small>
                                </div>

                                <div class="mb-3">
                                    @if (product.DiscountType == Assignment.Enums.DiscountType.None)
                                    {
                                        <span class="final-price">@product.Price.ToString("N0") ₫</span>
                                    }
                                    else if (product.DiscountType == Assignment.Enums.DiscountType.Percent)
                                    {
                                        <div>
                                            <span class="original-price">@product.Price.ToString("N0") ₫</span>
                                        </div>
                                        <span class="final-price">@((product.Price - (product.Price * product.Discount.Value / 100)).ToString("N0")) ₫</span>
                                    }
                                    else
                                    {
                                        <div>
                                            <span class="original-price">@product.Price.ToString("N0") ₫</span>
                                        </div>
                                        <span class="final-price">@product.Discount.Value.ToString("N0") ₫</span>
                                    }
                                </div>

                                <div class="d-flex gap-2">
                                    <a href="@Url.Action("ProductDetail", "Home", new { id = product.Id })"
                                       class="btn btn-outline-primary flex-grow-1">Chi tiết</a>
                                    <button class="btn btn-add-cart" data-id="@product.Id" data-type="product">
                                        <i class="fas fa-shopping-cart"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

@section Scripts {
    <script>
        function addToCart(id, type) {
            console.log(`Bắt đầu addToCart với id: ${id}, type: ${type}`);

            const url = type === 'product'
                ? '@Url.Action("AddProduct", "Cart")'
                : '@Url.Action("AddCombo", "Cart")';
            console.log(`URL được tạo: ${url}`);

            const paramName = type === 'product' ? 'productId' : 'comboId';
            const data = { [paramName]: id, quantity: 1 };
            const token = $('input[name="__RequestVerificationToken"]').val();

            console.log("Token đã được tìm thấy.");

            $.ajax({
                url: url,
                type: 'POST',
                data: { ...data, __RequestVerificationToken: token },
                success: function (response) {
                    console.log("Thêm vào giỏ hàng thành công!", response);
                    updateCartCount();
                    showNotification('Đã thêm vào giỏ hàng!', 'success');
                },
                error: function (xhr, status, error) {
                    console.error("Lỗi khi thêm vào giỏ hàng (AJAX Error):", {
                        status: xhr.status,
                        statusText: xhr.statusText,
                        responseText: xhr.responseText,
                        errorThrown: error
                    });

                    if (xhr.status === 401) {
                        showNotification('Vui lòng đăng nhập để thêm sản phẩm.', 'error');
                        setTimeout(() => { window.location.href = '/Identity/Account/Login'; }, 1500);
                    } else {
                        showNotification('Có lỗi xảy ra khi thêm vào giỏ hàng.', 'error');
                    }
                }
            });
        }

        function updateCartCount() {
            $.get('@Url.Action("GetCount", "Cart")', function (response) {
                $('#cart-count').text(response.count);
            });
        }

        function showNotification(message, type) {
            const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
            const title = type === 'success' ? 'Thành công' : 'Thông báo';

            let container = $('.toast-container');
            if (container.length === 0) {
                container = $('<div>', { class: 'toast-container' }).appendTo('body');
            }

            const toast = $(
                `<div class="toast-notification ${type}">
                    <div class="toast-icon"><i class="fas ${iconClass}"></i></div>
                    <div class="toast-body">
                        <p class="title"></p>
                        <p class="message"></p>
                    </div>
                    <button type="button" class="toast-close" aria-label="Đóng thông báo">
                        <i class="fas fa-times"></i>
                    </button>
                    <div class="toast-progress"></div>
                </div>`
            );

            toast.find('.title').text(title);
            toast.find('.message').text(message);

            container.append(toast);

            const removeToast = () => {
                toast.addClass('hide');
                setTimeout(() => toast.remove(), 400);
            };

            const autoRemove = setTimeout(removeToast, 3500);

            toast.find('.toast-close').on('click', () => {
                clearTimeout(autoRemove);
                removeToast();
            });
        }

        $(document).ready(function () {
            $('.btn-add-cart').on('click', function () {
                const button = $(this);
                const id = button.data('id');
                const type = button.data('type');

                addToCart(id, type);
            });

            if ($('#cart-count').length > 0) {
               updateCartCount();
            }
        });
    </script>
}

